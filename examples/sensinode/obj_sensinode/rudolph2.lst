                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.1 #7100 (Apr  1 2013) (Linux)
                              4 ; This file was generated Tue Apr 23 09:41:18 2013
                              5 ;--------------------------------------------------------
                              6 	.module rudolph2
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _polite_cancel
                             13 	.globl _polite_send
                             14 	.globl _polite_close
                             15 	.globl _polite_open
                             16 	.globl _packetbuf_hdrreduce
                             17 	.globl _packetbuf_hdralloc
                             18 	.globl _packetbuf_set_datalen
                             19 	.globl _packetbuf_totlen
                             20 	.globl _packetbuf_hdrptr
                             21 	.globl _packetbuf_dataptr
                             22 	.globl _packetbuf_clear
                             23 	.globl _ctimer_set
                             24 	.globl _IRCON2_P2IF
                             25 	.globl _IRCON2_UTX0IF
                             26 	.globl _IRCON2_UTX1IF
                             27 	.globl _IRCON2_P1IF
                             28 	.globl _IRCON2_WDTIF
                             29 	.globl _CY
                             30 	.globl _AC
                             31 	.globl _F0
                             32 	.globl _RS1
                             33 	.globl _RS0
                             34 	.globl _OV
                             35 	.globl _F1
                             36 	.globl _P
                             37 	.globl _IRCON_DMAIF
                             38 	.globl _IRCON_T1IF
                             39 	.globl _IRCON_T2IF
                             40 	.globl _IRCON_T3IF
                             41 	.globl _IRCON_T4IF
                             42 	.globl _IRCON_P0IF
                             43 	.globl _IRCON_STIF
                             44 	.globl _IEN1_DMAIE
                             45 	.globl _IEN1_T1IE
                             46 	.globl _IEN1_T2IE
                             47 	.globl _IEN1_T3IE
                             48 	.globl _IEN1_T4IE
                             49 	.globl _IEN1_P0IE
                             50 	.globl _IEN0_RFERRIE
                             51 	.globl _IEN0_ADCIE
                             52 	.globl _IEN0_URX0IE
                             53 	.globl _IEN0_URX1IE
                             54 	.globl _IEN0_ENCIE
                             55 	.globl _IEN0_STIE
                             56 	.globl _IEN0_EA
                             57 	.globl _EA
                             58 	.globl _P2_4
                             59 	.globl _P2_3
                             60 	.globl _P2_2
                             61 	.globl _P2_1
                             62 	.globl _P2_0
                             63 	.globl _S0CON_ENCIF_0
                             64 	.globl _S0CON_ENCIF_1
                             65 	.globl _P1_7
                             66 	.globl _P1_6
                             67 	.globl _P1_5
                             68 	.globl _P1_4
                             69 	.globl _P1_3
                             70 	.globl _P1_2
                             71 	.globl _P1_1
                             72 	.globl _P1_0
                             73 	.globl _TCON_IT0
                             74 	.globl _TCON_RFERRIF
                             75 	.globl _TCON_IT1
                             76 	.globl _TCON_URX0IF
                             77 	.globl _TCON_ADCIF
                             78 	.globl _TCON_URX1IF
                             79 	.globl _P0_0
                             80 	.globl _P0_1
                             81 	.globl _P0_2
                             82 	.globl _P0_3
                             83 	.globl _P0_4
                             84 	.globl _P0_5
                             85 	.globl _P0_6
                             86 	.globl _P0_7
                             87 	.globl _P2DIR
                             88 	.globl _P1DIR
                             89 	.globl _P0DIR
                             90 	.globl _U1GCR
                             91 	.globl _U1UCR
                             92 	.globl _U1BAUD
                             93 	.globl _U1BUF
                             94 	.globl _U1CSR
                             95 	.globl _P2INP
                             96 	.globl _P1INP
                             97 	.globl _P2SEL
                             98 	.globl _P1SEL
                             99 	.globl _P0SEL
                            100 	.globl _ADCCFG
                            101 	.globl _PERCFG
                            102 	.globl _B
                            103 	.globl _T4CC1
                            104 	.globl _T4CCTL1
                            105 	.globl _T4CC0
                            106 	.globl _T4CCTL0
                            107 	.globl _T4CTL
                            108 	.globl _T4CNT
                            109 	.globl _RFIF
                            110 	.globl _IRCON2
                            111 	.globl _T1CCTL2
                            112 	.globl _T1CCTL1
                            113 	.globl _T1CCTL0
                            114 	.globl _T1CTL
                            115 	.globl _T1CNTH
                            116 	.globl _T1CNTL
                            117 	.globl _RFST
                            118 	.globl _ACC
                            119 	.globl _T1CC2H
                            120 	.globl _T1CC2L
                            121 	.globl _T1CC1H
                            122 	.globl _T1CC1L
                            123 	.globl _T1CC0H
                            124 	.globl _T1CC0L
                            125 	.globl _RFD
                            126 	.globl _TIMIF
                            127 	.globl _DMAREQ
                            128 	.globl _DMAARM
                            129 	.globl _DMA0CFGH
                            130 	.globl _DMA0CFGL
                            131 	.globl _DMA1CFGH
                            132 	.globl _DMA1CFGL
                            133 	.globl _DMAIRQ
                            134 	.globl _PSW
                            135 	.globl _T3CC1
                            136 	.globl _T3CCTL1
                            137 	.globl _T3CC0
                            138 	.globl _T3CCTL0
                            139 	.globl _T3CTL
                            140 	.globl _T3CNT
                            141 	.globl _WDCTL
                            142 	.globl _T2CON
                            143 	.globl _MEMCTR
                            144 	.globl _CLKCON
                            145 	.globl _U0GCR
                            146 	.globl _U0UCR
                            147 	.globl _T2CNF
                            148 	.globl _U0BAUD
                            149 	.globl _U0BUF
                            150 	.globl _IRCON
                            151 	.globl _SLEEP
                            152 	.globl _RNDH
                            153 	.globl _RNDL
                            154 	.globl _ADCH
                            155 	.globl _ADCL
                            156 	.globl _IP1
                            157 	.globl _IEN1
                            158 	.globl _RCCTL
                            159 	.globl _ADCCON3
                            160 	.globl _ADCCON2
                            161 	.globl _ADCCON1
                            162 	.globl _ENCCS
                            163 	.globl _ENCDO
                            164 	.globl _ENCDI
                            165 	.globl _FWDATA
                            166 	.globl _FCTL
                            167 	.globl _FADDRH
                            168 	.globl _FADDRL
                            169 	.globl _FWT
                            170 	.globl _IP0
                            171 	.globl _IEN0
                            172 	.globl _IE
                            173 	.globl _T2THD
                            174 	.globl _T2TLD
                            175 	.globl _T2CAPHPH
                            176 	.globl _T2CAPLPL
                            177 	.globl _T2OF2
                            178 	.globl _T2OF1
                            179 	.globl _T2OF0
                            180 	.globl _P2
                            181 	.globl _PSBANK
                            182 	.globl _FMAP
                            183 	.globl _T2PEROF2
                            184 	.globl _T2PEROF1
                            185 	.globl _T2PEROF0
                            186 	.globl _S1CON
                            187 	.globl _IEN2
                            188 	.globl _HSRC
                            189 	.globl _S0CON
                            190 	.globl _ST2
                            191 	.globl _ST1
                            192 	.globl _ST0
                            193 	.globl _T2CMP
                            194 	.globl __XPAGE
                            195 	.globl _DPS
                            196 	.globl _RFIM
                            197 	.globl _P1
                            198 	.globl _P0INP
                            199 	.globl _P1IEN
                            200 	.globl _PICTL
                            201 	.globl _P2IFG
                            202 	.globl _P1IFG
                            203 	.globl _P0IFG
                            204 	.globl _TCON
                            205 	.globl _PCON
                            206 	.globl _U0CSR
                            207 	.globl _DPH1
                            208 	.globl _DPL1
                            209 	.globl _DPH0
                            210 	.globl _DPL0
                            211 	.globl _SP
                            212 	.globl _P0
                            213 	.globl _ADC_SHADOW
                            214 	.globl _U1BUF_SHADOW
                            215 	.globl _RFD_SHADOW
                            216 	.globl _U0BUF_SHADOW
                            217 	.globl _RFSTATUS
                            218 	.globl _CHIPID
                            219 	.globl _CHVER
                            220 	.globl _FSMTC1
                            221 	.globl _RXFIFOCNT
                            222 	.globl _IOCFG3
                            223 	.globl _IOCFG2
                            224 	.globl _IOCFG1
                            225 	.globl _IOCFG0
                            226 	.globl _SHORTADDRL
                            227 	.globl _SHORTADDRH
                            228 	.globl _PANIDL
                            229 	.globl _PANIDH
                            230 	.globl _IEEE_ADDR7
                            231 	.globl _IEEE_ADDR6
                            232 	.globl _IEEE_ADDR5
                            233 	.globl _IEEE_ADDR4
                            234 	.globl _IEEE_ADDR3
                            235 	.globl _IEEE_ADDR2
                            236 	.globl _IEEE_ADDR1
                            237 	.globl _IEEE_ADDR0
                            238 	.globl _DACTSTL
                            239 	.globl _DACTSTH
                            240 	.globl _ADCTSTL
                            241 	.globl _ADCTSTH
                            242 	.globl _FSMSTATE
                            243 	.globl _AGCCTRLL
                            244 	.globl _AGCCTRLH
                            245 	.globl _MANORL
                            246 	.globl _MANORH
                            247 	.globl _MANANDL
                            248 	.globl _MANANDH
                            249 	.globl _FSMTCL
                            250 	.globl _FSMTCH
                            251 	.globl _RFPWR
                            252 	.globl _CSPT
                            253 	.globl _CSPCTRL
                            254 	.globl _CSPZ
                            255 	.globl _CSPY
                            256 	.globl _CSPX
                            257 	.globl _FSCTRLL
                            258 	.globl _FSCTRLH
                            259 	.globl _RXCTRL1L
                            260 	.globl _RXCTRL1H
                            261 	.globl _RXCTRL0L
                            262 	.globl _RXCTRL0H
                            263 	.globl _TXCTRLL
                            264 	.globl _TXCTRLH
                            265 	.globl _SYNCWORDL
                            266 	.globl _SYNCWORDH
                            267 	.globl _RSSIL
                            268 	.globl _RSSIH
                            269 	.globl _MDMCTRL1L
                            270 	.globl _MDMCTRL1H
                            271 	.globl _MDMCTRL0L
                            272 	.globl _MDMCTRL0H
                            273 	.globl _rudolph2_open
                            274 	.globl _rudolph2_close
                            275 	.globl _rudolph2_send
                            276 	.globl _rudolph2_stop
                            277 ;--------------------------------------------------------
                            278 ; special function registers
                            279 ;--------------------------------------------------------
                            280 	.area RSEG    (ABS,DATA)
   0000                     281 	.org 0x0000
                    0080    282 _P0	=	0x0080
                    0081    283 _SP	=	0x0081
                    0082    284 _DPL0	=	0x0082
                    0083    285 _DPH0	=	0x0083
                    0084    286 _DPL1	=	0x0084
                    0085    287 _DPH1	=	0x0085
                    0086    288 _U0CSR	=	0x0086
                    0087    289 _PCON	=	0x0087
                    0088    290 _TCON	=	0x0088
                    0089    291 _P0IFG	=	0x0089
                    008A    292 _P1IFG	=	0x008a
                    008B    293 _P2IFG	=	0x008b
                    008C    294 _PICTL	=	0x008c
                    008D    295 _P1IEN	=	0x008d
                    008F    296 _P0INP	=	0x008f
                    0090    297 _P1	=	0x0090
                    0091    298 _RFIM	=	0x0091
                    0092    299 _DPS	=	0x0092
                    0093    300 __XPAGE	=	0x0093
                    0094    301 _T2CMP	=	0x0094
                    0095    302 _ST0	=	0x0095
                    0096    303 _ST1	=	0x0096
                    0097    304 _ST2	=	0x0097
                    0098    305 _S0CON	=	0x0098
                    0099    306 _HSRC	=	0x0099
                    009A    307 _IEN2	=	0x009a
                    009B    308 _S1CON	=	0x009b
                    009C    309 _T2PEROF0	=	0x009c
                    009D    310 _T2PEROF1	=	0x009d
                    009E    311 _T2PEROF2	=	0x009e
                    009F    312 _FMAP	=	0x009f
                    009F    313 _PSBANK	=	0x009f
                    00A0    314 _P2	=	0x00a0
                    00A1    315 _T2OF0	=	0x00a1
                    00A2    316 _T2OF1	=	0x00a2
                    00A3    317 _T2OF2	=	0x00a3
                    00A4    318 _T2CAPLPL	=	0x00a4
                    00A5    319 _T2CAPHPH	=	0x00a5
                    00A6    320 _T2TLD	=	0x00a6
                    00A7    321 _T2THD	=	0x00a7
                    00A8    322 _IE	=	0x00a8
                    00A8    323 _IEN0	=	0x00a8
                    00A9    324 _IP0	=	0x00a9
                    00AB    325 _FWT	=	0x00ab
                    00AC    326 _FADDRL	=	0x00ac
                    00AD    327 _FADDRH	=	0x00ad
                    00AE    328 _FCTL	=	0x00ae
                    00AF    329 _FWDATA	=	0x00af
                    00B1    330 _ENCDI	=	0x00b1
                    00B2    331 _ENCDO	=	0x00b2
                    00B3    332 _ENCCS	=	0x00b3
                    00B4    333 _ADCCON1	=	0x00b4
                    00B5    334 _ADCCON2	=	0x00b5
                    00B6    335 _ADCCON3	=	0x00b6
                    00B7    336 _RCCTL	=	0x00b7
                    00B8    337 _IEN1	=	0x00b8
                    00B9    338 _IP1	=	0x00b9
                    00BA    339 _ADCL	=	0x00ba
                    00BB    340 _ADCH	=	0x00bb
                    00BC    341 _RNDL	=	0x00bc
                    00BD    342 _RNDH	=	0x00bd
                    00BE    343 _SLEEP	=	0x00be
                    00C0    344 _IRCON	=	0x00c0
                    00C1    345 _U0BUF	=	0x00c1
                    00C2    346 _U0BAUD	=	0x00c2
                    00C3    347 _T2CNF	=	0x00c3
                    00C4    348 _U0UCR	=	0x00c4
                    00C5    349 _U0GCR	=	0x00c5
                    00C6    350 _CLKCON	=	0x00c6
                    00C7    351 _MEMCTR	=	0x00c7
                    00C8    352 _T2CON	=	0x00c8
                    00C9    353 _WDCTL	=	0x00c9
                    00CA    354 _T3CNT	=	0x00ca
                    00CB    355 _T3CTL	=	0x00cb
                    00CC    356 _T3CCTL0	=	0x00cc
                    00CD    357 _T3CC0	=	0x00cd
                    00CE    358 _T3CCTL1	=	0x00ce
                    00CF    359 _T3CC1	=	0x00cf
                    00D0    360 _PSW	=	0x00d0
                    00D1    361 _DMAIRQ	=	0x00d1
                    00D2    362 _DMA1CFGL	=	0x00d2
                    00D3    363 _DMA1CFGH	=	0x00d3
                    00D4    364 _DMA0CFGL	=	0x00d4
                    00D5    365 _DMA0CFGH	=	0x00d5
                    00D6    366 _DMAARM	=	0x00d6
                    00D7    367 _DMAREQ	=	0x00d7
                    00D8    368 _TIMIF	=	0x00d8
                    00D9    369 _RFD	=	0x00d9
                    00DA    370 _T1CC0L	=	0x00da
                    00DB    371 _T1CC0H	=	0x00db
                    00DC    372 _T1CC1L	=	0x00dc
                    00DD    373 _T1CC1H	=	0x00dd
                    00DE    374 _T1CC2L	=	0x00de
                    00DF    375 _T1CC2H	=	0x00df
                    00E0    376 _ACC	=	0x00e0
                    00E1    377 _RFST	=	0x00e1
                    00E2    378 _T1CNTL	=	0x00e2
                    00E3    379 _T1CNTH	=	0x00e3
                    00E4    380 _T1CTL	=	0x00e4
                    00E5    381 _T1CCTL0	=	0x00e5
                    00E6    382 _T1CCTL1	=	0x00e6
                    00E7    383 _T1CCTL2	=	0x00e7
                    00E8    384 _IRCON2	=	0x00e8
                    00E9    385 _RFIF	=	0x00e9
                    00EA    386 _T4CNT	=	0x00ea
                    00EB    387 _T4CTL	=	0x00eb
                    00EC    388 _T4CCTL0	=	0x00ec
                    00ED    389 _T4CC0	=	0x00ed
                    00EE    390 _T4CCTL1	=	0x00ee
                    00EF    391 _T4CC1	=	0x00ef
                    00F0    392 _B	=	0x00f0
                    00F1    393 _PERCFG	=	0x00f1
                    00F2    394 _ADCCFG	=	0x00f2
                    00F3    395 _P0SEL	=	0x00f3
                    00F4    396 _P1SEL	=	0x00f4
                    00F5    397 _P2SEL	=	0x00f5
                    00F6    398 _P1INP	=	0x00f6
                    00F7    399 _P2INP	=	0x00f7
                    00F8    400 _U1CSR	=	0x00f8
                    00F9    401 _U1BUF	=	0x00f9
                    00FA    402 _U1BAUD	=	0x00fa
                    00FB    403 _U1UCR	=	0x00fb
                    00FC    404 _U1GCR	=	0x00fc
                    00FD    405 _P0DIR	=	0x00fd
                    00FE    406 _P1DIR	=	0x00fe
                    00FF    407 _P2DIR	=	0x00ff
                            408 ;--------------------------------------------------------
                            409 ; special function bits
                            410 ;--------------------------------------------------------
                            411 	.area RSEG    (ABS,DATA)
   0000                     412 	.org 0x0000
                    0087    413 _P0_7	=	0x0087
                    0086    414 _P0_6	=	0x0086
                    0085    415 _P0_5	=	0x0085
                    0084    416 _P0_4	=	0x0084
                    0083    417 _P0_3	=	0x0083
                    0082    418 _P0_2	=	0x0082
                    0081    419 _P0_1	=	0x0081
                    0080    420 _P0_0	=	0x0080
                    008F    421 _TCON_URX1IF	=	0x008f
                    008D    422 _TCON_ADCIF	=	0x008d
                    008B    423 _TCON_URX0IF	=	0x008b
                    008A    424 _TCON_IT1	=	0x008a
                    0089    425 _TCON_RFERRIF	=	0x0089
                    0088    426 _TCON_IT0	=	0x0088
                    0090    427 _P1_0	=	0x0090
                    0091    428 _P1_1	=	0x0091
                    0092    429 _P1_2	=	0x0092
                    0093    430 _P1_3	=	0x0093
                    0094    431 _P1_4	=	0x0094
                    0095    432 _P1_5	=	0x0095
                    0096    433 _P1_6	=	0x0096
                    0097    434 _P1_7	=	0x0097
                    0099    435 _S0CON_ENCIF_1	=	0x0099
                    0098    436 _S0CON_ENCIF_0	=	0x0098
                    00A0    437 _P2_0	=	0x00a0
                    00A1    438 _P2_1	=	0x00a1
                    00A2    439 _P2_2	=	0x00a2
                    00A3    440 _P2_3	=	0x00a3
                    00A4    441 _P2_4	=	0x00a4
                    00AF    442 _EA	=	0x00af
                    00AF    443 _IEN0_EA	=	0x00af
                    00AD    444 _IEN0_STIE	=	0x00ad
                    00AC    445 _IEN0_ENCIE	=	0x00ac
                    00AB    446 _IEN0_URX1IE	=	0x00ab
                    00AA    447 _IEN0_URX0IE	=	0x00aa
                    00A9    448 _IEN0_ADCIE	=	0x00a9
                    00A8    449 _IEN0_RFERRIE	=	0x00a8
                    00BD    450 _IEN1_P0IE	=	0x00bd
                    00BC    451 _IEN1_T4IE	=	0x00bc
                    00BB    452 _IEN1_T3IE	=	0x00bb
                    00BA    453 _IEN1_T2IE	=	0x00ba
                    00B9    454 _IEN1_T1IE	=	0x00b9
                    00B8    455 _IEN1_DMAIE	=	0x00b8
                    00C7    456 _IRCON_STIF	=	0x00c7
                    00C5    457 _IRCON_P0IF	=	0x00c5
                    00C4    458 _IRCON_T4IF	=	0x00c4
                    00C3    459 _IRCON_T3IF	=	0x00c3
                    00C2    460 _IRCON_T2IF	=	0x00c2
                    00C1    461 _IRCON_T1IF	=	0x00c1
                    00C0    462 _IRCON_DMAIF	=	0x00c0
                    00D0    463 _P	=	0x00d0
                    00D1    464 _F1	=	0x00d1
                    00D2    465 _OV	=	0x00d2
                    00D3    466 _RS0	=	0x00d3
                    00D4    467 _RS1	=	0x00d4
                    00D5    468 _F0	=	0x00d5
                    00D6    469 _AC	=	0x00d6
                    00D7    470 _CY	=	0x00d7
                    00EC    471 _IRCON2_WDTIF	=	0x00ec
                    00EB    472 _IRCON2_P1IF	=	0x00eb
                    00EA    473 _IRCON2_UTX1IF	=	0x00ea
                    00E9    474 _IRCON2_UTX0IF	=	0x00e9
                    00E8    475 _IRCON2_P2IF	=	0x00e8
                            476 ;--------------------------------------------------------
                            477 ; overlayable register banks
                            478 ;--------------------------------------------------------
                            479 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     480 	.ds 8
                            481 ;--------------------------------------------------------
                            482 ; internal ram data
                            483 ;--------------------------------------------------------
                            484 	.area DSEG    (DATA)
                            485 ;--------------------------------------------------------
                            486 ; overlayable items in internal ram 
                            487 ;--------------------------------------------------------
                            488 	.area OSEG    (OVR,DATA)
                            489 ;--------------------------------------------------------
                            490 ; indirectly addressable internal ram data
                            491 ;--------------------------------------------------------
                            492 	.area ISEG    (DATA)
                            493 ;--------------------------------------------------------
                            494 ; absolute internal ram data
                            495 ;--------------------------------------------------------
                            496 	.area IABS    (ABS,DATA)
                            497 	.area IABS    (ABS,DATA)
                            498 ;--------------------------------------------------------
                            499 ; bit data
                            500 ;--------------------------------------------------------
                            501 	.area BSEG    (BIT)
                            502 ;--------------------------------------------------------
                            503 ; paged external ram data
                            504 ;--------------------------------------------------------
                            505 	.area PSEG    (PAG,XDATA)
                            506 ;--------------------------------------------------------
                            507 ; external ram data
                            508 ;--------------------------------------------------------
                            509 	.area XSEG    (XDATA)
                    DF02    510 _MDMCTRL0H	=	0xdf02
                    DF03    511 _MDMCTRL0L	=	0xdf03
                    DF04    512 _MDMCTRL1H	=	0xdf04
                    DF05    513 _MDMCTRL1L	=	0xdf05
                    DF06    514 _RSSIH	=	0xdf06
                    DF07    515 _RSSIL	=	0xdf07
                    DF08    516 _SYNCWORDH	=	0xdf08
                    DF09    517 _SYNCWORDL	=	0xdf09
                    DF0A    518 _TXCTRLH	=	0xdf0a
                    DF0B    519 _TXCTRLL	=	0xdf0b
                    DF0C    520 _RXCTRL0H	=	0xdf0c
                    DF0D    521 _RXCTRL0L	=	0xdf0d
                    DF0E    522 _RXCTRL1H	=	0xdf0e
                    DF0F    523 _RXCTRL1L	=	0xdf0f
                    DF10    524 _FSCTRLH	=	0xdf10
                    DF11    525 _FSCTRLL	=	0xdf11
                    DF12    526 _CSPX	=	0xdf12
                    DF13    527 _CSPY	=	0xdf13
                    DF14    528 _CSPZ	=	0xdf14
                    DF15    529 _CSPCTRL	=	0xdf15
                    DF16    530 _CSPT	=	0xdf16
                    DF17    531 _RFPWR	=	0xdf17
                    DF20    532 _FSMTCH	=	0xdf20
                    DF21    533 _FSMTCL	=	0xdf21
                    DF22    534 _MANANDH	=	0xdf22
                    DF23    535 _MANANDL	=	0xdf23
                    DF24    536 _MANORH	=	0xdf24
                    DF25    537 _MANORL	=	0xdf25
                    DF26    538 _AGCCTRLH	=	0xdf26
                    DF27    539 _AGCCTRLL	=	0xdf27
                    DF39    540 _FSMSTATE	=	0xdf39
                    DF3A    541 _ADCTSTH	=	0xdf3a
                    DF3B    542 _ADCTSTL	=	0xdf3b
                    DF3C    543 _DACTSTH	=	0xdf3c
                    DF3D    544 _DACTSTL	=	0xdf3d
                    DF43    545 _IEEE_ADDR0	=	0xdf43
                    DF44    546 _IEEE_ADDR1	=	0xdf44
                    DF45    547 _IEEE_ADDR2	=	0xdf45
                    DF46    548 _IEEE_ADDR3	=	0xdf46
                    DF47    549 _IEEE_ADDR4	=	0xdf47
                    DF48    550 _IEEE_ADDR5	=	0xdf48
                    DF49    551 _IEEE_ADDR6	=	0xdf49
                    DF4A    552 _IEEE_ADDR7	=	0xdf4a
                    DF4B    553 _PANIDH	=	0xdf4b
                    DF4C    554 _PANIDL	=	0xdf4c
                    DF4D    555 _SHORTADDRH	=	0xdf4d
                    DF4E    556 _SHORTADDRL	=	0xdf4e
                    DF4F    557 _IOCFG0	=	0xdf4f
                    DF50    558 _IOCFG1	=	0xdf50
                    DF51    559 _IOCFG2	=	0xdf51
                    DF52    560 _IOCFG3	=	0xdf52
                    DF53    561 _RXFIFOCNT	=	0xdf53
                    DF54    562 _FSMTC1	=	0xdf54
                    DF60    563 _CHVER	=	0xdf60
                    DF61    564 _CHIPID	=	0xdf61
                    DF62    565 _RFSTATUS	=	0xdf62
                    DFC1    566 _U0BUF_SHADOW	=	0xdfc1
                    DFD9    567 _RFD_SHADOW	=	0xdfd9
                    DFF9    568 _U1BUF_SHADOW	=	0xdff9
                    DFBA    569 _ADC_SHADOW	=	0xdfba
                            570 ;--------------------------------------------------------
                            571 ; absolute external ram data
                            572 ;--------------------------------------------------------
                            573 	.area XABS    (ABS,XDATA)
                            574 ;--------------------------------------------------------
                            575 ; external initialized ram data
                            576 ;--------------------------------------------------------
                            577 	.area XISEG   (XDATA)
                            578 	.area HOME    (CODE)
                            579 	.area GSINIT0 (CODE)
                            580 	.area GSINIT1 (CODE)
                            581 	.area GSINIT2 (CODE)
                            582 	.area GSINIT3 (CODE)
                            583 	.area GSINIT4 (CODE)
                            584 	.area GSINIT5 (CODE)
                            585 	.area GSINIT  (CODE)
                            586 	.area GSFINAL (CODE)
                            587 	.area CSEG    (CODE)
                            588 ;--------------------------------------------------------
                            589 ; global & static initialisations
                            590 ;--------------------------------------------------------
                            591 	.area HOME    (CODE)
                            592 	.area GSINIT  (CODE)
                            593 	.area GSFINAL (CODE)
                            594 	.area GSINIT  (CODE)
                            595 ;--------------------------------------------------------
                            596 ; Home
                            597 ;--------------------------------------------------------
                            598 	.area HOME    (CODE)
                            599 	.area HOME    (CODE)
                            600 ;--------------------------------------------------------
                            601 ; code
                            602 ;--------------------------------------------------------
                            603 	.area CSEG    (CODE)
                            604 ;------------------------------------------------------------
                            605 ;Allocation info for local variables in function 'read_data'
                            606 ;------------------------------------------------------------
                            607 ;dataptr                   Allocated to stack - _bp -5
                            608 ;chunk                     Allocated to stack - _bp -7
                            609 ;c                         Allocated to stack - _bp +1
                            610 ;len                       Allocated to registers r3 r4 
                            611 ;------------------------------------------------------------
                            612 ;	../../core/net/rime/rudolph2.c:97: read_data(struct rudolph2_conn *c, uint8_t *dataptr, int chunk)
                            613 ;	-----------------------------------------
                            614 ;	 function read_data
                            615 ;	-----------------------------------------
   0000                     616 _read_data:
                    0007    617 	ar7 = 0x07
                    0006    618 	ar6 = 0x06
                    0005    619 	ar5 = 0x05
                    0004    620 	ar4 = 0x04
                    0003    621 	ar3 = 0x03
                    0002    622 	ar2 = 0x02
                    0001    623 	ar1 = 0x01
                    0000    624 	ar0 = 0x00
   0000 C0*00               625 	push	_bp
   0002 85 81*00            626 	mov	_bp,sp
   0005 C0 82               627 	push	dpl
   0007 C0 83               628 	push	dph
   0009 C0 F0               629 	push	b
                            630 ;	../../core/net/rime/rudolph2.c:99: int len = 0;
   000B 7B 00               631 	mov	r3,#0x00
   000D 7C 00               632 	mov	r4,#0x00
                            633 ;	../../core/net/rime/rudolph2.c:101: if(c->cb->read_chunk) {
   000F A8*00               634 	mov	r0,_bp
   0011 08                  635 	inc	r0
   0012 74 28               636 	mov	a,#0x28
   0014 26                  637 	add	a,@r0
   0015 FA                  638 	mov	r2,a
   0016 E4                  639 	clr	a
   0017 08                  640 	inc	r0
   0018 36                  641 	addc	a,@r0
   0019 FE                  642 	mov	r6,a
   001A 08                  643 	inc	r0
   001B 86 07               644 	mov	ar7,@r0
   001D 8A 82               645 	mov	dpl,r2
   001F 8E 83               646 	mov	dph,r6
   0021 8F F0               647 	mov	b,r7
   0023 12s00r00            648 	lcall	__gptrget
   0026 FA                  649 	mov	r2,a
   0027 A3                  650 	inc	dptr
   0028 12s00r00            651 	lcall	__gptrget
   002B FE                  652 	mov	r6,a
   002C A3                  653 	inc	dptr
   002D 12s00r00            654 	lcall	__gptrget
   0030 FF                  655 	mov	r7,a
   0031 74 02               656 	mov	a,#0x02
   0033 2A                  657 	add	a,r2
   0034 FA                  658 	mov	r2,a
   0035 E4                  659 	clr	a
   0036 3E                  660 	addc	a,r6
   0037 FE                  661 	mov	r6,a
   0038 8A 82               662 	mov	dpl,r2
   003A 8E 83               663 	mov	dph,r6
   003C 8F F0               664 	mov	b,r7
   003E 12s00r00            665 	lcall	__gptrget
   0041 FE                  666 	mov	r6,a
   0042 A3                  667 	inc	dptr
   0043 12s00r00            668 	lcall	__gptrget
   0046 FF                  669 	mov	r7,a
   0047 4E                  670 	orl	a,r6
   0048 60 5A               671 	jz	00102$
                            672 ;	../../core/net/rime/rudolph2.c:102: len = c->cb->read_chunk(c, chunk * RUDOLPH2_DATASIZE,
   004A E5*00               673 	mov	a,_bp
   004C 24 F9               674 	add	a,#0xf9
   004E F8                  675 	mov	r0,a
   004F 86 02               676 	mov	ar2,@r0
   0051 08                  677 	inc	r0
   0052 E6                  678 	mov	a,@r0
   0053 54 03               679 	anl	a,#0x03
   0055 A2 E0               680 	mov	c,acc.0
   0057 CA                  681 	xch	a,r2
   0058 13                  682 	rrc	a
   0059 CA                  683 	xch	a,r2
   005A 13                  684 	rrc	a
   005B A2 E0               685 	mov	c,acc.0
   005D CA                  686 	xch	a,r2
   005E 13                  687 	rrc	a
   005F CA                  688 	xch	a,r2
   0060 13                  689 	rrc	a
   0061 CA                  690 	xch	a,r2
   0062 FD                  691 	mov	r5,a
   0063 74 40               692 	mov	a,#0x40
   0065 C0 E0               693 	push	acc
   0067 E4                  694 	clr	a
   0068 C0 E0               695 	push	acc
   006A E5*00               696 	mov	a,_bp
   006C 24 FB               697 	add	a,#0xfb
   006E F8                  698 	mov	r0,a
   006F E6                  699 	mov	a,@r0
   0070 C0 E0               700 	push	acc
   0072 08                  701 	inc	r0
   0073 E6                  702 	mov	a,@r0
   0074 C0 E0               703 	push	acc
   0076 08                  704 	inc	r0
   0077 E6                  705 	mov	a,@r0
   0078 C0 E0               706 	push	acc
   007A C0 02               707 	push	ar2
   007C C0 05               708 	push	ar5
   007E 74r96               709 	mov	a,#00108$
   0080 C0 E0               710 	push	acc
   0082 74s00               711 	mov	a,#(00108$ >> 8)
   0084 C0 E0               712 	push	acc
   0086 C0 06               713 	push	ar6
   0088 C0 07               714 	push	ar7
   008A A8*00               715 	mov	r0,_bp
   008C 08                  716 	inc	r0
   008D 86 82               717 	mov	dpl,@r0
   008F 08                  718 	inc	r0
   0090 86 83               719 	mov	dph,@r0
   0092 08                  720 	inc	r0
   0093 86 F0               721 	mov	b,@r0
   0095 22                  722 	ret
   0096                     723 00108$:
   0096 AE 82               724 	mov	r6,dpl
   0098 AF 83               725 	mov	r7,dph
   009A E5 81               726 	mov	a,sp
   009C 24 F9               727 	add	a,#0xf9
   009E F5 81               728 	mov	sp,a
   00A0 8E 03               729 	mov	ar3,r6
   00A2 8F 04               730 	mov	ar4,r7
   00A4                     731 00102$:
                            732 ;	../../core/net/rime/rudolph2.c:105: return len;
   00A4 8B 82               733 	mov	dpl,r3
   00A6 8C 83               734 	mov	dph,r4
   00A8 85*00 81            735 	mov	sp,_bp
   00AB D0*00               736 	pop	_bp
   00AD 22                  737 	ret
                            738 ;------------------------------------------------------------
                            739 ;Allocation info for local variables in function 'format_data'
                            740 ;------------------------------------------------------------
                            741 ;chunk                     Allocated to stack - _bp -4
                            742 ;c                         Allocated to stack - _bp +1
                            743 ;hdr                       Allocated to stack - _bp +4
                            744 ;len                       Allocated to registers r6 r7 
                            745 ;------------------------------------------------------------
                            746 ;	../../core/net/rime/rudolph2.c:109: format_data(struct rudolph2_conn *c, int chunk)
                            747 ;	-----------------------------------------
                            748 ;	 function format_data
                            749 ;	-----------------------------------------
   00AE                     750 _format_data:
   00AE C0*00               751 	push	_bp
   00B0 85 81*00            752 	mov	_bp,sp
   00B3 C0 82               753 	push	dpl
   00B5 C0 83               754 	push	dph
   00B7 C0 F0               755 	push	b
   00B9 05 81               756 	inc	sp
   00BB 05 81               757 	inc	sp
   00BD 05 81               758 	inc	sp
                            759 ;	../../core/net/rime/rudolph2.c:114: packetbuf_clear();
   00BF 12s00r00            760 	lcall	_packetbuf_clear
                            761 ;	../../core/net/rime/rudolph2.c:115: hdr = packetbuf_dataptr();
   00C2 12s00r00            762 	lcall	_packetbuf_dataptr
   00C5 AA 82               763 	mov	r2,dpl
   00C7 AB 83               764 	mov	r3,dph
   00C9 AC F0               765 	mov	r4,b
   00CB E5*00               766 	mov	a,_bp
   00CD 24 04               767 	add	a,#0x04
   00CF F8                  768 	mov	r0,a
   00D0 A6 02               769 	mov	@r0,ar2
   00D2 08                  770 	inc	r0
   00D3 A6 03               771 	mov	@r0,ar3
   00D5 08                  772 	inc	r0
   00D6 A6 04               773 	mov	@r0,ar4
                            774 ;	../../core/net/rime/rudolph2.c:116: hdr->type = TYPE_DATA;
   00D8 E5*00               775 	mov	a,_bp
   00DA 24 04               776 	add	a,#0x04
   00DC F8                  777 	mov	r0,a
   00DD 86 82               778 	mov	dpl,@r0
   00DF 08                  779 	inc	r0
   00E0 86 83               780 	mov	dph,@r0
   00E2 08                  781 	inc	r0
   00E3 86 F0               782 	mov	b,@r0
   00E5 E4                  783 	clr	a
   00E6 12s00r00            784 	lcall	__gptrput
                            785 ;	../../core/net/rime/rudolph2.c:117: hdr->hops_from_base = c->hops_from_base;
   00E9 E5*00               786 	mov	a,_bp
   00EB 24 04               787 	add	a,#0x04
   00ED F8                  788 	mov	r0,a
   00EE 74 01               789 	mov	a,#0x01
   00F0 26                  790 	add	a,@r0
   00F1 FD                  791 	mov	r5,a
   00F2 E4                  792 	clr	a
   00F3 08                  793 	inc	r0
   00F4 36                  794 	addc	a,@r0
   00F5 FE                  795 	mov	r6,a
   00F6 08                  796 	inc	r0
   00F7 86 07               797 	mov	ar7,@r0
   00F9 A8*00               798 	mov	r0,_bp
   00FB 08                  799 	inc	r0
   00FC 74 46               800 	mov	a,#0x46
   00FE 26                  801 	add	a,@r0
   00FF FA                  802 	mov	r2,a
   0100 E4                  803 	clr	a
   0101 08                  804 	inc	r0
   0102 36                  805 	addc	a,@r0
   0103 FB                  806 	mov	r3,a
   0104 08                  807 	inc	r0
   0105 86 04               808 	mov	ar4,@r0
   0107 8A 82               809 	mov	dpl,r2
   0109 8B 83               810 	mov	dph,r3
   010B 8C F0               811 	mov	b,r4
   010D 12s00r00            812 	lcall	__gptrget
   0110 8D 82               813 	mov	dpl,r5
   0112 8E 83               814 	mov	dph,r6
   0114 8F F0               815 	mov	b,r7
   0116 12s00r00            816 	lcall	__gptrput
                            817 ;	../../core/net/rime/rudolph2.c:118: hdr->version = c->version;
   0119 E5*00               818 	mov	a,_bp
   011B 24 04               819 	add	a,#0x04
   011D F8                  820 	mov	r0,a
   011E 74 02               821 	mov	a,#0x02
   0120 26                  822 	add	a,@r0
   0121 FD                  823 	mov	r5,a
   0122 E4                  824 	clr	a
   0123 08                  825 	inc	r0
   0124 36                  826 	addc	a,@r0
   0125 FE                  827 	mov	r6,a
   0126 08                  828 	inc	r0
   0127 86 07               829 	mov	ar7,@r0
   0129 A8*00               830 	mov	r0,_bp
   012B 08                  831 	inc	r0
   012C 74 44               832 	mov	a,#0x44
   012E 26                  833 	add	a,@r0
   012F FA                  834 	mov	r2,a
   0130 E4                  835 	clr	a
   0131 08                  836 	inc	r0
   0132 36                  837 	addc	a,@r0
   0133 FB                  838 	mov	r3,a
   0134 08                  839 	inc	r0
   0135 86 04               840 	mov	ar4,@r0
   0137 8A 82               841 	mov	dpl,r2
   0139 8B 83               842 	mov	dph,r3
   013B 8C F0               843 	mov	b,r4
   013D 12s00r00            844 	lcall	__gptrget
   0140 FA                  845 	mov	r2,a
   0141 A3                  846 	inc	dptr
   0142 12s00r00            847 	lcall	__gptrget
   0145 FB                  848 	mov	r3,a
   0146 8D 82               849 	mov	dpl,r5
   0148 8E 83               850 	mov	dph,r6
   014A 8F F0               851 	mov	b,r7
   014C EA                  852 	mov	a,r2
   014D 12s00r00            853 	lcall	__gptrput
   0150 A3                  854 	inc	dptr
   0151 EB                  855 	mov	a,r3
   0152 12s00r00            856 	lcall	__gptrput
                            857 ;	../../core/net/rime/rudolph2.c:119: hdr->chunk = chunk;
   0155 E5*00               858 	mov	a,_bp
   0157 24 04               859 	add	a,#0x04
   0159 F8                  860 	mov	r0,a
   015A 74 04               861 	mov	a,#0x04
   015C 26                  862 	add	a,@r0
   015D FD                  863 	mov	r5,a
   015E E4                  864 	clr	a
   015F 08                  865 	inc	r0
   0160 36                  866 	addc	a,@r0
   0161 FE                  867 	mov	r6,a
   0162 08                  868 	inc	r0
   0163 86 07               869 	mov	ar7,@r0
   0165 E5*00               870 	mov	a,_bp
   0167 24 FC               871 	add	a,#0xfc
   0169 F8                  872 	mov	r0,a
   016A 86 03               873 	mov	ar3,@r0
   016C 08                  874 	inc	r0
   016D 86 04               875 	mov	ar4,@r0
   016F 8D 82               876 	mov	dpl,r5
   0171 8E 83               877 	mov	dph,r6
   0173 8F F0               878 	mov	b,r7
   0175 EB                  879 	mov	a,r3
   0176 12s00r00            880 	lcall	__gptrput
   0179 A3                  881 	inc	dptr
   017A EC                  882 	mov	a,r4
   017B 12s00r00            883 	lcall	__gptrput
                            884 ;	../../core/net/rime/rudolph2.c:120: len = read_data(c, (uint8_t *)hdr + sizeof(struct rudolph2_hdr), chunk);
   017E E5*00               885 	mov	a,_bp
   0180 24 04               886 	add	a,#0x04
   0182 F8                  887 	mov	r0,a
   0183 86 02               888 	mov	ar2,@r0
   0185 08                  889 	inc	r0
   0186 86 03               890 	mov	ar3,@r0
   0188 08                  891 	inc	r0
   0189 86 04               892 	mov	ar4,@r0
   018B 74 06               893 	mov	a,#0x06
   018D 2A                  894 	add	a,r2
   018E FA                  895 	mov	r2,a
   018F E4                  896 	clr	a
   0190 3B                  897 	addc	a,r3
   0191 FB                  898 	mov	r3,a
   0192 E5*00               899 	mov	a,_bp
   0194 24 FC               900 	add	a,#0xfc
   0196 F8                  901 	mov	r0,a
   0197 E6                  902 	mov	a,@r0
   0198 C0 E0               903 	push	acc
   019A 08                  904 	inc	r0
   019B E6                  905 	mov	a,@r0
   019C C0 E0               906 	push	acc
   019E C0 02               907 	push	ar2
   01A0 C0 03               908 	push	ar3
   01A2 C0 04               909 	push	ar4
   01A4 A8*00               910 	mov	r0,_bp
   01A6 08                  911 	inc	r0
   01A7 86 82               912 	mov	dpl,@r0
   01A9 08                  913 	inc	r0
   01AA 86 83               914 	mov	dph,@r0
   01AC 08                  915 	inc	r0
   01AD 86 F0               916 	mov	b,@r0
   01AF 12s00r00            917 	lcall	_read_data
   01B2 AE 82               918 	mov	r6,dpl
   01B4 AF 83               919 	mov	r7,dph
   01B6 E5 81               920 	mov	a,sp
   01B8 24 FB               921 	add	a,#0xfb
   01BA F5 81               922 	mov	sp,a
                            923 ;	../../core/net/rime/rudolph2.c:121: packetbuf_set_datalen(sizeof(struct rudolph2_hdr) + len);
   01BC 74 06               924 	mov	a,#0x06
   01BE 2E                  925 	add	a,r6
   01BF FC                  926 	mov	r4,a
   01C0 E4                  927 	clr	a
   01C1 3F                  928 	addc	a,r7
   01C2 FD                  929 	mov	r5,a
   01C3 8C 82               930 	mov	dpl,r4
   01C5 8D 83               931 	mov	dph,r5
   01C7 C0 07               932 	push	ar7
   01C9 C0 06               933 	push	ar6
   01CB 12s00r00            934 	lcall	_packetbuf_set_datalen
   01CE D0 06               935 	pop	ar6
   01D0 D0 07               936 	pop	ar7
                            937 ;	../../core/net/rime/rudolph2.c:123: return len;
   01D2 8E 82               938 	mov	dpl,r6
   01D4 8F 83               939 	mov	dph,r7
   01D6 85*00 81            940 	mov	sp,_bp
   01D9 D0*00               941 	pop	_bp
   01DB 22                  942 	ret
                            943 ;------------------------------------------------------------
                            944 ;Allocation info for local variables in function 'write_data'
                            945 ;------------------------------------------------------------
                            946 ;chunk                     Allocated to stack - _bp -4
                            947 ;data                      Allocated to stack - _bp -7
                            948 ;datalen                   Allocated to stack - _bp -9
                            949 ;c                         Allocated to stack - _bp +1
                            950 ;------------------------------------------------------------
                            951 ;	../../core/net/rime/rudolph2.c:127: write_data(struct rudolph2_conn *c, int chunk, uint8_t *data, int datalen)
                            952 ;	-----------------------------------------
                            953 ;	 function write_data
                            954 ;	-----------------------------------------
   01DC                     955 _write_data:
   01DC C0*00               956 	push	_bp
   01DE 85 81*00            957 	mov	_bp,sp
   01E1 C0 82               958 	push	dpl
   01E3 C0 83               959 	push	dph
   01E5 C0 F0               960 	push	b
                            961 ;	../../core/net/rime/rudolph2.c:130: if(c->flags & FLAG_IS_STOPPED) {
   01E7 A8*00               962 	mov	r0,_bp
   01E9 08                  963 	inc	r0
   01EA 74 48               964 	mov	a,#0x48
   01EC 26                  965 	add	a,@r0
   01ED FA                  966 	mov	r2,a
   01EE E4                  967 	clr	a
   01EF 08                  968 	inc	r0
   01F0 36                  969 	addc	a,@r0
   01F1 FB                  970 	mov	r3,a
   01F2 08                  971 	inc	r0
   01F3 86 04               972 	mov	ar4,@r0
   01F5 8A 82               973 	mov	dpl,r2
   01F7 8B 83               974 	mov	dph,r3
   01F9 8C F0               975 	mov	b,r4
   01FB 12s00r00            976 	lcall	__gptrget
   01FE FA                  977 	mov	r2,a
   01FF 30 E2 03            978 	jnb	acc.2,00102$
                            979 ;	../../core/net/rime/rudolph2.c:131: return;
   0202 02s03rCA            980 	ljmp	00108$
   0205                     981 00102$:
                            982 ;	../../core/net/rime/rudolph2.c:134: if(chunk == 0) {
   0205 E5*00               983 	mov	a,_bp
   0207 24 FC               984 	add	a,#0xfc
   0209 F8                  985 	mov	r0,a
   020A E6                  986 	mov	a,@r0
   020B 08                  987 	inc	r0
   020C 46                  988 	orl	a,@r0
   020D 70 78               989 	jnz	00104$
                            990 ;	../../core/net/rime/rudolph2.c:135: c->cb->write_chunk(c, 0, RUDOLPH2_FLAG_NEWFILE, data, 0);
   020F A8*00               991 	mov	r0,_bp
   0211 08                  992 	inc	r0
   0212 74 28               993 	mov	a,#0x28
   0214 26                  994 	add	a,@r0
   0215 FA                  995 	mov	r2,a
   0216 E4                  996 	clr	a
   0217 08                  997 	inc	r0
   0218 36                  998 	addc	a,@r0
   0219 FB                  999 	mov	r3,a
   021A 08                 1000 	inc	r0
   021B 86 04              1001 	mov	ar4,@r0
   021D 8A 82              1002 	mov	dpl,r2
   021F 8B 83              1003 	mov	dph,r3
   0221 8C F0              1004 	mov	b,r4
   0223 12s00r00           1005 	lcall	__gptrget
   0226 FA                 1006 	mov	r2,a
   0227 A3                 1007 	inc	dptr
   0228 12s00r00           1008 	lcall	__gptrget
   022B FB                 1009 	mov	r3,a
   022C A3                 1010 	inc	dptr
   022D 12s00r00           1011 	lcall	__gptrget
   0230 FC                 1012 	mov	r4,a
   0231 8A 82              1013 	mov	dpl,r2
   0233 8B 83              1014 	mov	dph,r3
   0235 8C F0              1015 	mov	b,r4
   0237 12s00r00           1016 	lcall	__gptrget
   023A FA                 1017 	mov	r2,a
   023B A3                 1018 	inc	dptr
   023C 12s00r00           1019 	lcall	__gptrget
   023F FB                 1020 	mov	r3,a
   0240 C0 03              1021 	push	ar3
   0242 C0 02              1022 	push	ar2
   0244 E4                 1023 	clr	a
   0245 C0 E0              1024 	push	acc
   0247 C0 E0              1025 	push	acc
   0249 E5*00              1026 	mov	a,_bp
   024B 24 F9              1027 	add	a,#0xf9
   024D F8                 1028 	mov	r0,a
   024E E6                 1029 	mov	a,@r0
   024F C0 E0              1030 	push	acc
   0251 08                 1031 	inc	r0
   0252 E6                 1032 	mov	a,@r0
   0253 C0 E0              1033 	push	acc
   0255 08                 1034 	inc	r0
   0256 E6                 1035 	mov	a,@r0
   0257 C0 E0              1036 	push	acc
   0259 74 01              1037 	mov	a,#0x01
   025B C0 E0              1038 	push	acc
   025D E4                 1039 	clr	a
   025E C0 E0              1040 	push	acc
   0260 E4                 1041 	clr	a
   0261 C0 E0              1042 	push	acc
   0263 C0 E0              1043 	push	acc
   0265 74r7D              1044 	mov	a,#00118$
   0267 C0 E0              1045 	push	acc
   0269 74s02              1046 	mov	a,#(00118$ >> 8)
   026B C0 E0              1047 	push	acc
   026D C0 02              1048 	push	ar2
   026F C0 03              1049 	push	ar3
   0271 A8*00              1050 	mov	r0,_bp
   0273 08                 1051 	inc	r0
   0274 86 82              1052 	mov	dpl,@r0
   0276 08                 1053 	inc	r0
   0277 86 83              1054 	mov	dph,@r0
   0279 08                 1055 	inc	r0
   027A 86 F0              1056 	mov	b,@r0
   027C 22                 1057 	ret
   027D                    1058 00118$:
   027D E5 81              1059 	mov	a,sp
   027F 24 F7              1060 	add	a,#0xf7
   0281 F5 81              1061 	mov	sp,a
   0283 D0 02              1062 	pop	ar2
   0285 D0 03              1063 	pop	ar3
   0287                    1064 00104$:
                           1065 ;	../../core/net/rime/rudolph2.c:143: if(datalen < RUDOLPH2_DATASIZE) {
   0287 E5*00              1066 	mov	a,_bp
   0289 24 F7              1067 	add	a,#0xf7
   028B F8                 1068 	mov	r0,a
   028C C3                 1069 	clr	c
   028D E6                 1070 	mov	a,@r0
   028E 94 40              1071 	subb	a,#0x40
   0290 08                 1072 	inc	r0
   0291 E6                 1073 	mov	a,@r0
   0292 64 80              1074 	xrl	a,#0x80
   0294 94 80              1075 	subb	a,#0x80
   0296 40 03              1076 	jc	00119$
   0298 02s03r35           1077 	ljmp	00106$
   029B                    1078 00119$:
                           1079 ;	../../core/net/rime/rudolph2.c:147: c->cb->write_chunk(c, chunk * RUDOLPH2_DATASIZE,
   029B A8*00              1080 	mov	r0,_bp
   029D 08                 1081 	inc	r0
   029E 74 28              1082 	mov	a,#0x28
   02A0 26                 1083 	add	a,@r0
   02A1 FA                 1084 	mov	r2,a
   02A2 E4                 1085 	clr	a
   02A3 08                 1086 	inc	r0
   02A4 36                 1087 	addc	a,@r0
   02A5 FB                 1088 	mov	r3,a
   02A6 08                 1089 	inc	r0
   02A7 86 04              1090 	mov	ar4,@r0
   02A9 8A 82              1091 	mov	dpl,r2
   02AB 8B 83              1092 	mov	dph,r3
   02AD 8C F0              1093 	mov	b,r4
   02AF 12s00r00           1094 	lcall	__gptrget
   02B2 FA                 1095 	mov	r2,a
   02B3 A3                 1096 	inc	dptr
   02B4 12s00r00           1097 	lcall	__gptrget
   02B7 FB                 1098 	mov	r3,a
   02B8 A3                 1099 	inc	dptr
   02B9 12s00r00           1100 	lcall	__gptrget
   02BC FC                 1101 	mov	r4,a
   02BD 8A 82              1102 	mov	dpl,r2
   02BF 8B 83              1103 	mov	dph,r3
   02C1 8C F0              1104 	mov	b,r4
   02C3 12s00r00           1105 	lcall	__gptrget
   02C6 FA                 1106 	mov	r2,a
   02C7 A3                 1107 	inc	dptr
   02C8 12s00r00           1108 	lcall	__gptrget
   02CB FB                 1109 	mov	r3,a
   02CC E5*00              1110 	mov	a,_bp
   02CE 24 FC              1111 	add	a,#0xfc
   02D0 F8                 1112 	mov	r0,a
   02D1 86 04              1113 	mov	ar4,@r0
   02D3 08                 1114 	inc	r0
   02D4 E6                 1115 	mov	a,@r0
   02D5 54 03              1116 	anl	a,#0x03
   02D7 A2 E0              1117 	mov	c,acc.0
   02D9 CC                 1118 	xch	a,r4
   02DA 13                 1119 	rrc	a
   02DB CC                 1120 	xch	a,r4
   02DC 13                 1121 	rrc	a
   02DD A2 E0              1122 	mov	c,acc.0
   02DF CC                 1123 	xch	a,r4
   02E0 13                 1124 	rrc	a
   02E1 CC                 1125 	xch	a,r4
   02E2 13                 1126 	rrc	a
   02E3 CC                 1127 	xch	a,r4
   02E4 FF                 1128 	mov	r7,a
   02E5 C0 03              1129 	push	ar3
   02E7 C0 02              1130 	push	ar2
   02E9 E5*00              1131 	mov	a,_bp
   02EB 24 F7              1132 	add	a,#0xf7
   02ED F8                 1133 	mov	r0,a
   02EE E6                 1134 	mov	a,@r0
   02EF C0 E0              1135 	push	acc
   02F1 08                 1136 	inc	r0
   02F2 E6                 1137 	mov	a,@r0
   02F3 C0 E0              1138 	push	acc
   02F5 E5*00              1139 	mov	a,_bp
   02F7 24 F9              1140 	add	a,#0xf9
   02F9 F8                 1141 	mov	r0,a
   02FA E6                 1142 	mov	a,@r0
   02FB C0 E0              1143 	push	acc
   02FD 08                 1144 	inc	r0
   02FE E6                 1145 	mov	a,@r0
   02FF C0 E0              1146 	push	acc
   0301 08                 1147 	inc	r0
   0302 E6                 1148 	mov	a,@r0
   0303 C0 E0              1149 	push	acc
   0305 74 02              1150 	mov	a,#0x02
   0307 C0 E0              1151 	push	acc
   0309 E4                 1152 	clr	a
   030A C0 E0              1153 	push	acc
   030C C0 04              1154 	push	ar4
   030E C0 07              1155 	push	ar7
   0310 74r28              1156 	mov	a,#00120$
   0312 C0 E0              1157 	push	acc
   0314 74s03              1158 	mov	a,#(00120$ >> 8)
   0316 C0 E0              1159 	push	acc
   0318 C0 02              1160 	push	ar2
   031A C0 03              1161 	push	ar3
   031C A8*00              1162 	mov	r0,_bp
   031E 08                 1163 	inc	r0
   031F 86 82              1164 	mov	dpl,@r0
   0321 08                 1165 	inc	r0
   0322 86 83              1166 	mov	dph,@r0
   0324 08                 1167 	inc	r0
   0325 86 F0              1168 	mov	b,@r0
   0327 22                 1169 	ret
   0328                    1170 00120$:
   0328 E5 81              1171 	mov	a,sp
   032A 24 F7              1172 	add	a,#0xf7
   032C F5 81              1173 	mov	sp,a
   032E D0 02              1174 	pop	ar2
   0330 D0 03              1175 	pop	ar3
   0332 02s03rCA           1176 	ljmp	00108$
   0335                    1177 00106$:
                           1178 ;	../../core/net/rime/rudolph2.c:150: c->cb->write_chunk(c, chunk * RUDOLPH2_DATASIZE,
   0335 A8*00              1179 	mov	r0,_bp
   0337 08                 1180 	inc	r0
   0338 74 28              1181 	mov	a,#0x28
   033A 26                 1182 	add	a,@r0
   033B FD                 1183 	mov	r5,a
   033C E4                 1184 	clr	a
   033D 08                 1185 	inc	r0
   033E 36                 1186 	addc	a,@r0
   033F FE                 1187 	mov	r6,a
   0340 08                 1188 	inc	r0
   0341 86 07              1189 	mov	ar7,@r0
   0343 8D 82              1190 	mov	dpl,r5
   0345 8E 83              1191 	mov	dph,r6
   0347 8F F0              1192 	mov	b,r7
   0349 12s00r00           1193 	lcall	__gptrget
   034C FD                 1194 	mov	r5,a
   034D A3                 1195 	inc	dptr
   034E 12s00r00           1196 	lcall	__gptrget
   0351 FE                 1197 	mov	r6,a
   0352 A3                 1198 	inc	dptr
   0353 12s00r00           1199 	lcall	__gptrget
   0356 FF                 1200 	mov	r7,a
   0357 8D 82              1201 	mov	dpl,r5
   0359 8E 83              1202 	mov	dph,r6
   035B 8F F0              1203 	mov	b,r7
   035D 12s00r00           1204 	lcall	__gptrget
   0360 FD                 1205 	mov	r5,a
   0361 A3                 1206 	inc	dptr
   0362 12s00r00           1207 	lcall	__gptrget
   0365 FE                 1208 	mov	r6,a
   0366 E5*00              1209 	mov	a,_bp
   0368 24 FC              1210 	add	a,#0xfc
   036A F8                 1211 	mov	r0,a
   036B 86 04              1212 	mov	ar4,@r0
   036D 08                 1213 	inc	r0
   036E E6                 1214 	mov	a,@r0
   036F 54 03              1215 	anl	a,#0x03
   0371 A2 E0              1216 	mov	c,acc.0
   0373 CC                 1217 	xch	a,r4
   0374 13                 1218 	rrc	a
   0375 CC                 1219 	xch	a,r4
   0376 13                 1220 	rrc	a
   0377 A2 E0              1221 	mov	c,acc.0
   0379 CC                 1222 	xch	a,r4
   037A 13                 1223 	rrc	a
   037B CC                 1224 	xch	a,r4
   037C 13                 1225 	rrc	a
   037D CC                 1226 	xch	a,r4
   037E FF                 1227 	mov	r7,a
   037F C0 06              1228 	push	ar6
   0381 C0 05              1229 	push	ar5
   0383 E5*00              1230 	mov	a,_bp
   0385 24 F7              1231 	add	a,#0xf7
   0387 F8                 1232 	mov	r0,a
   0388 E6                 1233 	mov	a,@r0
   0389 C0 E0              1234 	push	acc
   038B 08                 1235 	inc	r0
   038C E6                 1236 	mov	a,@r0
   038D C0 E0              1237 	push	acc
   038F E5*00              1238 	mov	a,_bp
   0391 24 F9              1239 	add	a,#0xf9
   0393 F8                 1240 	mov	r0,a
   0394 E6                 1241 	mov	a,@r0
   0395 C0 E0              1242 	push	acc
   0397 08                 1243 	inc	r0
   0398 E6                 1244 	mov	a,@r0
   0399 C0 E0              1245 	push	acc
   039B 08                 1246 	inc	r0
   039C E6                 1247 	mov	a,@r0
   039D C0 E0              1248 	push	acc
   039F E4                 1249 	clr	a
   03A0 C0 E0              1250 	push	acc
   03A2 C0 E0              1251 	push	acc
   03A4 C0 04              1252 	push	ar4
   03A6 C0 07              1253 	push	ar7
   03A8 74rC0              1254 	mov	a,#00121$
   03AA C0 E0              1255 	push	acc
   03AC 74s03              1256 	mov	a,#(00121$ >> 8)
   03AE C0 E0              1257 	push	acc
   03B0 C0 05              1258 	push	ar5
   03B2 C0 06              1259 	push	ar6
   03B4 A8*00              1260 	mov	r0,_bp
   03B6 08                 1261 	inc	r0
   03B7 86 82              1262 	mov	dpl,@r0
   03B9 08                 1263 	inc	r0
   03BA 86 83              1264 	mov	dph,@r0
   03BC 08                 1265 	inc	r0
   03BD 86 F0              1266 	mov	b,@r0
   03BF 22                 1267 	ret
   03C0                    1268 00121$:
   03C0 E5 81              1269 	mov	a,sp
   03C2 24 F7              1270 	add	a,#0xf7
   03C4 F5 81              1271 	mov	sp,a
   03C6 D0 05              1272 	pop	ar5
   03C8 D0 06              1273 	pop	ar6
   03CA                    1274 00108$:
   03CA 85*00 81           1275 	mov	sp,_bp
   03CD D0*00              1276 	pop	_bp
   03CF 22                 1277 	ret
                           1278 ;------------------------------------------------------------
                           1279 ;Allocation info for local variables in function 'send_data'
                           1280 ;------------------------------------------------------------
                           1281 ;interval                  Allocated to stack - _bp -4
                           1282 ;c                         Allocated to registers r5 r6 r7 
                           1283 ;len                       Allocated to registers r3 r4 
                           1284 ;------------------------------------------------------------
                           1285 ;	../../core/net/rime/rudolph2.c:156: send_data(struct rudolph2_conn *c, clock_time_t interval)
                           1286 ;	-----------------------------------------
                           1287 ;	 function send_data
                           1288 ;	-----------------------------------------
   03D0                    1289 _send_data:
   03D0 C0*00              1290 	push	_bp
   03D2 85 81*00           1291 	mov	_bp,sp
   03D5 AD 82              1292 	mov	r5,dpl
   03D7 AE 83              1293 	mov	r6,dph
   03D9 AF F0              1294 	mov	r7,b
                           1295 ;	../../core/net/rime/rudolph2.c:160: len = format_data(c, c->snd_nxt);
   03DB 74 40              1296 	mov	a,#0x40
   03DD 2D                 1297 	add	a,r5
   03DE FA                 1298 	mov	r2,a
   03DF E4                 1299 	clr	a
   03E0 3E                 1300 	addc	a,r6
   03E1 FB                 1301 	mov	r3,a
   03E2 8F 04              1302 	mov	ar4,r7
   03E4 8A 82              1303 	mov	dpl,r2
   03E6 8B 83              1304 	mov	dph,r3
   03E8 8C F0              1305 	mov	b,r4
   03EA 12s00r00           1306 	lcall	__gptrget
   03ED FA                 1307 	mov	r2,a
   03EE A3                 1308 	inc	dptr
   03EF 12s00r00           1309 	lcall	__gptrget
   03F2 FB                 1310 	mov	r3,a
   03F3 C0 07              1311 	push	ar7
   03F5 C0 06              1312 	push	ar6
   03F7 C0 05              1313 	push	ar5
   03F9 C0 02              1314 	push	ar2
   03FB C0 03              1315 	push	ar3
   03FD 8D 82              1316 	mov	dpl,r5
   03FF 8E 83              1317 	mov	dph,r6
   0401 8F F0              1318 	mov	b,r7
   0403 12s00rAE           1319 	lcall	_format_data
   0406 AB 82              1320 	mov	r3,dpl
   0408 AC 83              1321 	mov	r4,dph
   040A 15 81              1322 	dec	sp
   040C 15 81              1323 	dec	sp
   040E D0 05              1324 	pop	ar5
   0410 D0 06              1325 	pop	ar6
   0412 D0 07              1326 	pop	ar7
                           1327 ;	../../core/net/rime/rudolph2.c:161: polite_send(&c->c, interval, POLITE_HEADER);
   0414 C0 04              1328 	push	ar4
   0416 C0 03              1329 	push	ar3
   0418 74 01              1330 	mov	a,#0x01
   041A C0 E0              1331 	push	acc
   041C E5*00              1332 	mov	a,_bp
   041E 24 FC              1333 	add	a,#0xfc
   0420 F8                 1334 	mov	r0,a
   0421 E6                 1335 	mov	a,@r0
   0422 C0 E0              1336 	push	acc
   0424 08                 1337 	inc	r0
   0425 E6                 1338 	mov	a,@r0
   0426 C0 E0              1339 	push	acc
   0428 8D 82              1340 	mov	dpl,r5
   042A 8E 83              1341 	mov	dph,r6
   042C 8F F0              1342 	mov	b,r7
   042E 12s00r00           1343 	lcall	_polite_send
   0431 15 81              1344 	dec	sp
   0433 15 81              1345 	dec	sp
   0435 15 81              1346 	dec	sp
   0437 D0 03              1347 	pop	ar3
   0439 D0 04              1348 	pop	ar4
                           1349 ;	../../core/net/rime/rudolph2.c:166: return len;
   043B 8B 82              1350 	mov	dpl,r3
   043D 8C 83              1351 	mov	dph,r4
   043F D0*00              1352 	pop	_bp
   0441 22                 1353 	ret
                           1354 ;------------------------------------------------------------
                           1355 ;Allocation info for local variables in function 'send_nack'
                           1356 ;------------------------------------------------------------
                           1357 ;c                         Allocated to stack - _bp +1
                           1358 ;hdr                       Allocated to stack - _bp +4
                           1359 ;------------------------------------------------------------
                           1360 ;	../../core/net/rime/rudolph2.c:170: send_nack(struct rudolph2_conn *c)
                           1361 ;	-----------------------------------------
                           1362 ;	 function send_nack
                           1363 ;	-----------------------------------------
   0442                    1364 _send_nack:
   0442 C0*00              1365 	push	_bp
   0444 85 81*00           1366 	mov	_bp,sp
   0447 C0 82              1367 	push	dpl
   0449 C0 83              1368 	push	dph
   044B C0 F0              1369 	push	b
   044D 05 81              1370 	inc	sp
   044F 05 81              1371 	inc	sp
   0451 05 81              1372 	inc	sp
                           1373 ;	../../core/net/rime/rudolph2.c:173: packetbuf_clear();
   0453 12s00r00           1374 	lcall	_packetbuf_clear
                           1375 ;	../../core/net/rime/rudolph2.c:174: packetbuf_hdralloc(sizeof(struct rudolph2_hdr));
   0456 90 00 06           1376 	mov	dptr,#0x0006
   0459 12s00r00           1377 	lcall	_packetbuf_hdralloc
                           1378 ;	../../core/net/rime/rudolph2.c:175: hdr = packetbuf_hdrptr();
   045C 12s00r00           1379 	lcall	_packetbuf_hdrptr
   045F AA 82              1380 	mov	r2,dpl
   0461 AB 83              1381 	mov	r3,dph
   0463 AC F0              1382 	mov	r4,b
   0465 E5*00              1383 	mov	a,_bp
   0467 24 04              1384 	add	a,#0x04
   0469 F8                 1385 	mov	r0,a
   046A A6 02              1386 	mov	@r0,ar2
   046C 08                 1387 	inc	r0
   046D A6 03              1388 	mov	@r0,ar3
   046F 08                 1389 	inc	r0
   0470 A6 04              1390 	mov	@r0,ar4
                           1391 ;	../../core/net/rime/rudolph2.c:177: hdr->hops_from_base = c->hops_from_base;
   0472 E5*00              1392 	mov	a,_bp
   0474 24 04              1393 	add	a,#0x04
   0476 F8                 1394 	mov	r0,a
   0477 74 01              1395 	mov	a,#0x01
   0479 26                 1396 	add	a,@r0
   047A FD                 1397 	mov	r5,a
   047B E4                 1398 	clr	a
   047C 08                 1399 	inc	r0
   047D 36                 1400 	addc	a,@r0
   047E FE                 1401 	mov	r6,a
   047F 08                 1402 	inc	r0
   0480 86 07              1403 	mov	ar7,@r0
   0482 A8*00              1404 	mov	r0,_bp
   0484 08                 1405 	inc	r0
   0485 74 46              1406 	mov	a,#0x46
   0487 26                 1407 	add	a,@r0
   0488 FA                 1408 	mov	r2,a
   0489 E4                 1409 	clr	a
   048A 08                 1410 	inc	r0
   048B 36                 1411 	addc	a,@r0
   048C FB                 1412 	mov	r3,a
   048D 08                 1413 	inc	r0
   048E 86 04              1414 	mov	ar4,@r0
   0490 8A 82              1415 	mov	dpl,r2
   0492 8B 83              1416 	mov	dph,r3
   0494 8C F0              1417 	mov	b,r4
   0496 12s00r00           1418 	lcall	__gptrget
   0499 8D 82              1419 	mov	dpl,r5
   049B 8E 83              1420 	mov	dph,r6
   049D 8F F0              1421 	mov	b,r7
   049F 12s00r00           1422 	lcall	__gptrput
                           1423 ;	../../core/net/rime/rudolph2.c:178: hdr->type = TYPE_NACK;
   04A2 E5*00              1424 	mov	a,_bp
   04A4 24 04              1425 	add	a,#0x04
   04A6 F8                 1426 	mov	r0,a
   04A7 86 82              1427 	mov	dpl,@r0
   04A9 08                 1428 	inc	r0
   04AA 86 83              1429 	mov	dph,@r0
   04AC 08                 1430 	inc	r0
   04AD 86 F0              1431 	mov	b,@r0
   04AF 74 01              1432 	mov	a,#0x01
   04B1 12s00r00           1433 	lcall	__gptrput
                           1434 ;	../../core/net/rime/rudolph2.c:179: hdr->version = c->version;
   04B4 E5*00              1435 	mov	a,_bp
   04B6 24 04              1436 	add	a,#0x04
   04B8 F8                 1437 	mov	r0,a
   04B9 74 02              1438 	mov	a,#0x02
   04BB 26                 1439 	add	a,@r0
   04BC FD                 1440 	mov	r5,a
   04BD E4                 1441 	clr	a
   04BE 08                 1442 	inc	r0
   04BF 36                 1443 	addc	a,@r0
   04C0 FE                 1444 	mov	r6,a
   04C1 08                 1445 	inc	r0
   04C2 86 07              1446 	mov	ar7,@r0
   04C4 A8*00              1447 	mov	r0,_bp
   04C6 08                 1448 	inc	r0
   04C7 74 44              1449 	mov	a,#0x44
   04C9 26                 1450 	add	a,@r0
   04CA FA                 1451 	mov	r2,a
   04CB E4                 1452 	clr	a
   04CC 08                 1453 	inc	r0
   04CD 36                 1454 	addc	a,@r0
   04CE FB                 1455 	mov	r3,a
   04CF 08                 1456 	inc	r0
   04D0 86 04              1457 	mov	ar4,@r0
   04D2 8A 82              1458 	mov	dpl,r2
   04D4 8B 83              1459 	mov	dph,r3
   04D6 8C F0              1460 	mov	b,r4
   04D8 12s00r00           1461 	lcall	__gptrget
   04DB FA                 1462 	mov	r2,a
   04DC A3                 1463 	inc	dptr
   04DD 12s00r00           1464 	lcall	__gptrget
   04E0 FB                 1465 	mov	r3,a
   04E1 8D 82              1466 	mov	dpl,r5
   04E3 8E 83              1467 	mov	dph,r6
   04E5 8F F0              1468 	mov	b,r7
   04E7 EA                 1469 	mov	a,r2
   04E8 12s00r00           1470 	lcall	__gptrput
   04EB A3                 1471 	inc	dptr
   04EC EB                 1472 	mov	a,r3
   04ED 12s00r00           1473 	lcall	__gptrput
                           1474 ;	../../core/net/rime/rudolph2.c:180: hdr->chunk = c->rcv_nxt;
   04F0 E5*00              1475 	mov	a,_bp
   04F2 24 04              1476 	add	a,#0x04
   04F4 F8                 1477 	mov	r0,a
   04F5 74 04              1478 	mov	a,#0x04
   04F7 26                 1479 	add	a,@r0
   04F8 FD                 1480 	mov	r5,a
   04F9 E4                 1481 	clr	a
   04FA 08                 1482 	inc	r0
   04FB 36                 1483 	addc	a,@r0
   04FC FE                 1484 	mov	r6,a
   04FD 08                 1485 	inc	r0
   04FE 86 07              1486 	mov	ar7,@r0
   0500 A8*00              1487 	mov	r0,_bp
   0502 08                 1488 	inc	r0
   0503 74 42              1489 	mov	a,#0x42
   0505 26                 1490 	add	a,@r0
   0506 FA                 1491 	mov	r2,a
   0507 E4                 1492 	clr	a
   0508 08                 1493 	inc	r0
   0509 36                 1494 	addc	a,@r0
   050A FB                 1495 	mov	r3,a
   050B 08                 1496 	inc	r0
   050C 86 04              1497 	mov	ar4,@r0
   050E 8A 82              1498 	mov	dpl,r2
   0510 8B 83              1499 	mov	dph,r3
   0512 8C F0              1500 	mov	b,r4
   0514 12s00r00           1501 	lcall	__gptrget
   0517 FA                 1502 	mov	r2,a
   0518 A3                 1503 	inc	dptr
   0519 12s00r00           1504 	lcall	__gptrget
   051C FB                 1505 	mov	r3,a
   051D 8D 82              1506 	mov	dpl,r5
   051F 8E 83              1507 	mov	dph,r6
   0521 8F F0              1508 	mov	b,r7
   0523 EA                 1509 	mov	a,r2
   0524 12s00r00           1510 	lcall	__gptrput
   0527 A3                 1511 	inc	dptr
   0528 EB                 1512 	mov	a,r3
   0529 12s00r00           1513 	lcall	__gptrput
                           1514 ;	../../core/net/rime/rudolph2.c:185: polite_send(&c->c, NACK_TIMEOUT, POLITE_HEADER);
   052C 74 01              1515 	mov	a,#0x01
   052E C0 E0              1516 	push	acc
   0530 74 20              1517 	mov	a,#0x20
   0532 C0 E0              1518 	push	acc
   0534 E4                 1519 	clr	a
   0535 C0 E0              1520 	push	acc
   0537 A8*00              1521 	mov	r0,_bp
   0539 08                 1522 	inc	r0
   053A 86 82              1523 	mov	dpl,@r0
   053C 08                 1524 	inc	r0
   053D 86 83              1525 	mov	dph,@r0
   053F 08                 1526 	inc	r0
   0540 86 F0              1527 	mov	b,@r0
   0542 12s00r00           1528 	lcall	_polite_send
   0545 15 81              1529 	dec	sp
   0547 15 81              1530 	dec	sp
   0549 15 81              1531 	dec	sp
   054B 85*00 81           1532 	mov	sp,_bp
   054E D0*00              1533 	pop	_bp
   0550 22                 1534 	ret
                           1535 ;------------------------------------------------------------
                           1536 ;Allocation info for local variables in function 'sent'
                           1537 ;------------------------------------------------------------
                           1538 ;polite                    Allocated to registers 
                           1539 ;------------------------------------------------------------
                           1540 ;	../../core/net/rime/rudolph2.c:219: sent(struct polite_conn *polite)
                           1541 ;	-----------------------------------------
                           1542 ;	 function sent
                           1543 ;	-----------------------------------------
   0551                    1544 _sent:
                           1545 ;	../../core/net/rime/rudolph2.c:232: }
   0551 22                 1546 	ret
                           1547 ;------------------------------------------------------------
                           1548 ;Allocation info for local variables in function 'dropped'
                           1549 ;------------------------------------------------------------
                           1550 ;polite                    Allocated to registers 
                           1551 ;------------------------------------------------------------
                           1552 ;	../../core/net/rime/rudolph2.c:235: dropped(struct polite_conn *polite)
                           1553 ;	-----------------------------------------
                           1554 ;	 function dropped
                           1555 ;	-----------------------------------------
   0552                    1556 _dropped:
                           1557 ;	../../core/net/rime/rudolph2.c:246: }
   0552 22                 1558 	ret
                           1559 ;------------------------------------------------------------
                           1560 ;Allocation info for local variables in function 'timed_send'
                           1561 ;------------------------------------------------------------
                           1562 ;ptr                       Allocated to registers r5 r6 r7 
                           1563 ;c                         Allocated to stack - _bp +1
                           1564 ;interval                  Allocated to stack - _bp +4
                           1565 ;len                       Allocated to registers r6 r5 
                           1566 ;sloc0                     Allocated to stack - _bp +11
                           1567 ;sloc1                     Allocated to stack - _bp +6
                           1568 ;sloc2                     Allocated to stack - _bp +9
                           1569 ;------------------------------------------------------------
                           1570 ;	../../core/net/rime/rudolph2.c:249: timed_send(void *ptr)
                           1571 ;	-----------------------------------------
                           1572 ;	 function timed_send
                           1573 ;	-----------------------------------------
   0553                    1574 _timed_send:
   0553 C0*00              1575 	push	_bp
   0555 E5 81              1576 	mov	a,sp
   0557 F5*00              1577 	mov	_bp,a
   0559 24 0A              1578 	add	a,#0x0A
   055B F5 81              1579 	mov	sp,a
   055D AD 82              1580 	mov	r5,dpl
   055F AE 83              1581 	mov	r6,dph
   0561 AF F0              1582 	mov	r7,b
                           1583 ;	../../core/net/rime/rudolph2.c:251: struct rudolph2_conn *c = (struct rudolph2_conn *)ptr;
   0563 A8*00              1584 	mov	r0,_bp
   0565 08                 1585 	inc	r0
   0566 A6 05              1586 	mov	@r0,ar5
   0568 08                 1587 	inc	r0
   0569 A6 06              1588 	mov	@r0,ar6
   056B 08                 1589 	inc	r0
   056C A6 07              1590 	mov	@r0,ar7
                           1591 ;	../../core/net/rime/rudolph2.c:255: if((c->flags & FLAG_IS_STOPPED) == 0 &&
   056E A8*00              1592 	mov	r0,_bp
   0570 08                 1593 	inc	r0
   0571 74 48              1594 	mov	a,#0x48
   0573 26                 1595 	add	a,@r0
   0574 FA                 1596 	mov	r2,a
   0575 E4                 1597 	clr	a
   0576 08                 1598 	inc	r0
   0577 36                 1599 	addc	a,@r0
   0578 FB                 1600 	mov	r3,a
   0579 08                 1601 	inc	r0
   057A 86 04              1602 	mov	ar4,@r0
   057C 8A 82              1603 	mov	dpl,r2
   057E 8B 83              1604 	mov	dph,r3
   0580 8C F0              1605 	mov	b,r4
   0582 12s00r00           1606 	lcall	__gptrget
   0585 FF                 1607 	mov	r7,a
   0586 30 E2 03           1608 	jnb	acc.2,00130$
   0589 02s07r1C           1609 	ljmp	00114$
   058C                    1610 00130$:
                           1611 ;	../../core/net/rime/rudolph2.c:256: (c->flags & FLAG_LAST_RECEIVED)) {
   058C EF                 1612 	mov	a,r7
   058D 20 E1 03           1613 	jb	acc.1,00131$
   0590 02s07r1C           1614 	ljmp	00114$
   0593                    1615 00131$:
                           1616 ;	../../core/net/rime/rudolph2.c:264: if(c->flags & FLAG_LAST_SENT) {
   0593 EF                 1617 	mov	a,r7
   0594 30 E0 0C           1618 	jnb	acc.0,00102$
                           1619 ;	../../core/net/rime/rudolph2.c:265: interval = STEADY_INTERVAL;
   0597 E5*00              1620 	mov	a,_bp
   0599 24 04              1621 	add	a,#0x04
   059B F8                 1622 	mov	r0,a
   059C 76 00              1623 	mov	@r0,#0x00
   059E 08                 1624 	inc	r0
   059F 76 08              1625 	mov	@r0,#0x08
   05A1 80 0A              1626 	sjmp	00103$
   05A3                    1627 00102$:
                           1628 ;	../../core/net/rime/rudolph2.c:267: interval = SEND_INTERVAL;
   05A3 E5*00              1629 	mov	a,_bp
   05A5 24 04              1630 	add	a,#0x04
   05A7 F8                 1631 	mov	r0,a
   05A8 76 40              1632 	mov	@r0,#0x40
   05AA 08                 1633 	inc	r0
   05AB 76 00              1634 	mov	@r0,#0x00
   05AD                    1635 00103$:
                           1636 ;	../../core/net/rime/rudolph2.c:271: len = send_data(c, interval);
   05AD C0 04              1637 	push	ar4
   05AF C0 03              1638 	push	ar3
   05B1 C0 02              1639 	push	ar2
   05B3 E5*00              1640 	mov	a,_bp
   05B5 24 04              1641 	add	a,#0x04
   05B7 F8                 1642 	mov	r0,a
   05B8 E6                 1643 	mov	a,@r0
   05B9 C0 E0              1644 	push	acc
   05BB 08                 1645 	inc	r0
   05BC E6                 1646 	mov	a,@r0
   05BD C0 E0              1647 	push	acc
   05BF A8*00              1648 	mov	r0,_bp
   05C1 08                 1649 	inc	r0
   05C2 86 82              1650 	mov	dpl,@r0
   05C4 08                 1651 	inc	r0
   05C5 86 83              1652 	mov	dph,@r0
   05C7 08                 1653 	inc	r0
   05C8 86 F0              1654 	mov	b,@r0
   05CA 12s03rD0           1655 	lcall	_send_data
   05CD AE 82              1656 	mov	r6,dpl
   05CF AF 83              1657 	mov	r7,dph
   05D1 15 81              1658 	dec	sp
   05D3 15 81              1659 	dec	sp
   05D5 D0 02              1660 	pop	ar2
   05D7 D0 03              1661 	pop	ar3
   05D9 D0 04              1662 	pop	ar4
   05DB 8F 05              1663 	mov	ar5,r7
                           1664 ;	../../core/net/rime/rudolph2.c:273: if(len < RUDOLPH2_DATASIZE) {
   05DD C3                 1665 	clr	c
   05DE EE                 1666 	mov	a,r6
   05DF 94 40              1667 	subb	a,#0x40
   05E1 ED                 1668 	mov	a,r5
   05E2 64 80              1669 	xrl	a,#0x80
   05E4 94 80              1670 	subb	a,#0x80
   05E6 50 19              1671 	jnc	00105$
                           1672 ;	../../core/net/rime/rudolph2.c:274: c->flags |= FLAG_LAST_SENT;
   05E8 8A 82              1673 	mov	dpl,r2
   05EA 8B 83              1674 	mov	dph,r3
   05EC 8C F0              1675 	mov	b,r4
   05EE 12s00r00           1676 	lcall	__gptrget
   05F1 FF                 1677 	mov	r7,a
   05F2 43 07 01           1678 	orl	ar7,#0x01
   05F5 8A 82              1679 	mov	dpl,r2
   05F7 8B 83              1680 	mov	dph,r3
   05F9 8C F0              1681 	mov	b,r4
   05FB EF                 1682 	mov	a,r7
   05FC 12s00r00           1683 	lcall	__gptrput
   05FF 80 17              1684 	sjmp	00106$
   0601                    1685 00105$:
                           1686 ;	../../core/net/rime/rudolph2.c:276: c->flags &= ~FLAG_LAST_SENT;
   0601 8A 82              1687 	mov	dpl,r2
   0603 8B 83              1688 	mov	dph,r3
   0605 8C F0              1689 	mov	b,r4
   0607 12s00r00           1690 	lcall	__gptrget
   060A FF                 1691 	mov	r7,a
   060B 53 07 FE           1692 	anl	ar7,#0xFE
   060E 8A 82              1693 	mov	dpl,r2
   0610 8B 83              1694 	mov	dph,r3
   0612 8C F0              1695 	mov	b,r4
   0614 EF                 1696 	mov	a,r7
   0615 12s00r00           1697 	lcall	__gptrput
                           1698 ;	../../core/net/rime/rudolph2.c:285: ctimer_set(&c->t, interval, timed_send, c);
                           1699 ;	../../core/net/rime/rudolph2.c:276: c->flags &= ~FLAG_LAST_SENT;
   0618                    1700 00106$:
                           1701 ;	../../core/net/rime/rudolph2.c:279: if(c->nacks == 0 &&
   0618 A8*00              1702 	mov	r0,_bp
   061A 08                 1703 	inc	r0
   061B 74 47              1704 	mov	a,#0x47
   061D 26                 1705 	add	a,@r0
   061E FA                 1706 	mov	r2,a
   061F E4                 1707 	clr	a
   0620 08                 1708 	inc	r0
   0621 36                 1709 	addc	a,@r0
   0622 FB                 1710 	mov	r3,a
   0623 08                 1711 	inc	r0
   0624 86 04              1712 	mov	ar4,@r0
   0626 8A 82              1713 	mov	dpl,r2
   0628 8B 83              1714 	mov	dph,r3
   062A 8C F0              1715 	mov	b,r4
   062C 12s00r00           1716 	lcall	__gptrget
   062F 60 03              1717 	jz	00134$
   0631 02s06rD0           1718 	ljmp	00108$
   0634                    1719 00134$:
                           1720 ;	../../core/net/rime/rudolph2.c:280: len == RUDOLPH2_DATASIZE &&
   0634 BE 40 05           1721 	cjne	r6,#0x40,00135$
   0637 BD 00 02           1722 	cjne	r5,#0x00,00135$
   063A 80 03              1723 	sjmp	00136$
   063C                    1724 00135$:
   063C 02s06rD0           1725 	ljmp	00108$
   063F                    1726 00136$:
                           1727 ;	../../core/net/rime/rudolph2.c:281: c->snd_nxt + 1 < c->rcv_nxt) {
   063F C0 02              1728 	push	ar2
   0641 C0 03              1729 	push	ar3
   0643 C0 04              1730 	push	ar4
   0645 A8*00              1731 	mov	r0,_bp
   0647 08                 1732 	inc	r0
   0648 E5*00              1733 	mov	a,_bp
   064A 24 06              1734 	add	a,#0x06
   064C F9                 1735 	mov	r1,a
   064D 74 40              1736 	mov	a,#0x40
   064F 26                 1737 	add	a,@r0
   0650 F7                 1738 	mov	@r1,a
   0651 E4                 1739 	clr	a
   0652 08                 1740 	inc	r0
   0653 36                 1741 	addc	a,@r0
   0654 09                 1742 	inc	r1
   0655 F7                 1743 	mov	@r1,a
   0656 08                 1744 	inc	r0
   0657 09                 1745 	inc	r1
   0658 E6                 1746 	mov	a,@r0
   0659 F7                 1747 	mov	@r1,a
   065A E5*00              1748 	mov	a,_bp
   065C 24 06              1749 	add	a,#0x06
   065E F8                 1750 	mov	r0,a
   065F 86 82              1751 	mov	dpl,@r0
   0661 08                 1752 	inc	r0
   0662 86 83              1753 	mov	dph,@r0
   0664 08                 1754 	inc	r0
   0665 86 F0              1755 	mov	b,@r0
   0667 E5*00              1756 	mov	a,_bp
   0669 24 09              1757 	add	a,#0x09
   066B F9                 1758 	mov	r1,a
   066C 12s00r00           1759 	lcall	__gptrget
   066F F7                 1760 	mov	@r1,a
   0670 A3                 1761 	inc	dptr
   0671 12s00r00           1762 	lcall	__gptrget
   0674 09                 1763 	inc	r1
   0675 F7                 1764 	mov	@r1,a
   0676 E5*00              1765 	mov	a,_bp
   0678 24 09              1766 	add	a,#0x09
   067A F8                 1767 	mov	r0,a
   067B 74 01              1768 	mov	a,#0x01
   067D 26                 1769 	add	a,@r0
   067E FB                 1770 	mov	r3,a
   067F E4                 1771 	clr	a
   0680 08                 1772 	inc	r0
   0681 36                 1773 	addc	a,@r0
   0682 FC                 1774 	mov	r4,a
   0683 A8*00              1775 	mov	r0,_bp
   0685 08                 1776 	inc	r0
   0686 74 42              1777 	mov	a,#0x42
   0688 26                 1778 	add	a,@r0
   0689 FA                 1779 	mov	r2,a
   068A E4                 1780 	clr	a
   068B 08                 1781 	inc	r0
   068C 36                 1782 	addc	a,@r0
   068D FE                 1783 	mov	r6,a
   068E 08                 1784 	inc	r0
   068F 86 07              1785 	mov	ar7,@r0
   0691 8A 82              1786 	mov	dpl,r2
   0693 8E 83              1787 	mov	dph,r6
   0695 8F F0              1788 	mov	b,r7
   0697 12s00r00           1789 	lcall	__gptrget
   069A FA                 1790 	mov	r2,a
   069B A3                 1791 	inc	dptr
   069C 12s00r00           1792 	lcall	__gptrget
   069F FE                 1793 	mov	r6,a
   06A0 C3                 1794 	clr	c
   06A1 EB                 1795 	mov	a,r3
   06A2 9A                 1796 	subb	a,r2
   06A3 EC                 1797 	mov	a,r4
   06A4 9E                 1798 	subb	a,r6
   06A5 D0 04              1799 	pop	ar4
   06A7 D0 03              1800 	pop	ar3
   06A9 D0 02              1801 	pop	ar2
   06AB 50 23              1802 	jnc	00108$
                           1803 ;	../../core/net/rime/rudolph2.c:282: c->snd_nxt++;
   06AD E5*00              1804 	mov	a,_bp
   06AF 24 09              1805 	add	a,#0x09
   06B1 F8                 1806 	mov	r0,a
   06B2 74 01              1807 	mov	a,#0x01
   06B4 26                 1808 	add	a,@r0
   06B5 FE                 1809 	mov	r6,a
   06B6 E4                 1810 	clr	a
   06B7 08                 1811 	inc	r0
   06B8 36                 1812 	addc	a,@r0
   06B9 FF                 1813 	mov	r7,a
   06BA E5*00              1814 	mov	a,_bp
   06BC 24 06              1815 	add	a,#0x06
   06BE F8                 1816 	mov	r0,a
   06BF 86 82              1817 	mov	dpl,@r0
   06C1 08                 1818 	inc	r0
   06C2 86 83              1819 	mov	dph,@r0
   06C4 08                 1820 	inc	r0
   06C5 86 F0              1821 	mov	b,@r0
   06C7 EE                 1822 	mov	a,r6
   06C8 12s00r00           1823 	lcall	__gptrput
   06CB A3                 1824 	inc	dptr
   06CC EF                 1825 	mov	a,r7
   06CD 12s00r00           1826 	lcall	__gptrput
   06D0                    1827 00108$:
                           1828 ;	../../core/net/rime/rudolph2.c:284: c->nacks = 0;
   06D0 8A 82              1829 	mov	dpl,r2
   06D2 8B 83              1830 	mov	dph,r3
   06D4 8C F0              1831 	mov	b,r4
   06D6 E4                 1832 	clr	a
   06D7 12s00r00           1833 	lcall	__gptrput
                           1834 ;	../../core/net/rime/rudolph2.c:285: ctimer_set(&c->t, interval, timed_send, c);
   06DA A8*00              1835 	mov	r0,_bp
   06DC 08                 1836 	inc	r0
   06DD 86 05              1837 	mov	ar5,@r0
   06DF 08                 1838 	inc	r0
   06E0 86 06              1839 	mov	ar6,@r0
   06E2 08                 1840 	inc	r0
   06E3 86 07              1841 	mov	ar7,@r0
   06E5 A8*00              1842 	mov	r0,_bp
   06E7 08                 1843 	inc	r0
   06E8 74 2B              1844 	mov	a,#0x2B
   06EA 26                 1845 	add	a,@r0
   06EB FA                 1846 	mov	r2,a
   06EC E4                 1847 	clr	a
   06ED 08                 1848 	inc	r0
   06EE 36                 1849 	addc	a,@r0
   06EF FB                 1850 	mov	r3,a
   06F0 08                 1851 	inc	r0
   06F1 86 04              1852 	mov	ar4,@r0
   06F3 C0 05              1853 	push	ar5
   06F5 C0 06              1854 	push	ar6
   06F7 C0 07              1855 	push	ar7
   06F9 74r53              1856 	mov	a,#_timed_send
   06FB C0 E0              1857 	push	acc
   06FD 74s05              1858 	mov	a,#(_timed_send >> 8)
   06FF C0 E0              1859 	push	acc
   0701 E5*00              1860 	mov	a,_bp
   0703 24 04              1861 	add	a,#0x04
   0705 F8                 1862 	mov	r0,a
   0706 E6                 1863 	mov	a,@r0
   0707 C0 E0              1864 	push	acc
   0709 08                 1865 	inc	r0
   070A E6                 1866 	mov	a,@r0
   070B C0 E0              1867 	push	acc
   070D 8A 82              1868 	mov	dpl,r2
   070F 8B 83              1869 	mov	dph,r3
   0711 8C F0              1870 	mov	b,r4
   0713 12s00r00           1871 	lcall	_ctimer_set
   0716 E5 81              1872 	mov	a,sp
   0718 24 F9              1873 	add	a,#0xf9
   071A F5 81              1874 	mov	sp,a
   071C                    1875 00114$:
   071C 85*00 81           1876 	mov	sp,_bp
   071F D0*00              1877 	pop	_bp
   0721 22                 1878 	ret
                           1879 ;------------------------------------------------------------
                           1880 ;Allocation info for local variables in function 'recv'
                           1881 ;------------------------------------------------------------
                           1882 ;polite                    Allocated to registers r5 r6 r7 
                           1883 ;c                         Allocated to stack - _bp +1
                           1884 ;hdr                       Allocated to stack - _bp +4
                           1885 ;len                       Allocated to registers r4 r3 
                           1886 ;sloc0                     Allocated to stack - _bp +7
                           1887 ;sloc1                     Allocated to stack - _bp +15
                           1888 ;sloc2                     Allocated to stack - _bp +10
                           1889 ;sloc3                     Allocated to stack - _bp +12
                           1890 ;------------------------------------------------------------
                           1891 ;	../../core/net/rime/rudolph2.c:290: recv(struct polite_conn *polite)
                           1892 ;	-----------------------------------------
                           1893 ;	 function recv
                           1894 ;	-----------------------------------------
   0722                    1895 _recv:
   0722 C0*00              1896 	push	_bp
   0724 E5 81              1897 	mov	a,sp
   0726 F5*00              1898 	mov	_bp,a
   0728 24 0E              1899 	add	a,#0x0E
   072A F5 81              1900 	mov	sp,a
   072C AD 82              1901 	mov	r5,dpl
   072E AE 83              1902 	mov	r6,dph
   0730 AF F0              1903 	mov	r7,b
                           1904 ;	../../core/net/rime/rudolph2.c:292: struct rudolph2_conn *c = (struct rudolph2_conn *)polite;
   0732 A8*00              1905 	mov	r0,_bp
   0734 08                 1906 	inc	r0
   0735 A6 05              1907 	mov	@r0,ar5
   0737 08                 1908 	inc	r0
   0738 A6 06              1909 	mov	@r0,ar6
   073A 08                 1910 	inc	r0
   073B A6 07              1911 	mov	@r0,ar7
                           1912 ;	../../core/net/rime/rudolph2.c:293: struct rudolph2_hdr *hdr = packetbuf_dataptr();
   073D 12s00r00           1913 	lcall	_packetbuf_dataptr
   0740 AA 82              1914 	mov	r2,dpl
   0742 AB 83              1915 	mov	r3,dph
   0744 AC F0              1916 	mov	r4,b
   0746 E5*00              1917 	mov	a,_bp
   0748 24 04              1918 	add	a,#0x04
   074A F8                 1919 	mov	r0,a
   074B A6 02              1920 	mov	@r0,ar2
   074D 08                 1921 	inc	r0
   074E A6 03              1922 	mov	@r0,ar3
   0750 08                 1923 	inc	r0
   0751 A6 04              1924 	mov	@r0,ar4
                           1925 ;	../../core/net/rime/rudolph2.c:298: if(hdr->type == TYPE_NACK && hdr->hops_from_base > c->hops_from_base) {
   0753 E5*00              1926 	mov	a,_bp
   0755 24 04              1927 	add	a,#0x04
   0757 F8                 1928 	mov	r0,a
   0758 86 82              1929 	mov	dpl,@r0
   075A 08                 1930 	inc	r0
   075B 86 83              1931 	mov	dph,@r0
   075D 08                 1932 	inc	r0
   075E 86 F0              1933 	mov	b,@r0
   0760 12s00r00           1934 	lcall	__gptrget
   0763 FF                 1935 	mov	r7,a
   0764 BF 01 02           1936 	cjne	r7,#0x01,00160$
   0767 80 03              1937 	sjmp	00161$
   0769                    1938 00160$:
   0769 02s08rDA           1939 	ljmp	00129$
   076C                    1940 00161$:
   076C C0 07              1941 	push	ar7
   076E E5*00              1942 	mov	a,_bp
   0770 24 04              1943 	add	a,#0x04
   0772 F8                 1944 	mov	r0,a
   0773 74 01              1945 	mov	a,#0x01
   0775 26                 1946 	add	a,@r0
   0776 FD                 1947 	mov	r5,a
   0777 E4                 1948 	clr	a
   0778 08                 1949 	inc	r0
   0779 36                 1950 	addc	a,@r0
   077A FE                 1951 	mov	r6,a
   077B 08                 1952 	inc	r0
   077C 86 07              1953 	mov	ar7,@r0
   077E 8D 82              1954 	mov	dpl,r5
   0780 8E 83              1955 	mov	dph,r6
   0782 8F F0              1956 	mov	b,r7
   0784 12s00r00           1957 	lcall	__gptrget
   0787 FD                 1958 	mov	r5,a
   0788 A8*00              1959 	mov	r0,_bp
   078A 08                 1960 	inc	r0
   078B 74 46              1961 	mov	a,#0x46
   078D 26                 1962 	add	a,@r0
   078E FC                 1963 	mov	r4,a
   078F E4                 1964 	clr	a
   0790 08                 1965 	inc	r0
   0791 36                 1966 	addc	a,@r0
   0792 FE                 1967 	mov	r6,a
   0793 08                 1968 	inc	r0
   0794 86 07              1969 	mov	ar7,@r0
   0796 8C 82              1970 	mov	dpl,r4
   0798 8E 83              1971 	mov	dph,r6
   079A 8F F0              1972 	mov	b,r7
   079C 12s00r00           1973 	lcall	__gptrget
   079F FC                 1974 	mov	r4,a
   07A0 C3                 1975 	clr	c
   07A1 9D                 1976 	subb	a,r5
   07A2 D0 07              1977 	pop	ar7
   07A4 40 03              1978 	jc	00162$
   07A6 02s08rDA           1979 	ljmp	00129$
   07A9                    1980 00162$:
                           1981 ;	../../core/net/rime/rudolph2.c:299: c->nacks++;
   07A9 A8*00              1982 	mov	r0,_bp
   07AB 08                 1983 	inc	r0
   07AC 74 47              1984 	mov	a,#0x47
   07AE 26                 1985 	add	a,@r0
   07AF FC                 1986 	mov	r4,a
   07B0 E4                 1987 	clr	a
   07B1 08                 1988 	inc	r0
   07B2 36                 1989 	addc	a,@r0
   07B3 FD                 1990 	mov	r5,a
   07B4 08                 1991 	inc	r0
   07B5 86 06              1992 	mov	ar6,@r0
   07B7 8C 82              1993 	mov	dpl,r4
   07B9 8D 83              1994 	mov	dph,r5
   07BB 8E F0              1995 	mov	b,r6
   07BD 12s00r00           1996 	lcall	__gptrget
   07C0 FB                 1997 	mov	r3,a
   07C1 0B                 1998 	inc	r3
   07C2 8C 82              1999 	mov	dpl,r4
   07C4 8D 83              2000 	mov	dph,r5
   07C6 8E F0              2001 	mov	b,r6
   07C8 EB                 2002 	mov	a,r3
   07C9 12s00r00           2003 	lcall	__gptrput
                           2004 ;	../../core/net/rime/rudolph2.c:304: if(hdr->version == c->version) {
   07CC E5*00              2005 	mov	a,_bp
   07CE 24 04              2006 	add	a,#0x04
   07D0 F8                 2007 	mov	r0,a
   07D1 74 02              2008 	mov	a,#0x02
   07D3 26                 2009 	add	a,@r0
   07D4 FC                 2010 	mov	r4,a
   07D5 E4                 2011 	clr	a
   07D6 08                 2012 	inc	r0
   07D7 36                 2013 	addc	a,@r0
   07D8 FD                 2014 	mov	r5,a
   07D9 08                 2015 	inc	r0
   07DA 86 06              2016 	mov	ar6,@r0
   07DC 8C 82              2017 	mov	dpl,r4
   07DE 8D 83              2018 	mov	dph,r5
   07E0 8E F0              2019 	mov	b,r6
   07E2 12s00r00           2020 	lcall	__gptrget
   07E5 FD                 2021 	mov	r5,a
   07E6 A3                 2022 	inc	dptr
   07E7 12s00r00           2023 	lcall	__gptrget
   07EA FE                 2024 	mov	r6,a
   07EB A8*00              2025 	mov	r0,_bp
   07ED 08                 2026 	inc	r0
   07EE 74 44              2027 	mov	a,#0x44
   07F0 26                 2028 	add	a,@r0
   07F1 FA                 2029 	mov	r2,a
   07F2 E4                 2030 	clr	a
   07F3 08                 2031 	inc	r0
   07F4 36                 2032 	addc	a,@r0
   07F5 FB                 2033 	mov	r3,a
   07F6 08                 2034 	inc	r0
   07F7 86 04              2035 	mov	ar4,@r0
   07F9 8A 82              2036 	mov	dpl,r2
   07FB 8B 83              2037 	mov	dph,r3
   07FD 8C F0              2038 	mov	b,r4
   07FF 12s00r00           2039 	lcall	__gptrget
   0802 FB                 2040 	mov	r3,a
   0803 A3                 2041 	inc	dptr
   0804 12s00r00           2042 	lcall	__gptrget
   0807 FC                 2043 	mov	r4,a
   0808 ED                 2044 	mov	a,r5
   0809 B5 03 06           2045 	cjne	a,ar3,00163$
   080C EE                 2046 	mov	a,r6
   080D B5 04 02           2047 	cjne	a,ar4,00163$
   0810 80 03              2048 	sjmp	00164$
   0812                    2049 00163$:
   0812 02s08r94           2050 	ljmp	00106$
   0815                    2051 00164$:
                           2052 ;	../../core/net/rime/rudolph2.c:305: if(hdr->chunk < c->rcv_nxt) {
   0815 E5*00              2053 	mov	a,_bp
   0817 24 04              2054 	add	a,#0x04
   0819 F8                 2055 	mov	r0,a
   081A 74 04              2056 	mov	a,#0x04
   081C 26                 2057 	add	a,@r0
   081D FF                 2058 	mov	r7,a
   081E E4                 2059 	clr	a
   081F 08                 2060 	inc	r0
   0820 36                 2061 	addc	a,@r0
   0821 FE                 2062 	mov	r6,a
   0822 08                 2063 	inc	r0
   0823 86 05              2064 	mov	ar5,@r0
   0825 8F 82              2065 	mov	dpl,r7
   0827 8E 83              2066 	mov	dph,r6
   0829 8D F0              2067 	mov	b,r5
   082B 12s00r00           2068 	lcall	__gptrget
   082E FF                 2069 	mov	r7,a
   082F A3                 2070 	inc	dptr
   0830 12s00r00           2071 	lcall	__gptrget
   0833 FE                 2072 	mov	r6,a
   0834 A8*00              2073 	mov	r0,_bp
   0836 08                 2074 	inc	r0
   0837 74 42              2075 	mov	a,#0x42
   0839 26                 2076 	add	a,@r0
   083A FD                 2077 	mov	r5,a
   083B E4                 2078 	clr	a
   083C 08                 2079 	inc	r0
   083D 36                 2080 	addc	a,@r0
   083E FC                 2081 	mov	r4,a
   083F 08                 2082 	inc	r0
   0840 86 03              2083 	mov	ar3,@r0
   0842 8D 82              2084 	mov	dpl,r5
   0844 8C 83              2085 	mov	dph,r4
   0846 8B F0              2086 	mov	b,r3
   0848 12s00r00           2087 	lcall	__gptrget
   084B FD                 2088 	mov	r5,a
   084C A3                 2089 	inc	dptr
   084D 12s00r00           2090 	lcall	__gptrget
   0850 FC                 2091 	mov	r4,a
   0851 C3                 2092 	clr	c
   0852 EF                 2093 	mov	a,r7
   0853 9D                 2094 	subb	a,r5
   0854 EE                 2095 	mov	a,r6
   0855 9C                 2096 	subb	a,r4
   0856 40 03              2097 	jc	00165$
   0858 02s0Cr43           2098 	ljmp	00132$
   085B                    2099 00165$:
                           2100 ;	../../core/net/rime/rudolph2.c:306: c->snd_nxt = hdr->chunk;
   085B A8*00              2101 	mov	r0,_bp
   085D 08                 2102 	inc	r0
   085E 74 40              2103 	mov	a,#0x40
   0860 26                 2104 	add	a,@r0
   0861 FD                 2105 	mov	r5,a
   0862 E4                 2106 	clr	a
   0863 08                 2107 	inc	r0
   0864 36                 2108 	addc	a,@r0
   0865 FC                 2109 	mov	r4,a
   0866 08                 2110 	inc	r0
   0867 86 03              2111 	mov	ar3,@r0
   0869 8D 82              2112 	mov	dpl,r5
   086B 8C 83              2113 	mov	dph,r4
   086D 8B F0              2114 	mov	b,r3
   086F EF                 2115 	mov	a,r7
   0870 12s00r00           2116 	lcall	__gptrput
   0873 A3                 2117 	inc	dptr
   0874 EE                 2118 	mov	a,r6
   0875 12s00r00           2119 	lcall	__gptrput
                           2120 ;	../../core/net/rime/rudolph2.c:307: send_data(c, SEND_INTERVAL);
   0878 74 40              2121 	mov	a,#0x40
   087A C0 E0              2122 	push	acc
   087C E4                 2123 	clr	a
   087D C0 E0              2124 	push	acc
   087F A8*00              2125 	mov	r0,_bp
   0881 08                 2126 	inc	r0
   0882 86 82              2127 	mov	dpl,@r0
   0884 08                 2128 	inc	r0
   0885 86 83              2129 	mov	dph,@r0
   0887 08                 2130 	inc	r0
   0888 86 F0              2131 	mov	b,@r0
   088A 12s03rD0           2132 	lcall	_send_data
   088D 15 81              2133 	dec	sp
   088F 15 81              2134 	dec	sp
   0891 02s0Cr43           2135 	ljmp	00132$
   0894                    2136 00106$:
                           2137 ;	../../core/net/rime/rudolph2.c:309: } else if(LT(hdr->version, c->version)) {
   0894 ED                 2138 	mov	a,r5
   0895 C3                 2139 	clr	c
   0896 9B                 2140 	subb	a,r3
   0897 FD                 2141 	mov	r5,a
   0898 EE                 2142 	mov	a,r6
   0899 9C                 2143 	subb	a,r4
   089A FE                 2144 	mov	r6,a
   089B 20 E7 03           2145 	jb	acc.7,00166$
   089E 02s0Cr43           2146 	ljmp	00132$
   08A1                    2147 00166$:
                           2148 ;	../../core/net/rime/rudolph2.c:310: c->snd_nxt = 0;
   08A1 A8*00              2149 	mov	r0,_bp
   08A3 08                 2150 	inc	r0
   08A4 74 40              2151 	mov	a,#0x40
   08A6 26                 2152 	add	a,@r0
   08A7 FC                 2153 	mov	r4,a
   08A8 E4                 2154 	clr	a
   08A9 08                 2155 	inc	r0
   08AA 36                 2156 	addc	a,@r0
   08AB FD                 2157 	mov	r5,a
   08AC 08                 2158 	inc	r0
   08AD 86 06              2159 	mov	ar6,@r0
   08AF 8C 82              2160 	mov	dpl,r4
   08B1 8D 83              2161 	mov	dph,r5
   08B3 8E F0              2162 	mov	b,r6
   08B5 E4                 2163 	clr	a
   08B6 12s00r00           2164 	lcall	__gptrput
   08B9 A3                 2165 	inc	dptr
   08BA E4                 2166 	clr	a
   08BB 12s00r00           2167 	lcall	__gptrput
                           2168 ;	../../core/net/rime/rudolph2.c:311: send_data(c, SEND_INTERVAL);
   08BE 74 40              2169 	mov	a,#0x40
   08C0 C0 E0              2170 	push	acc
   08C2 E4                 2171 	clr	a
   08C3 C0 E0              2172 	push	acc
   08C5 A8*00              2173 	mov	r0,_bp
   08C7 08                 2174 	inc	r0
   08C8 86 82              2175 	mov	dpl,@r0
   08CA 08                 2176 	inc	r0
   08CB 86 83              2177 	mov	dph,@r0
   08CD 08                 2178 	inc	r0
   08CE 86 F0              2179 	mov	b,@r0
   08D0 12s03rD0           2180 	lcall	_send_data
   08D3 15 81              2181 	dec	sp
   08D5 15 81              2182 	dec	sp
   08D7 02s0Cr43           2183 	ljmp	00132$
   08DA                    2184 00129$:
                           2185 ;	../../core/net/rime/rudolph2.c:313: } else if(hdr->type == TYPE_DATA) {
   08DA EF                 2186 	mov	a,r7
   08DB 60 03              2187 	jz	00167$
   08DD 02s0Cr43           2188 	ljmp	00132$
   08E0                    2189 00167$:
                           2190 ;	../../core/net/rime/rudolph2.c:314: if(hdr->hops_from_base < c->hops_from_base) {
   08E0 E5*00              2191 	mov	a,_bp
   08E2 24 04              2192 	add	a,#0x04
   08E4 F8                 2193 	mov	r0,a
   08E5 74 01              2194 	mov	a,#0x01
   08E7 26                 2195 	add	a,@r0
   08E8 FD                 2196 	mov	r5,a
   08E9 E4                 2197 	clr	a
   08EA 08                 2198 	inc	r0
   08EB 36                 2199 	addc	a,@r0
   08EC FE                 2200 	mov	r6,a
   08ED 08                 2201 	inc	r0
   08EE 86 07              2202 	mov	ar7,@r0
   08F0 8D 82              2203 	mov	dpl,r5
   08F2 8E 83              2204 	mov	dph,r6
   08F4 8F F0              2205 	mov	b,r7
   08F6 12s00r00           2206 	lcall	__gptrget
   08F9 FF                 2207 	mov	r7,a
   08FA A8*00              2208 	mov	r0,_bp
   08FC 08                 2209 	inc	r0
   08FD 74 46              2210 	mov	a,#0x46
   08FF 26                 2211 	add	a,@r0
   0900 FC                 2212 	mov	r4,a
   0901 E4                 2213 	clr	a
   0902 08                 2214 	inc	r0
   0903 36                 2215 	addc	a,@r0
   0904 FD                 2216 	mov	r5,a
   0905 08                 2217 	inc	r0
   0906 86 06              2218 	mov	ar6,@r0
   0908 8C 82              2219 	mov	dpl,r4
   090A 8D 83              2220 	mov	dph,r5
   090C 8E F0              2221 	mov	b,r6
   090E 12s00r00           2222 	lcall	__gptrget
   0911 FB                 2223 	mov	r3,a
   0912 C3                 2224 	clr	c
   0913 EF                 2225 	mov	a,r7
   0914 9B                 2226 	subb	a,r3
   0915 40 03              2227 	jc	00168$
   0917 02s0Cr43           2228 	ljmp	00132$
   091A                    2229 00168$:
                           2230 ;	../../core/net/rime/rudolph2.c:317: c->hops_from_base = hdr->hops_from_base + 1;
   091A 0F                 2231 	inc	r7
   091B 8C 82              2232 	mov	dpl,r4
   091D 8D 83              2233 	mov	dph,r5
   091F 8E F0              2234 	mov	b,r6
   0921 EF                 2235 	mov	a,r7
   0922 12s00r00           2236 	lcall	__gptrput
                           2237 ;	../../core/net/rime/rudolph2.c:318: if(LT(c->version, hdr->version)) {
   0925 A8*00              2238 	mov	r0,_bp
   0927 08                 2239 	inc	r0
   0928 E5*00              2240 	mov	a,_bp
   092A 24 07              2241 	add	a,#0x07
   092C F9                 2242 	mov	r1,a
   092D 74 44              2243 	mov	a,#0x44
   092F 26                 2244 	add	a,@r0
   0930 F7                 2245 	mov	@r1,a
   0931 E4                 2246 	clr	a
   0932 08                 2247 	inc	r0
   0933 36                 2248 	addc	a,@r0
   0934 09                 2249 	inc	r1
   0935 F7                 2250 	mov	@r1,a
   0936 08                 2251 	inc	r0
   0937 09                 2252 	inc	r1
   0938 E6                 2253 	mov	a,@r0
   0939 F7                 2254 	mov	@r1,a
   093A E5*00              2255 	mov	a,_bp
   093C 24 07              2256 	add	a,#0x07
   093E F8                 2257 	mov	r0,a
   093F 86 82              2258 	mov	dpl,@r0
   0941 08                 2259 	inc	r0
   0942 86 83              2260 	mov	dph,@r0
   0944 08                 2261 	inc	r0
   0945 86 F0              2262 	mov	b,@r0
   0947 12s00r00           2263 	lcall	__gptrget
   094A FE                 2264 	mov	r6,a
   094B A3                 2265 	inc	dptr
   094C 12s00r00           2266 	lcall	__gptrget
   094F FD                 2267 	mov	r5,a
   0950 E5*00              2268 	mov	a,_bp
   0952 24 04              2269 	add	a,#0x04
   0954 F8                 2270 	mov	r0,a
   0955 74 02              2271 	mov	a,#0x02
   0957 26                 2272 	add	a,@r0
   0958 FA                 2273 	mov	r2,a
   0959 E4                 2274 	clr	a
   095A 08                 2275 	inc	r0
   095B 36                 2276 	addc	a,@r0
   095C FB                 2277 	mov	r3,a
   095D 08                 2278 	inc	r0
   095E 86 04              2279 	mov	ar4,@r0
   0960 8A 82              2280 	mov	dpl,r2
   0962 8B 83              2281 	mov	dph,r3
   0964 8C F0              2282 	mov	b,r4
   0966 12s00r00           2283 	lcall	__gptrget
   0969 FB                 2284 	mov	r3,a
   096A A3                 2285 	inc	dptr
   096B 12s00r00           2286 	lcall	__gptrget
   096E FC                 2287 	mov	r4,a
   096F EE                 2288 	mov	a,r6
   0970 C3                 2289 	clr	c
   0971 9B                 2290 	subb	a,r3
   0972 FA                 2291 	mov	r2,a
   0973 ED                 2292 	mov	a,r5
   0974 9C                 2293 	subb	a,r4
   0975 FF                 2294 	mov	r7,a
   0976 20 E7 03           2295 	jb	acc.7,00169$
   0979 02s0Ar6F           2296 	ljmp	00122$
   097C                    2297 00169$:
                           2298 ;	../../core/net/rime/rudolph2.c:322: c->version = hdr->version;
   097C E5*00              2299 	mov	a,_bp
   097E 24 07              2300 	add	a,#0x07
   0980 F8                 2301 	mov	r0,a
   0981 86 82              2302 	mov	dpl,@r0
   0983 08                 2303 	inc	r0
   0984 86 83              2304 	mov	dph,@r0
   0986 08                 2305 	inc	r0
   0987 86 F0              2306 	mov	b,@r0
   0989 EB                 2307 	mov	a,r3
   098A 12s00r00           2308 	lcall	__gptrput
   098D A3                 2309 	inc	dptr
   098E EC                 2310 	mov	a,r4
   098F 12s00r00           2311 	lcall	__gptrput
                           2312 ;	../../core/net/rime/rudolph2.c:323: c->snd_nxt = c->rcv_nxt = 0;
   0992 A8*00              2313 	mov	r0,_bp
   0994 08                 2314 	inc	r0
   0995 74 40              2315 	mov	a,#0x40
   0997 26                 2316 	add	a,@r0
   0998 FD                 2317 	mov	r5,a
   0999 E4                 2318 	clr	a
   099A 08                 2319 	inc	r0
   099B 36                 2320 	addc	a,@r0
   099C FC                 2321 	mov	r4,a
   099D 08                 2322 	inc	r0
   099E 86 03              2323 	mov	ar3,@r0
   09A0 A8*00              2324 	mov	r0,_bp
   09A2 08                 2325 	inc	r0
   09A3 74 42              2326 	mov	a,#0x42
   09A5 26                 2327 	add	a,@r0
   09A6 FA                 2328 	mov	r2,a
   09A7 E4                 2329 	clr	a
   09A8 08                 2330 	inc	r0
   09A9 36                 2331 	addc	a,@r0
   09AA FE                 2332 	mov	r6,a
   09AB 08                 2333 	inc	r0
   09AC 86 07              2334 	mov	ar7,@r0
   09AE 8A 82              2335 	mov	dpl,r2
   09B0 8E 83              2336 	mov	dph,r6
   09B2 8F F0              2337 	mov	b,r7
   09B4 E4                 2338 	clr	a
   09B5 12s00r00           2339 	lcall	__gptrput
   09B8 A3                 2340 	inc	dptr
   09B9 E4                 2341 	clr	a
   09BA 12s00r00           2342 	lcall	__gptrput
   09BD 8D 82              2343 	mov	dpl,r5
   09BF 8C 83              2344 	mov	dph,r4
   09C1 8B F0              2345 	mov	b,r3
   09C3 E4                 2346 	clr	a
   09C4 12s00r00           2347 	lcall	__gptrput
   09C7 A3                 2348 	inc	dptr
   09C8 E4                 2349 	clr	a
   09C9 12s00r00           2350 	lcall	__gptrput
                           2351 ;	../../core/net/rime/rudolph2.c:324: c->flags &= ~FLAG_LAST_RECEIVED;
   09CC A8*00              2352 	mov	r0,_bp
   09CE 08                 2353 	inc	r0
   09CF 74 48              2354 	mov	a,#0x48
   09D1 26                 2355 	add	a,@r0
   09D2 FD                 2356 	mov	r5,a
   09D3 E4                 2357 	clr	a
   09D4 08                 2358 	inc	r0
   09D5 36                 2359 	addc	a,@r0
   09D6 FE                 2360 	mov	r6,a
   09D7 08                 2361 	inc	r0
   09D8 86 07              2362 	mov	ar7,@r0
   09DA 8D 82              2363 	mov	dpl,r5
   09DC 8E 83              2364 	mov	dph,r6
   09DE 8F F0              2365 	mov	b,r7
   09E0 12s00r00           2366 	lcall	__gptrget
   09E3 FA                 2367 	mov	r2,a
   09E4 53 02 FD           2368 	anl	ar2,#0xFD
   09E7 8D 82              2369 	mov	dpl,r5
   09E9 8E 83              2370 	mov	dph,r6
   09EB 8F F0              2371 	mov	b,r7
   09ED EA                 2372 	mov	a,r2
   09EE 12s00r00           2373 	lcall	__gptrput
                           2374 ;	../../core/net/rime/rudolph2.c:325: c->flags &= ~FLAG_LAST_SENT;
   09F1 53 02 FE           2375 	anl	ar2,#0xFE
   09F4 8D 82              2376 	mov	dpl,r5
   09F6 8E 83              2377 	mov	dph,r6
   09F8 8F F0              2378 	mov	b,r7
   09FA EA                 2379 	mov	a,r2
   09FB 12s00r00           2380 	lcall	__gptrput
                           2381 ;	../../core/net/rime/rudolph2.c:326: if(hdr->chunk != 0) {
   09FE E5*00              2382 	mov	a,_bp
   0A00 24 04              2383 	add	a,#0x04
   0A02 F8                 2384 	mov	r0,a
   0A03 74 04              2385 	mov	a,#0x04
   0A05 26                 2386 	add	a,@r0
   0A06 FD                 2387 	mov	r5,a
   0A07 E4                 2388 	clr	a
   0A08 08                 2389 	inc	r0
   0A09 36                 2390 	addc	a,@r0
   0A0A FE                 2391 	mov	r6,a
   0A0B 08                 2392 	inc	r0
   0A0C 86 07              2393 	mov	ar7,@r0
   0A0E 8D 82              2394 	mov	dpl,r5
   0A10 8E 83              2395 	mov	dph,r6
   0A12 8F F0              2396 	mov	b,r7
   0A14 12s00r00           2397 	lcall	__gptrget
   0A17 FD                 2398 	mov	r5,a
   0A18 A3                 2399 	inc	dptr
   0A19 12s00r00           2400 	lcall	__gptrget
   0A1C FE                 2401 	mov	r6,a
   0A1D 4D                 2402 	orl	a,r5
   0A1E 60 11              2403 	jz	00109$
                           2404 ;	../../core/net/rime/rudolph2.c:327: send_nack(c);
   0A20 A8*00              2405 	mov	r0,_bp
   0A22 08                 2406 	inc	r0
   0A23 86 82              2407 	mov	dpl,@r0
   0A25 08                 2408 	inc	r0
   0A26 86 83              2409 	mov	dph,@r0
   0A28 08                 2410 	inc	r0
   0A29 86 F0              2411 	mov	b,@r0
   0A2B 12s04r42           2412 	lcall	_send_nack
   0A2E 02s0Cr43           2413 	ljmp	00132$
   0A31                    2414 00109$:
                           2415 ;	../../core/net/rime/rudolph2.c:329: packetbuf_hdrreduce(sizeof(struct rudolph2_hdr));
   0A31 90 00 06           2416 	mov	dptr,#0x0006
   0A34 12s00r00           2417 	lcall	_packetbuf_hdrreduce
                           2418 ;	../../core/net/rime/rudolph2.c:330: write_data(c, 0, packetbuf_dataptr(), packetbuf_totlen());
   0A37 12s00r00           2419 	lcall	_packetbuf_totlen
   0A3A AE 82              2420 	mov	r6,dpl
   0A3C AF 83              2421 	mov	r7,dph
   0A3E 8F 04              2422 	mov	ar4,r7
   0A40 C0 06              2423 	push	ar6
   0A42 C0 04              2424 	push	ar4
   0A44 12s00r00           2425 	lcall	_packetbuf_dataptr
   0A47 AA 82              2426 	mov	r2,dpl
   0A49 AD 83              2427 	mov	r5,dph
   0A4B AF F0              2428 	mov	r7,b
   0A4D C0 02              2429 	push	ar2
   0A4F C0 05              2430 	push	ar5
   0A51 C0 07              2431 	push	ar7
   0A53 E4                 2432 	clr	a
   0A54 C0 E0              2433 	push	acc
   0A56 C0 E0              2434 	push	acc
   0A58 A8*00              2435 	mov	r0,_bp
   0A5A 08                 2436 	inc	r0
   0A5B 86 82              2437 	mov	dpl,@r0
   0A5D 08                 2438 	inc	r0
   0A5E 86 83              2439 	mov	dph,@r0
   0A60 08                 2440 	inc	r0
   0A61 86 F0              2441 	mov	b,@r0
   0A63 12s01rDC           2442 	lcall	_write_data
   0A66 E5 81              2443 	mov	a,sp
   0A68 24 F9              2444 	add	a,#0xf9
   0A6A F5 81              2445 	mov	sp,a
   0A6C 02s0Cr43           2446 	ljmp	00132$
   0A6F                    2447 00122$:
                           2448 ;	../../core/net/rime/rudolph2.c:332: } else if(hdr->version == c->version) {
   0A6F EB                 2449 	mov	a,r3
   0A70 B5 06 06           2450 	cjne	a,ar6,00171$
   0A73 EC                 2451 	mov	a,r4
   0A74 B5 05 02           2452 	cjne	a,ar5,00171$
   0A77 80 03              2453 	sjmp	00172$
   0A79                    2454 00171$:
   0A79 02s0Cr43           2455 	ljmp	00132$
   0A7C                    2456 00172$:
                           2457 ;	../../core/net/rime/rudolph2.c:337: if(hdr->chunk == c->rcv_nxt) {
   0A7C E5*00              2458 	mov	a,_bp
   0A7E 24 04              2459 	add	a,#0x04
   0A80 F8                 2460 	mov	r0,a
   0A81 E5*00              2461 	mov	a,_bp
   0A83 24 07              2462 	add	a,#0x07
   0A85 F9                 2463 	mov	r1,a
   0A86 74 04              2464 	mov	a,#0x04
   0A88 26                 2465 	add	a,@r0
   0A89 F7                 2466 	mov	@r1,a
   0A8A E4                 2467 	clr	a
   0A8B 08                 2468 	inc	r0
   0A8C 36                 2469 	addc	a,@r0
   0A8D 09                 2470 	inc	r1
   0A8E F7                 2471 	mov	@r1,a
   0A8F 08                 2472 	inc	r0
   0A90 09                 2473 	inc	r1
   0A91 E6                 2474 	mov	a,@r0
   0A92 F7                 2475 	mov	@r1,a
   0A93 E5*00              2476 	mov	a,_bp
   0A95 24 07              2477 	add	a,#0x07
   0A97 F8                 2478 	mov	r0,a
   0A98 86 82              2479 	mov	dpl,@r0
   0A9A 08                 2480 	inc	r0
   0A9B 86 83              2481 	mov	dph,@r0
   0A9D 08                 2482 	inc	r0
   0A9E 86 F0              2483 	mov	b,@r0
   0AA0 12s00r00           2484 	lcall	__gptrget
   0AA3 FF                 2485 	mov	r7,a
   0AA4 A3                 2486 	inc	dptr
   0AA5 12s00r00           2487 	lcall	__gptrget
   0AA8 FE                 2488 	mov	r6,a
   0AA9 A8*00              2489 	mov	r0,_bp
   0AAB 08                 2490 	inc	r0
   0AAC 74 42              2491 	mov	a,#0x42
   0AAE 26                 2492 	add	a,@r0
   0AAF FA                 2493 	mov	r2,a
   0AB0 E4                 2494 	clr	a
   0AB1 08                 2495 	inc	r0
   0AB2 36                 2496 	addc	a,@r0
   0AB3 FB                 2497 	mov	r3,a
   0AB4 08                 2498 	inc	r0
   0AB5 86 04              2499 	mov	ar4,@r0
   0AB7 8A 82              2500 	mov	dpl,r2
   0AB9 8B 83              2501 	mov	dph,r3
   0ABB 8C F0              2502 	mov	b,r4
   0ABD 12s00r00           2503 	lcall	__gptrget
   0AC0 FB                 2504 	mov	r3,a
   0AC1 A3                 2505 	inc	dptr
   0AC2 12s00r00           2506 	lcall	__gptrget
   0AC5 FC                 2507 	mov	r4,a
   0AC6 EF                 2508 	mov	a,r7
   0AC7 B5 03 06           2509 	cjne	a,ar3,00173$
   0ACA EE                 2510 	mov	a,r6
   0ACB B5 04 02           2511 	cjne	a,ar4,00173$
   0ACE 80 03              2512 	sjmp	00174$
   0AD0                    2513 00173$:
   0AD0 02s0Cr2E           2514 	ljmp	00117$
   0AD3                    2515 00174$:
                           2516 ;	../../core/net/rime/rudolph2.c:339: packetbuf_hdrreduce(sizeof(struct rudolph2_hdr));
   0AD3 90 00 06           2517 	mov	dptr,#0x0006
   0AD6 12s00r00           2518 	lcall	_packetbuf_hdrreduce
                           2519 ;	../../core/net/rime/rudolph2.c:343: len = packetbuf_totlen();
   0AD9 12s00r00           2520 	lcall	_packetbuf_totlen
   0ADC AA 82              2521 	mov	r2,dpl
   0ADE AF 83              2522 	mov	r7,dph
   0AE0 8A 04              2523 	mov	ar4,r2
   0AE2 8F 03              2524 	mov	ar3,r7
                           2525 ;	../../core/net/rime/rudolph2.c:344: write_data(c, hdr->chunk, packetbuf_dataptr(), packetbuf_totlen());
   0AE4 C0 04              2526 	push	ar4
   0AE6 C0 03              2527 	push	ar3
   0AE8 12s00r00           2528 	lcall	_packetbuf_totlen
   0AEB AD 82              2529 	mov	r5,dpl
   0AED AE 83              2530 	mov	r6,dph
   0AEF E5*00              2531 	mov	a,_bp
   0AF1 24 0A              2532 	add	a,#0x0a
   0AF3 F8                 2533 	mov	r0,a
   0AF4 A6 05              2534 	mov	@r0,ar5
   0AF6 08                 2535 	inc	r0
   0AF7 A6 06              2536 	mov	@r0,ar6
   0AF9 12s00r00           2537 	lcall	_packetbuf_dataptr
   0AFC AA 82              2538 	mov	r2,dpl
   0AFE AE 83              2539 	mov	r6,dph
   0B00 AF F0              2540 	mov	r7,b
   0B02 E5*00              2541 	mov	a,_bp
   0B04 24 0C              2542 	add	a,#0x0c
   0B06 F8                 2543 	mov	r0,a
   0B07 A6 02              2544 	mov	@r0,ar2
   0B09 08                 2545 	inc	r0
   0B0A A6 06              2546 	mov	@r0,ar6
   0B0C 08                 2547 	inc	r0
   0B0D A6 07              2548 	mov	@r0,ar7
   0B0F E5*00              2549 	mov	a,_bp
   0B11 24 07              2550 	add	a,#0x07
   0B13 F8                 2551 	mov	r0,a
   0B14 86 82              2552 	mov	dpl,@r0
   0B16 08                 2553 	inc	r0
   0B17 86 83              2554 	mov	dph,@r0
   0B19 08                 2555 	inc	r0
   0B1A 86 F0              2556 	mov	b,@r0
   0B1C 12s00r00           2557 	lcall	__gptrget
   0B1F FD                 2558 	mov	r5,a
   0B20 A3                 2559 	inc	dptr
   0B21 12s00r00           2560 	lcall	__gptrget
   0B24 FF                 2561 	mov	r7,a
   0B25 E5*00              2562 	mov	a,_bp
   0B27 24 0A              2563 	add	a,#0x0a
   0B29 F8                 2564 	mov	r0,a
   0B2A E6                 2565 	mov	a,@r0
   0B2B C0 E0              2566 	push	acc
   0B2D 08                 2567 	inc	r0
   0B2E E6                 2568 	mov	a,@r0
   0B2F C0 E0              2569 	push	acc
   0B31 E5*00              2570 	mov	a,_bp
   0B33 24 0C              2571 	add	a,#0x0c
   0B35 F8                 2572 	mov	r0,a
   0B36 E6                 2573 	mov	a,@r0
   0B37 C0 E0              2574 	push	acc
   0B39 08                 2575 	inc	r0
   0B3A E6                 2576 	mov	a,@r0
   0B3B C0 E0              2577 	push	acc
   0B3D 08                 2578 	inc	r0
   0B3E E6                 2579 	mov	a,@r0
   0B3F C0 E0              2580 	push	acc
   0B41 C0 05              2581 	push	ar5
   0B43 C0 07              2582 	push	ar7
   0B45 A8*00              2583 	mov	r0,_bp
   0B47 08                 2584 	inc	r0
   0B48 86 82              2585 	mov	dpl,@r0
   0B4A 08                 2586 	inc	r0
   0B4B 86 83              2587 	mov	dph,@r0
   0B4D 08                 2588 	inc	r0
   0B4E 86 F0              2589 	mov	b,@r0
   0B50 12s01rDC           2590 	lcall	_write_data
   0B53 E5 81              2591 	mov	a,sp
   0B55 24 F9              2592 	add	a,#0xf9
   0B57 F5 81              2593 	mov	sp,a
   0B59 D0 03              2594 	pop	ar3
   0B5B D0 04              2595 	pop	ar4
                           2596 ;	../../core/net/rime/rudolph2.c:345: c->rcv_nxt++;
   0B5D A8*00              2597 	mov	r0,_bp
   0B5F 08                 2598 	inc	r0
   0B60 E5*00              2599 	mov	a,_bp
   0B62 24 0C              2600 	add	a,#0x0c
   0B64 F9                 2601 	mov	r1,a
   0B65 74 42              2602 	mov	a,#0x42
   0B67 26                 2603 	add	a,@r0
   0B68 F7                 2604 	mov	@r1,a
   0B69 E4                 2605 	clr	a
   0B6A 08                 2606 	inc	r0
   0B6B 36                 2607 	addc	a,@r0
   0B6C 09                 2608 	inc	r1
   0B6D F7                 2609 	mov	@r1,a
   0B6E 08                 2610 	inc	r0
   0B6F 09                 2611 	inc	r1
   0B70 E6                 2612 	mov	a,@r0
   0B71 F7                 2613 	mov	@r1,a
   0B72 E5*00              2614 	mov	a,_bp
   0B74 24 0C              2615 	add	a,#0x0c
   0B76 F8                 2616 	mov	r0,a
   0B77 86 82              2617 	mov	dpl,@r0
   0B79 08                 2618 	inc	r0
   0B7A 86 83              2619 	mov	dph,@r0
   0B7C 08                 2620 	inc	r0
   0B7D 86 F0              2621 	mov	b,@r0
   0B7F 12s00r00           2622 	lcall	__gptrget
   0B82 FA                 2623 	mov	r2,a
   0B83 A3                 2624 	inc	dptr
   0B84 12s00r00           2625 	lcall	__gptrget
   0B87 FF                 2626 	mov	r7,a
   0B88 0A                 2627 	inc	r2
   0B89 BA 00 01           2628 	cjne	r2,#0x00,00175$
   0B8C 0F                 2629 	inc	r7
   0B8D                    2630 00175$:
   0B8D E5*00              2631 	mov	a,_bp
   0B8F 24 0C              2632 	add	a,#0x0c
   0B91 F8                 2633 	mov	r0,a
   0B92 86 82              2634 	mov	dpl,@r0
   0B94 08                 2635 	inc	r0
   0B95 86 83              2636 	mov	dph,@r0
   0B97 08                 2637 	inc	r0
   0B98 86 F0              2638 	mov	b,@r0
   0B9A EA                 2639 	mov	a,r2
   0B9B 12s00r00           2640 	lcall	__gptrput
   0B9E A3                 2641 	inc	dptr
   0B9F EF                 2642 	mov	a,r7
   0BA0 12s00r00           2643 	lcall	__gptrput
                           2644 ;	../../core/net/rime/rudolph2.c:346: if(len < RUDOLPH2_DATASIZE) {
   0BA3 C3                 2645 	clr	c
   0BA4 EC                 2646 	mov	a,r4
   0BA5 94 40              2647 	subb	a,#0x40
   0BA7 EB                 2648 	mov	a,r3
   0BA8 64 80              2649 	xrl	a,#0x80
   0BAA 94 80              2650 	subb	a,#0x80
   0BAC 40 03              2651 	jc	00176$
   0BAE 02s0Cr43           2652 	ljmp	00132$
   0BB1                    2653 00176$:
                           2654 ;	../../core/net/rime/rudolph2.c:347: c->flags |= FLAG_LAST_RECEIVED;
   0BB1 A8*00              2655 	mov	r0,_bp
   0BB3 08                 2656 	inc	r0
   0BB4 74 48              2657 	mov	a,#0x48
   0BB6 26                 2658 	add	a,@r0
   0BB7 FD                 2659 	mov	r5,a
   0BB8 E4                 2660 	clr	a
   0BB9 08                 2661 	inc	r0
   0BBA 36                 2662 	addc	a,@r0
   0BBB FE                 2663 	mov	r6,a
   0BBC 08                 2664 	inc	r0
   0BBD 86 07              2665 	mov	ar7,@r0
   0BBF 8D 82              2666 	mov	dpl,r5
   0BC1 8E 83              2667 	mov	dph,r6
   0BC3 8F F0              2668 	mov	b,r7
   0BC5 12s00r00           2669 	lcall	__gptrget
   0BC8 FA                 2670 	mov	r2,a
   0BC9 43 02 02           2671 	orl	ar2,#0x02
   0BCC 8D 82              2672 	mov	dpl,r5
   0BCE 8E 83              2673 	mov	dph,r6
   0BD0 8F F0              2674 	mov	b,r7
   0BD2 EA                 2675 	mov	a,r2
   0BD3 12s00r00           2676 	lcall	__gptrput
                           2677 ;	../../core/net/rime/rudolph2.c:348: send_data(c, RESEND_INTERVAL);
   0BD6 E4                 2678 	clr	a
   0BD7 C0 E0              2679 	push	acc
   0BD9 74 01              2680 	mov	a,#0x01
   0BDB C0 E0              2681 	push	acc
   0BDD A8*00              2682 	mov	r0,_bp
   0BDF 08                 2683 	inc	r0
   0BE0 86 82              2684 	mov	dpl,@r0
   0BE2 08                 2685 	inc	r0
   0BE3 86 83              2686 	mov	dph,@r0
   0BE5 08                 2687 	inc	r0
   0BE6 86 F0              2688 	mov	b,@r0
   0BE8 12s03rD0           2689 	lcall	_send_data
   0BEB 15 81              2690 	dec	sp
   0BED 15 81              2691 	dec	sp
                           2692 ;	../../core/net/rime/rudolph2.c:349: ctimer_set(&c->t, RESEND_INTERVAL, timed_send, c);
   0BEF A8*00              2693 	mov	r0,_bp
   0BF1 08                 2694 	inc	r0
   0BF2 86 05              2695 	mov	ar5,@r0
   0BF4 08                 2696 	inc	r0
   0BF5 86 04              2697 	mov	ar4,@r0
   0BF7 08                 2698 	inc	r0
   0BF8 86 03              2699 	mov	ar3,@r0
   0BFA A8*00              2700 	mov	r0,_bp
   0BFC 08                 2701 	inc	r0
   0BFD 74 2B              2702 	mov	a,#0x2B
   0BFF 26                 2703 	add	a,@r0
   0C00 FA                 2704 	mov	r2,a
   0C01 E4                 2705 	clr	a
   0C02 08                 2706 	inc	r0
   0C03 36                 2707 	addc	a,@r0
   0C04 FE                 2708 	mov	r6,a
   0C05 08                 2709 	inc	r0
   0C06 86 07              2710 	mov	ar7,@r0
   0C08 C0 05              2711 	push	ar5
   0C0A C0 04              2712 	push	ar4
   0C0C C0 03              2713 	push	ar3
   0C0E 74r53              2714 	mov	a,#_timed_send
   0C10 C0 E0              2715 	push	acc
   0C12 74s05              2716 	mov	a,#(_timed_send >> 8)
   0C14 C0 E0              2717 	push	acc
   0C16 E4                 2718 	clr	a
   0C17 C0 E0              2719 	push	acc
   0C19 74 01              2720 	mov	a,#0x01
   0C1B C0 E0              2721 	push	acc
   0C1D 8A 82              2722 	mov	dpl,r2
   0C1F 8E 83              2723 	mov	dph,r6
   0C21 8F F0              2724 	mov	b,r7
   0C23 12s00r00           2725 	lcall	_ctimer_set
   0C26 E5 81              2726 	mov	a,sp
   0C28 24 F9              2727 	add	a,#0xf9
   0C2A F5 81              2728 	mov	sp,a
   0C2C 80 15              2729 	sjmp	00132$
   0C2E                    2730 00117$:
                           2731 ;	../../core/net/rime/rudolph2.c:351: } else if(hdr->chunk > c->rcv_nxt) {
   0C2E C3                 2732 	clr	c
   0C2F EB                 2733 	mov	a,r3
   0C30 9F                 2734 	subb	a,r7
   0C31 EC                 2735 	mov	a,r4
   0C32 9E                 2736 	subb	a,r6
   0C33 50 0E              2737 	jnc	00132$
                           2738 ;	../../core/net/rime/rudolph2.c:355: send_nack(c);
   0C35 A8*00              2739 	mov	r0,_bp
   0C37 08                 2740 	inc	r0
   0C38 86 82              2741 	mov	dpl,@r0
   0C3A 08                 2742 	inc	r0
   0C3B 86 83              2743 	mov	dph,@r0
   0C3D 08                 2744 	inc	r0
   0C3E 86 F0              2745 	mov	b,@r0
   0C40 12s04r42           2746 	lcall	_send_nack
                           2747 ;	../../core/net/rime/rudolph2.c:356: } else if(hdr->chunk < c->rcv_nxt) {
   0C43                    2748 00132$:
   0C43 85*00 81           2749 	mov	sp,_bp
   0C46 D0*00              2750 	pop	_bp
   0C48 22                 2751 	ret
                           2752 ;------------------------------------------------------------
                           2753 ;Allocation info for local variables in function 'rudolph2_open'
                           2754 ;------------------------------------------------------------
                           2755 ;channel                   Allocated to stack - _bp -4
                           2756 ;cb                        Allocated to stack - _bp -7
                           2757 ;c                         Allocated to registers r5 r6 r7 
                           2758 ;------------------------------------------------------------
                           2759 ;	../../core/net/rime/rudolph2.c:367: rudolph2_open(struct rudolph2_conn *c, uint16_t channel,
                           2760 ;	-----------------------------------------
                           2761 ;	 function rudolph2_open
                           2762 ;	-----------------------------------------
   0C49                    2763 _rudolph2_open:
   0C49 C0*00              2764 	push	_bp
   0C4B 85 81*00           2765 	mov	_bp,sp
   0C4E AD 82              2766 	mov	r5,dpl
   0C50 AE 83              2767 	mov	r6,dph
   0C52 AF F0              2768 	mov	r7,b
                           2769 ;	../../core/net/rime/rudolph2.c:370: polite_open(&c->c, channel, &polite);
   0C54 C0 07              2770 	push	ar7
   0C56 C0 06              2771 	push	ar6
   0C58 C0 05              2772 	push	ar5
   0C5A 74r00              2773 	mov	a,#_polite
   0C5C C0 E0              2774 	push	acc
   0C5E 74s00              2775 	mov	a,#(_polite >> 8)
   0C60 C0 E0              2776 	push	acc
   0C62 74 80              2777 	mov	a,#0x80
   0C64 C0 E0              2778 	push	acc
   0C66 E5*00              2779 	mov	a,_bp
   0C68 24 FC              2780 	add	a,#0xfc
   0C6A F8                 2781 	mov	r0,a
   0C6B E6                 2782 	mov	a,@r0
   0C6C C0 E0              2783 	push	acc
   0C6E 08                 2784 	inc	r0
   0C6F E6                 2785 	mov	a,@r0
   0C70 C0 E0              2786 	push	acc
   0C72 8D 82              2787 	mov	dpl,r5
   0C74 8E 83              2788 	mov	dph,r6
   0C76 8F F0              2789 	mov	b,r7
   0C78 12s00r00           2790 	lcall	_polite_open
   0C7B E5 81              2791 	mov	a,sp
   0C7D 24 FB              2792 	add	a,#0xfb
   0C7F F5 81              2793 	mov	sp,a
   0C81 D0 05              2794 	pop	ar5
   0C83 D0 06              2795 	pop	ar6
   0C85 D0 07              2796 	pop	ar7
                           2797 ;	../../core/net/rime/rudolph2.c:371: c->cb = cb;
   0C87 74 28              2798 	mov	a,#0x28
   0C89 2D                 2799 	add	a,r5
   0C8A FA                 2800 	mov	r2,a
   0C8B E4                 2801 	clr	a
   0C8C 3E                 2802 	addc	a,r6
   0C8D FB                 2803 	mov	r3,a
   0C8E 8F 04              2804 	mov	ar4,r7
   0C90 8A 82              2805 	mov	dpl,r2
   0C92 8B 83              2806 	mov	dph,r3
   0C94 8C F0              2807 	mov	b,r4
   0C96 E5*00              2808 	mov	a,_bp
   0C98 24 F9              2809 	add	a,#0xf9
   0C9A F8                 2810 	mov	r0,a
   0C9B E6                 2811 	mov	a,@r0
   0C9C 12s00r00           2812 	lcall	__gptrput
   0C9F A3                 2813 	inc	dptr
   0CA0 08                 2814 	inc	r0
   0CA1 E6                 2815 	mov	a,@r0
   0CA2 12s00r00           2816 	lcall	__gptrput
   0CA5 A3                 2817 	inc	dptr
   0CA6 08                 2818 	inc	r0
   0CA7 E6                 2819 	mov	a,@r0
   0CA8 12s00r00           2820 	lcall	__gptrput
                           2821 ;	../../core/net/rime/rudolph2.c:372: c->version = 0;
   0CAB 74 44              2822 	mov	a,#0x44
   0CAD 2D                 2823 	add	a,r5
   0CAE FA                 2824 	mov	r2,a
   0CAF E4                 2825 	clr	a
   0CB0 3E                 2826 	addc	a,r6
   0CB1 FB                 2827 	mov	r3,a
   0CB2 8F 04              2828 	mov	ar4,r7
   0CB4 8A 82              2829 	mov	dpl,r2
   0CB6 8B 83              2830 	mov	dph,r3
   0CB8 8C F0              2831 	mov	b,r4
   0CBA E4                 2832 	clr	a
   0CBB 12s00r00           2833 	lcall	__gptrput
   0CBE A3                 2834 	inc	dptr
   0CBF E4                 2835 	clr	a
   0CC0 12s00r00           2836 	lcall	__gptrput
                           2837 ;	../../core/net/rime/rudolph2.c:373: c->hops_from_base = HOPS_MAX;
   0CC3 74 46              2838 	mov	a,#0x46
   0CC5 2D                 2839 	add	a,r5
   0CC6 FD                 2840 	mov	r5,a
   0CC7 E4                 2841 	clr	a
   0CC8 3E                 2842 	addc	a,r6
   0CC9 FE                 2843 	mov	r6,a
   0CCA 8D 82              2844 	mov	dpl,r5
   0CCC 8E 83              2845 	mov	dph,r6
   0CCE 8F F0              2846 	mov	b,r7
   0CD0 74 40              2847 	mov	a,#0x40
   0CD2 12s00r00           2848 	lcall	__gptrput
   0CD5 D0*00              2849 	pop	_bp
   0CD7 22                 2850 	ret
                           2851 ;------------------------------------------------------------
                           2852 ;Allocation info for local variables in function 'rudolph2_close'
                           2853 ;------------------------------------------------------------
                           2854 ;c                         Allocated to registers r5 r6 r7 
                           2855 ;------------------------------------------------------------
                           2856 ;	../../core/net/rime/rudolph2.c:377: rudolph2_close(struct rudolph2_conn *c)
                           2857 ;	-----------------------------------------
                           2858 ;	 function rudolph2_close
                           2859 ;	-----------------------------------------
   0CD8                    2860 _rudolph2_close:
                           2861 ;	../../core/net/rime/rudolph2.c:379: polite_close(&c->c);
   0CD8 02s00r00           2862 	ljmp	_polite_close
                           2863 ;------------------------------------------------------------
                           2864 ;Allocation info for local variables in function 'rudolph2_send'
                           2865 ;------------------------------------------------------------
                           2866 ;send_interval             Allocated to stack - _bp -4
                           2867 ;c                         Allocated to stack - _bp +1
                           2868 ;len                       Allocated to stack - _bp +7
                           2869 ;sloc0                     Allocated to stack - _bp +4
                           2870 ;sloc1                     Allocated to stack - _bp +7
                           2871 ;------------------------------------------------------------
                           2872 ;	../../core/net/rime/rudolph2.c:383: rudolph2_send(struct rudolph2_conn *c, clock_time_t send_interval)
                           2873 ;	-----------------------------------------
                           2874 ;	 function rudolph2_send
                           2875 ;	-----------------------------------------
   0CDB                    2876 _rudolph2_send:
   0CDB C0*00              2877 	push	_bp
   0CDD 85 81*00           2878 	mov	_bp,sp
   0CE0 C0 82              2879 	push	dpl
   0CE2 C0 83              2880 	push	dph
   0CE4 C0 F0              2881 	push	b
   0CE6 E5 81              2882 	mov	a,sp
   0CE8 24 05              2883 	add	a,#0x05
   0CEA F5 81              2884 	mov	sp,a
                           2885 ;	../../core/net/rime/rudolph2.c:387: c->hops_from_base = 0;
   0CEC A8*00              2886 	mov	r0,_bp
   0CEE 08                 2887 	inc	r0
   0CEF 74 46              2888 	mov	a,#0x46
   0CF1 26                 2889 	add	a,@r0
   0CF2 FA                 2890 	mov	r2,a
   0CF3 E4                 2891 	clr	a
   0CF4 08                 2892 	inc	r0
   0CF5 36                 2893 	addc	a,@r0
   0CF6 FB                 2894 	mov	r3,a
   0CF7 08                 2895 	inc	r0
   0CF8 86 04              2896 	mov	ar4,@r0
   0CFA 8A 82              2897 	mov	dpl,r2
   0CFC 8B 83              2898 	mov	dph,r3
   0CFE 8C F0              2899 	mov	b,r4
   0D00 E4                 2900 	clr	a
   0D01 12s00r00           2901 	lcall	__gptrput
                           2902 ;	../../core/net/rime/rudolph2.c:388: c->version++;
   0D04 A8*00              2903 	mov	r0,_bp
   0D06 08                 2904 	inc	r0
   0D07 74 44              2905 	mov	a,#0x44
   0D09 26                 2906 	add	a,@r0
   0D0A FA                 2907 	mov	r2,a
   0D0B E4                 2908 	clr	a
   0D0C 08                 2909 	inc	r0
   0D0D 36                 2910 	addc	a,@r0
   0D0E FB                 2911 	mov	r3,a
   0D0F 08                 2912 	inc	r0
   0D10 86 04              2913 	mov	ar4,@r0
   0D12 8A 82              2914 	mov	dpl,r2
   0D14 8B 83              2915 	mov	dph,r3
   0D16 8C F0              2916 	mov	b,r4
   0D18 12s00r00           2917 	lcall	__gptrget
   0D1B FE                 2918 	mov	r6,a
   0D1C A3                 2919 	inc	dptr
   0D1D 12s00r00           2920 	lcall	__gptrget
   0D20 FF                 2921 	mov	r7,a
   0D21 0E                 2922 	inc	r6
   0D22 BE 00 01           2923 	cjne	r6,#0x00,00111$
   0D25 0F                 2924 	inc	r7
   0D26                    2925 00111$:
   0D26 8A 82              2926 	mov	dpl,r2
   0D28 8B 83              2927 	mov	dph,r3
   0D2A 8C F0              2928 	mov	b,r4
   0D2C EE                 2929 	mov	a,r6
   0D2D 12s00r00           2930 	lcall	__gptrput
   0D30 A3                 2931 	inc	dptr
   0D31 EF                 2932 	mov	a,r7
   0D32 12s00r00           2933 	lcall	__gptrput
                           2934 ;	../../core/net/rime/rudolph2.c:389: c->snd_nxt = 0;
   0D35 A8*00              2935 	mov	r0,_bp
   0D37 08                 2936 	inc	r0
   0D38 74 40              2937 	mov	a,#0x40
   0D3A 26                 2938 	add	a,@r0
   0D3B FD                 2939 	mov	r5,a
   0D3C E4                 2940 	clr	a
   0D3D 08                 2941 	inc	r0
   0D3E 36                 2942 	addc	a,@r0
   0D3F FE                 2943 	mov	r6,a
   0D40 08                 2944 	inc	r0
   0D41 86 07              2945 	mov	ar7,@r0
   0D43 8D 82              2946 	mov	dpl,r5
   0D45 8E 83              2947 	mov	dph,r6
   0D47 8F F0              2948 	mov	b,r7
   0D49 E4                 2949 	clr	a
   0D4A 12s00r00           2950 	lcall	__gptrput
   0D4D A3                 2951 	inc	dptr
   0D4E E4                 2952 	clr	a
   0D4F 12s00r00           2953 	lcall	__gptrput
                           2954 ;	../../core/net/rime/rudolph2.c:390: len = RUDOLPH2_DATASIZE;
   0D52 E5*00              2955 	mov	a,_bp
   0D54 24 07              2956 	add	a,#0x07
   0D56 F8                 2957 	mov	r0,a
   0D57 76 40              2958 	mov	@r0,#0x40
   0D59 08                 2959 	inc	r0
   0D5A 76 00              2960 	mov	@r0,#0x00
                           2961 ;	../../core/net/rime/rudolph2.c:391: packetbuf_clear();
   0D5C 12s00r00           2962 	lcall	_packetbuf_clear
                           2963 ;	../../core/net/rime/rudolph2.c:392: for(c->rcv_nxt = 0; len == RUDOLPH2_DATASIZE; c->rcv_nxt++) {
   0D5F A8*00              2964 	mov	r0,_bp
   0D61 08                 2965 	inc	r0
   0D62 E5*00              2966 	mov	a,_bp
   0D64 24 04              2967 	add	a,#0x04
   0D66 F9                 2968 	mov	r1,a
   0D67 74 42              2969 	mov	a,#0x42
   0D69 26                 2970 	add	a,@r0
   0D6A F7                 2971 	mov	@r1,a
   0D6B E4                 2972 	clr	a
   0D6C 08                 2973 	inc	r0
   0D6D 36                 2974 	addc	a,@r0
   0D6E 09                 2975 	inc	r1
   0D6F F7                 2976 	mov	@r1,a
   0D70 08                 2977 	inc	r0
   0D71 09                 2978 	inc	r1
   0D72 E6                 2979 	mov	a,@r0
   0D73 F7                 2980 	mov	@r1,a
   0D74 E5*00              2981 	mov	a,_bp
   0D76 24 04              2982 	add	a,#0x04
   0D78 F8                 2983 	mov	r0,a
   0D79 86 82              2984 	mov	dpl,@r0
   0D7B 08                 2985 	inc	r0
   0D7C 86 83              2986 	mov	dph,@r0
   0D7E 08                 2987 	inc	r0
   0D7F 86 F0              2988 	mov	b,@r0
   0D81 E4                 2989 	clr	a
   0D82 12s00r00           2990 	lcall	__gptrput
   0D85 A3                 2991 	inc	dptr
   0D86 E4                 2992 	clr	a
   0D87 12s00r00           2993 	lcall	__gptrput
   0D8A                    2994 00101$:
   0D8A E5*00              2995 	mov	a,_bp
   0D8C 24 07              2996 	add	a,#0x07
   0D8E F8                 2997 	mov	r0,a
   0D8F B6 40 06           2998 	cjne	@r0,#0x40,00112$
   0D92 08                 2999 	inc	r0
   0D93 B6 00 02           3000 	cjne	@r0,#0x00,00112$
   0D96 80 03              3001 	sjmp	00113$
   0D98                    3002 00112$:
   0D98 02s0Er22           3003 	ljmp	00104$
   0D9B                    3004 00113$:
                           3005 ;	../../core/net/rime/rudolph2.c:393: len = read_data(c, packetbuf_dataptr(), c->rcv_nxt);
   0D9B E5*00              3006 	mov	a,_bp
   0D9D 24 04              3007 	add	a,#0x04
   0D9F F8                 3008 	mov	r0,a
   0DA0 86 82              3009 	mov	dpl,@r0
   0DA2 08                 3010 	inc	r0
   0DA3 86 83              3011 	mov	dph,@r0
   0DA5 08                 3012 	inc	r0
   0DA6 86 F0              3013 	mov	b,@r0
   0DA8 12s00r00           3014 	lcall	__gptrget
   0DAB FA                 3015 	mov	r2,a
   0DAC A3                 3016 	inc	dptr
   0DAD 12s00r00           3017 	lcall	__gptrget
   0DB0 FF                 3018 	mov	r7,a
   0DB1 C0 07              3019 	push	ar7
   0DB3 C0 02              3020 	push	ar2
   0DB5 12s00r00           3021 	lcall	_packetbuf_dataptr
   0DB8 AB 82              3022 	mov	r3,dpl
   0DBA AC 83              3023 	mov	r4,dph
   0DBC AD F0              3024 	mov	r5,b
   0DBE D0 02              3025 	pop	ar2
   0DC0 D0 07              3026 	pop	ar7
   0DC2 C0 02              3027 	push	ar2
   0DC4 C0 07              3028 	push	ar7
   0DC6 C0 03              3029 	push	ar3
   0DC8 C0 04              3030 	push	ar4
   0DCA C0 05              3031 	push	ar5
   0DCC A8*00              3032 	mov	r0,_bp
   0DCE 08                 3033 	inc	r0
   0DCF 86 82              3034 	mov	dpl,@r0
   0DD1 08                 3035 	inc	r0
   0DD2 86 83              3036 	mov	dph,@r0
   0DD4 08                 3037 	inc	r0
   0DD5 86 F0              3038 	mov	b,@r0
   0DD7 12s00r00           3039 	lcall	_read_data
   0DDA AC 82              3040 	mov	r4,dpl
   0DDC AD 83              3041 	mov	r5,dph
   0DDE E5 81              3042 	mov	a,sp
   0DE0 24 FB              3043 	add	a,#0xfb
   0DE2 F5 81              3044 	mov	sp,a
   0DE4 E5*00              3045 	mov	a,_bp
   0DE6 24 07              3046 	add	a,#0x07
   0DE8 F8                 3047 	mov	r0,a
   0DE9 A6 04              3048 	mov	@r0,ar4
   0DEB 08                 3049 	inc	r0
   0DEC A6 05              3050 	mov	@r0,ar5
                           3051 ;	../../core/net/rime/rudolph2.c:392: for(c->rcv_nxt = 0; len == RUDOLPH2_DATASIZE; c->rcv_nxt++) {
   0DEE A8*00              3052 	mov	r0,_bp
   0DF0 08                 3053 	inc	r0
   0DF1 74 42              3054 	mov	a,#0x42
   0DF3 26                 3055 	add	a,@r0
   0DF4 FB                 3056 	mov	r3,a
   0DF5 E4                 3057 	clr	a
   0DF6 08                 3058 	inc	r0
   0DF7 36                 3059 	addc	a,@r0
   0DF8 FC                 3060 	mov	r4,a
   0DF9 08                 3061 	inc	r0
   0DFA 86 05              3062 	mov	ar5,@r0
   0DFC 8B 82              3063 	mov	dpl,r3
   0DFE 8C 83              3064 	mov	dph,r4
   0E00 8D F0              3065 	mov	b,r5
   0E02 12s00r00           3066 	lcall	__gptrget
   0E05 FA                 3067 	mov	r2,a
   0E06 A3                 3068 	inc	dptr
   0E07 12s00r00           3069 	lcall	__gptrget
   0E0A FF                 3070 	mov	r7,a
   0E0B 0A                 3071 	inc	r2
   0E0C BA 00 01           3072 	cjne	r2,#0x00,00114$
   0E0F 0F                 3073 	inc	r7
   0E10                    3074 00114$:
   0E10 8B 82              3075 	mov	dpl,r3
   0E12 8C 83              3076 	mov	dph,r4
   0E14 8D F0              3077 	mov	b,r5
   0E16 EA                 3078 	mov	a,r2
   0E17 12s00r00           3079 	lcall	__gptrput
   0E1A A3                 3080 	inc	dptr
   0E1B EF                 3081 	mov	a,r7
   0E1C 12s00r00           3082 	lcall	__gptrput
   0E1F 02s0Dr8A           3083 	ljmp	00101$
   0E22                    3084 00104$:
                           3085 ;	../../core/net/rime/rudolph2.c:395: c->flags = FLAG_LAST_RECEIVED;
   0E22 A8*00              3086 	mov	r0,_bp
   0E24 08                 3087 	inc	r0
   0E25 74 48              3088 	mov	a,#0x48
   0E27 26                 3089 	add	a,@r0
   0E28 FD                 3090 	mov	r5,a
   0E29 E4                 3091 	clr	a
   0E2A 08                 3092 	inc	r0
   0E2B 36                 3093 	addc	a,@r0
   0E2C FE                 3094 	mov	r6,a
   0E2D 08                 3095 	inc	r0
   0E2E 86 07              3096 	mov	ar7,@r0
   0E30 8D 82              3097 	mov	dpl,r5
   0E32 8E 83              3098 	mov	dph,r6
   0E34 8F F0              3099 	mov	b,r7
   0E36 74 02              3100 	mov	a,#0x02
   0E38 12s00r00           3101 	lcall	__gptrput
                           3102 ;	../../core/net/rime/rudolph2.c:397: send_data(c, SEND_INTERVAL);
   0E3B 74 40              3103 	mov	a,#0x40
   0E3D C0 E0              3104 	push	acc
   0E3F E4                 3105 	clr	a
   0E40 C0 E0              3106 	push	acc
   0E42 A8*00              3107 	mov	r0,_bp
   0E44 08                 3108 	inc	r0
   0E45 86 82              3109 	mov	dpl,@r0
   0E47 08                 3110 	inc	r0
   0E48 86 83              3111 	mov	dph,@r0
   0E4A 08                 3112 	inc	r0
   0E4B 86 F0              3113 	mov	b,@r0
   0E4D 12s03rD0           3114 	lcall	_send_data
   0E50 15 81              3115 	dec	sp
   0E52 15 81              3116 	dec	sp
                           3117 ;	../../core/net/rime/rudolph2.c:398: ctimer_set(&c->t, SEND_INTERVAL, timed_send, c);
   0E54 A8*00              3118 	mov	r0,_bp
   0E56 08                 3119 	inc	r0
   0E57 86 05              3120 	mov	ar5,@r0
   0E59 08                 3121 	inc	r0
   0E5A 86 06              3122 	mov	ar6,@r0
   0E5C 08                 3123 	inc	r0
   0E5D 86 07              3124 	mov	ar7,@r0
   0E5F A8*00              3125 	mov	r0,_bp
   0E61 08                 3126 	inc	r0
   0E62 74 2B              3127 	mov	a,#0x2B
   0E64 26                 3128 	add	a,@r0
   0E65 FA                 3129 	mov	r2,a
   0E66 E4                 3130 	clr	a
   0E67 08                 3131 	inc	r0
   0E68 36                 3132 	addc	a,@r0
   0E69 FB                 3133 	mov	r3,a
   0E6A 08                 3134 	inc	r0
   0E6B 86 04              3135 	mov	ar4,@r0
   0E6D C0 05              3136 	push	ar5
   0E6F C0 06              3137 	push	ar6
   0E71 C0 07              3138 	push	ar7
   0E73 74r53              3139 	mov	a,#_timed_send
   0E75 C0 E0              3140 	push	acc
   0E77 74s05              3141 	mov	a,#(_timed_send >> 8)
   0E79 C0 E0              3142 	push	acc
   0E7B 74 40              3143 	mov	a,#0x40
   0E7D C0 E0              3144 	push	acc
   0E7F E4                 3145 	clr	a
   0E80 C0 E0              3146 	push	acc
   0E82 8A 82              3147 	mov	dpl,r2
   0E84 8B 83              3148 	mov	dph,r3
   0E86 8C F0              3149 	mov	b,r4
   0E88 12s00r00           3150 	lcall	_ctimer_set
   0E8B E5 81              3151 	mov	a,sp
   0E8D 24 F9              3152 	add	a,#0xf9
   0E8F F5 81              3153 	mov	sp,a
   0E91 85*00 81           3154 	mov	sp,_bp
   0E94 D0*00              3155 	pop	_bp
   0E96 22                 3156 	ret
                           3157 ;------------------------------------------------------------
                           3158 ;Allocation info for local variables in function 'rudolph2_stop'
                           3159 ;------------------------------------------------------------
                           3160 ;c                         Allocated to registers r5 r6 r7 
                           3161 ;------------------------------------------------------------
                           3162 ;	../../core/net/rime/rudolph2.c:402: rudolph2_stop(struct rudolph2_conn *c)
                           3163 ;	-----------------------------------------
                           3164 ;	 function rudolph2_stop
                           3165 ;	-----------------------------------------
   0E97                    3166 _rudolph2_stop:
                           3167 ;	../../core/net/rime/rudolph2.c:404: polite_cancel(&c->c);
   0E97 AD 82              3168 	mov	r5,dpl
   0E99 AE 83              3169 	mov	r6,dph
   0E9B AF F0              3170 	mov	r7,b
   0E9D C0 07              3171 	push	ar7
   0E9F C0 06              3172 	push	ar6
   0EA1 C0 05              3173 	push	ar5
   0EA3 12s00r00           3174 	lcall	_polite_cancel
   0EA6 D0 05              3175 	pop	ar5
   0EA8 D0 06              3176 	pop	ar6
   0EAA D0 07              3177 	pop	ar7
                           3178 ;	../../core/net/rime/rudolph2.c:405: c->flags |= FLAG_IS_STOPPED;
   0EAC 74 48              3179 	mov	a,#0x48
   0EAE 2D                 3180 	add	a,r5
   0EAF FD                 3181 	mov	r5,a
   0EB0 E4                 3182 	clr	a
   0EB1 3E                 3183 	addc	a,r6
   0EB2 FE                 3184 	mov	r6,a
   0EB3 8D 82              3185 	mov	dpl,r5
   0EB5 8E 83              3186 	mov	dph,r6
   0EB7 8F F0              3187 	mov	b,r7
   0EB9 12s00r00           3188 	lcall	__gptrget
   0EBC FC                 3189 	mov	r4,a
   0EBD 43 04 04           3190 	orl	ar4,#0x04
   0EC0 8D 82              3191 	mov	dpl,r5
   0EC2 8E 83              3192 	mov	dph,r6
   0EC4 8F F0              3193 	mov	b,r7
   0EC6 EC                 3194 	mov	a,r4
   0EC7 02s00r00           3195 	ljmp	__gptrput
                           3196 	.area CSEG    (CODE)
                           3197 	.area CONST   (CODE)
   0000                    3198 _polite:
   0000r22s07              3199 	.byte _recv,(_recv >> 8)
   0002r51s05              3200 	.byte _sent,(_sent >> 8)
   0004r52s05              3201 	.byte _dropped,(_dropped >> 8)
                           3202 	.area XINIT   (CODE)
                           3203 	.area CABS    (ABS,CODE)
