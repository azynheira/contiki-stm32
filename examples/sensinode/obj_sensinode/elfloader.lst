                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.1 #7100 (Apr  1 2013) (Linux)
                              4 ; This file was generated Tue Apr 23 09:41:23 2013
                              5 ;--------------------------------------------------------
                              6 	.module elfloader
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _symtab_lookup
                             13 	.globl _elfloader_arch_write_rom
                             14 	.globl _elfloader_arch_relocate
                             15 	.globl _elfloader_arch_allocate_rom
                             16 	.globl _elfloader_arch_allocate_ram
                             17 	.globl _cfs_seek
                             18 	.globl _cfs_read
                             19 	.globl _memset
                             20 	.globl _strncmp
                             21 	.globl _strcmp
                             22 	.globl _memcmp
                             23 	.globl _memcpy
                             24 	.globl _IRCON2_P2IF
                             25 	.globl _IRCON2_UTX0IF
                             26 	.globl _IRCON2_UTX1IF
                             27 	.globl _IRCON2_P1IF
                             28 	.globl _IRCON2_WDTIF
                             29 	.globl _CY
                             30 	.globl _AC
                             31 	.globl _F0
                             32 	.globl _RS1
                             33 	.globl _RS0
                             34 	.globl _OV
                             35 	.globl _F1
                             36 	.globl _P
                             37 	.globl _IRCON_DMAIF
                             38 	.globl _IRCON_T1IF
                             39 	.globl _IRCON_T2IF
                             40 	.globl _IRCON_T3IF
                             41 	.globl _IRCON_T4IF
                             42 	.globl _IRCON_P0IF
                             43 	.globl _IRCON_STIF
                             44 	.globl _IEN1_DMAIE
                             45 	.globl _IEN1_T1IE
                             46 	.globl _IEN1_T2IE
                             47 	.globl _IEN1_T3IE
                             48 	.globl _IEN1_T4IE
                             49 	.globl _IEN1_P0IE
                             50 	.globl _IEN0_RFERRIE
                             51 	.globl _IEN0_ADCIE
                             52 	.globl _IEN0_URX0IE
                             53 	.globl _IEN0_URX1IE
                             54 	.globl _IEN0_ENCIE
                             55 	.globl _IEN0_STIE
                             56 	.globl _IEN0_EA
                             57 	.globl _EA
                             58 	.globl _P2_4
                             59 	.globl _P2_3
                             60 	.globl _P2_2
                             61 	.globl _P2_1
                             62 	.globl _P2_0
                             63 	.globl _S0CON_ENCIF_0
                             64 	.globl _S0CON_ENCIF_1
                             65 	.globl _P1_7
                             66 	.globl _P1_6
                             67 	.globl _P1_5
                             68 	.globl _P1_4
                             69 	.globl _P1_3
                             70 	.globl _P1_2
                             71 	.globl _P1_1
                             72 	.globl _P1_0
                             73 	.globl _TCON_IT0
                             74 	.globl _TCON_RFERRIF
                             75 	.globl _TCON_IT1
                             76 	.globl _TCON_URX0IF
                             77 	.globl _TCON_ADCIF
                             78 	.globl _TCON_URX1IF
                             79 	.globl _P0_0
                             80 	.globl _P0_1
                             81 	.globl _P0_2
                             82 	.globl _P0_3
                             83 	.globl _P0_4
                             84 	.globl _P0_5
                             85 	.globl _P0_6
                             86 	.globl _P0_7
                             87 	.globl _P2DIR
                             88 	.globl _P1DIR
                             89 	.globl _P0DIR
                             90 	.globl _U1GCR
                             91 	.globl _U1UCR
                             92 	.globl _U1BAUD
                             93 	.globl _U1BUF
                             94 	.globl _U1CSR
                             95 	.globl _P2INP
                             96 	.globl _P1INP
                             97 	.globl _P2SEL
                             98 	.globl _P1SEL
                             99 	.globl _P0SEL
                            100 	.globl _ADCCFG
                            101 	.globl _PERCFG
                            102 	.globl _B
                            103 	.globl _T4CC1
                            104 	.globl _T4CCTL1
                            105 	.globl _T4CC0
                            106 	.globl _T4CCTL0
                            107 	.globl _T4CTL
                            108 	.globl _T4CNT
                            109 	.globl _RFIF
                            110 	.globl _IRCON2
                            111 	.globl _T1CCTL2
                            112 	.globl _T1CCTL1
                            113 	.globl _T1CCTL0
                            114 	.globl _T1CTL
                            115 	.globl _T1CNTH
                            116 	.globl _T1CNTL
                            117 	.globl _RFST
                            118 	.globl _ACC
                            119 	.globl _T1CC2H
                            120 	.globl _T1CC2L
                            121 	.globl _T1CC1H
                            122 	.globl _T1CC1L
                            123 	.globl _T1CC0H
                            124 	.globl _T1CC0L
                            125 	.globl _RFD
                            126 	.globl _TIMIF
                            127 	.globl _DMAREQ
                            128 	.globl _DMAARM
                            129 	.globl _DMA0CFGH
                            130 	.globl _DMA0CFGL
                            131 	.globl _DMA1CFGH
                            132 	.globl _DMA1CFGL
                            133 	.globl _DMAIRQ
                            134 	.globl _PSW
                            135 	.globl _T3CC1
                            136 	.globl _T3CCTL1
                            137 	.globl _T3CC0
                            138 	.globl _T3CCTL0
                            139 	.globl _T3CTL
                            140 	.globl _T3CNT
                            141 	.globl _WDCTL
                            142 	.globl _T2CON
                            143 	.globl _MEMCTR
                            144 	.globl _CLKCON
                            145 	.globl _U0GCR
                            146 	.globl _U0UCR
                            147 	.globl _T2CNF
                            148 	.globl _U0BAUD
                            149 	.globl _U0BUF
                            150 	.globl _IRCON
                            151 	.globl _SLEEP
                            152 	.globl _RNDH
                            153 	.globl _RNDL
                            154 	.globl _ADCH
                            155 	.globl _ADCL
                            156 	.globl _IP1
                            157 	.globl _IEN1
                            158 	.globl _RCCTL
                            159 	.globl _ADCCON3
                            160 	.globl _ADCCON2
                            161 	.globl _ADCCON1
                            162 	.globl _ENCCS
                            163 	.globl _ENCDO
                            164 	.globl _ENCDI
                            165 	.globl _FWDATA
                            166 	.globl _FCTL
                            167 	.globl _FADDRH
                            168 	.globl _FADDRL
                            169 	.globl _FWT
                            170 	.globl _IP0
                            171 	.globl _IEN0
                            172 	.globl _IE
                            173 	.globl _T2THD
                            174 	.globl _T2TLD
                            175 	.globl _T2CAPHPH
                            176 	.globl _T2CAPLPL
                            177 	.globl _T2OF2
                            178 	.globl _T2OF1
                            179 	.globl _T2OF0
                            180 	.globl _P2
                            181 	.globl _PSBANK
                            182 	.globl _FMAP
                            183 	.globl _T2PEROF2
                            184 	.globl _T2PEROF1
                            185 	.globl _T2PEROF0
                            186 	.globl _S1CON
                            187 	.globl _IEN2
                            188 	.globl _HSRC
                            189 	.globl _S0CON
                            190 	.globl _ST2
                            191 	.globl _ST1
                            192 	.globl _ST0
                            193 	.globl _T2CMP
                            194 	.globl __XPAGE
                            195 	.globl _DPS
                            196 	.globl _RFIM
                            197 	.globl _P1
                            198 	.globl _P0INP
                            199 	.globl _P1IEN
                            200 	.globl _PICTL
                            201 	.globl _P2IFG
                            202 	.globl _P1IFG
                            203 	.globl _P0IFG
                            204 	.globl _TCON
                            205 	.globl _PCON
                            206 	.globl _U0CSR
                            207 	.globl _DPH1
                            208 	.globl _DPL1
                            209 	.globl _DPH0
                            210 	.globl _DPL0
                            211 	.globl _SP
                            212 	.globl _P0
                            213 	.globl _elfloader_autostart_processes
                            214 	.globl _elfloader_unknown
                            215 	.globl _ADC_SHADOW
                            216 	.globl _U1BUF_SHADOW
                            217 	.globl _RFD_SHADOW
                            218 	.globl _U0BUF_SHADOW
                            219 	.globl _RFSTATUS
                            220 	.globl _CHIPID
                            221 	.globl _CHVER
                            222 	.globl _FSMTC1
                            223 	.globl _RXFIFOCNT
                            224 	.globl _IOCFG3
                            225 	.globl _IOCFG2
                            226 	.globl _IOCFG1
                            227 	.globl _IOCFG0
                            228 	.globl _SHORTADDRL
                            229 	.globl _SHORTADDRH
                            230 	.globl _PANIDL
                            231 	.globl _PANIDH
                            232 	.globl _IEEE_ADDR7
                            233 	.globl _IEEE_ADDR6
                            234 	.globl _IEEE_ADDR5
                            235 	.globl _IEEE_ADDR4
                            236 	.globl _IEEE_ADDR3
                            237 	.globl _IEEE_ADDR2
                            238 	.globl _IEEE_ADDR1
                            239 	.globl _IEEE_ADDR0
                            240 	.globl _DACTSTL
                            241 	.globl _DACTSTH
                            242 	.globl _ADCTSTL
                            243 	.globl _ADCTSTH
                            244 	.globl _FSMSTATE
                            245 	.globl _AGCCTRLL
                            246 	.globl _AGCCTRLH
                            247 	.globl _MANORL
                            248 	.globl _MANORH
                            249 	.globl _MANANDL
                            250 	.globl _MANANDH
                            251 	.globl _FSMTCL
                            252 	.globl _FSMTCH
                            253 	.globl _RFPWR
                            254 	.globl _CSPT
                            255 	.globl _CSPCTRL
                            256 	.globl _CSPZ
                            257 	.globl _CSPY
                            258 	.globl _CSPX
                            259 	.globl _FSCTRLL
                            260 	.globl _FSCTRLH
                            261 	.globl _RXCTRL1L
                            262 	.globl _RXCTRL1H
                            263 	.globl _RXCTRL0L
                            264 	.globl _RXCTRL0H
                            265 	.globl _TXCTRLL
                            266 	.globl _TXCTRLH
                            267 	.globl _SYNCWORDL
                            268 	.globl _SYNCWORDH
                            269 	.globl _RSSIL
                            270 	.globl _RSSIH
                            271 	.globl _MDMCTRL1L
                            272 	.globl _MDMCTRL1H
                            273 	.globl _MDMCTRL0L
                            274 	.globl _MDMCTRL0H
                            275 	.globl _elfloader_init
                            276 	.globl _elfloader_load
                            277 ;--------------------------------------------------------
                            278 ; special function registers
                            279 ;--------------------------------------------------------
                            280 	.area RSEG    (ABS,DATA)
   0000                     281 	.org 0x0000
                    0080    282 _P0	=	0x0080
                    0081    283 _SP	=	0x0081
                    0082    284 _DPL0	=	0x0082
                    0083    285 _DPH0	=	0x0083
                    0084    286 _DPL1	=	0x0084
                    0085    287 _DPH1	=	0x0085
                    0086    288 _U0CSR	=	0x0086
                    0087    289 _PCON	=	0x0087
                    0088    290 _TCON	=	0x0088
                    0089    291 _P0IFG	=	0x0089
                    008A    292 _P1IFG	=	0x008a
                    008B    293 _P2IFG	=	0x008b
                    008C    294 _PICTL	=	0x008c
                    008D    295 _P1IEN	=	0x008d
                    008F    296 _P0INP	=	0x008f
                    0090    297 _P1	=	0x0090
                    0091    298 _RFIM	=	0x0091
                    0092    299 _DPS	=	0x0092
                    0093    300 __XPAGE	=	0x0093
                    0094    301 _T2CMP	=	0x0094
                    0095    302 _ST0	=	0x0095
                    0096    303 _ST1	=	0x0096
                    0097    304 _ST2	=	0x0097
                    0098    305 _S0CON	=	0x0098
                    0099    306 _HSRC	=	0x0099
                    009A    307 _IEN2	=	0x009a
                    009B    308 _S1CON	=	0x009b
                    009C    309 _T2PEROF0	=	0x009c
                    009D    310 _T2PEROF1	=	0x009d
                    009E    311 _T2PEROF2	=	0x009e
                    009F    312 _FMAP	=	0x009f
                    009F    313 _PSBANK	=	0x009f
                    00A0    314 _P2	=	0x00a0
                    00A1    315 _T2OF0	=	0x00a1
                    00A2    316 _T2OF1	=	0x00a2
                    00A3    317 _T2OF2	=	0x00a3
                    00A4    318 _T2CAPLPL	=	0x00a4
                    00A5    319 _T2CAPHPH	=	0x00a5
                    00A6    320 _T2TLD	=	0x00a6
                    00A7    321 _T2THD	=	0x00a7
                    00A8    322 _IE	=	0x00a8
                    00A8    323 _IEN0	=	0x00a8
                    00A9    324 _IP0	=	0x00a9
                    00AB    325 _FWT	=	0x00ab
                    00AC    326 _FADDRL	=	0x00ac
                    00AD    327 _FADDRH	=	0x00ad
                    00AE    328 _FCTL	=	0x00ae
                    00AF    329 _FWDATA	=	0x00af
                    00B1    330 _ENCDI	=	0x00b1
                    00B2    331 _ENCDO	=	0x00b2
                    00B3    332 _ENCCS	=	0x00b3
                    00B4    333 _ADCCON1	=	0x00b4
                    00B5    334 _ADCCON2	=	0x00b5
                    00B6    335 _ADCCON3	=	0x00b6
                    00B7    336 _RCCTL	=	0x00b7
                    00B8    337 _IEN1	=	0x00b8
                    00B9    338 _IP1	=	0x00b9
                    00BA    339 _ADCL	=	0x00ba
                    00BB    340 _ADCH	=	0x00bb
                    00BC    341 _RNDL	=	0x00bc
                    00BD    342 _RNDH	=	0x00bd
                    00BE    343 _SLEEP	=	0x00be
                    00C0    344 _IRCON	=	0x00c0
                    00C1    345 _U0BUF	=	0x00c1
                    00C2    346 _U0BAUD	=	0x00c2
                    00C3    347 _T2CNF	=	0x00c3
                    00C4    348 _U0UCR	=	0x00c4
                    00C5    349 _U0GCR	=	0x00c5
                    00C6    350 _CLKCON	=	0x00c6
                    00C7    351 _MEMCTR	=	0x00c7
                    00C8    352 _T2CON	=	0x00c8
                    00C9    353 _WDCTL	=	0x00c9
                    00CA    354 _T3CNT	=	0x00ca
                    00CB    355 _T3CTL	=	0x00cb
                    00CC    356 _T3CCTL0	=	0x00cc
                    00CD    357 _T3CC0	=	0x00cd
                    00CE    358 _T3CCTL1	=	0x00ce
                    00CF    359 _T3CC1	=	0x00cf
                    00D0    360 _PSW	=	0x00d0
                    00D1    361 _DMAIRQ	=	0x00d1
                    00D2    362 _DMA1CFGL	=	0x00d2
                    00D3    363 _DMA1CFGH	=	0x00d3
                    00D4    364 _DMA0CFGL	=	0x00d4
                    00D5    365 _DMA0CFGH	=	0x00d5
                    00D6    366 _DMAARM	=	0x00d6
                    00D7    367 _DMAREQ	=	0x00d7
                    00D8    368 _TIMIF	=	0x00d8
                    00D9    369 _RFD	=	0x00d9
                    00DA    370 _T1CC0L	=	0x00da
                    00DB    371 _T1CC0H	=	0x00db
                    00DC    372 _T1CC1L	=	0x00dc
                    00DD    373 _T1CC1H	=	0x00dd
                    00DE    374 _T1CC2L	=	0x00de
                    00DF    375 _T1CC2H	=	0x00df
                    00E0    376 _ACC	=	0x00e0
                    00E1    377 _RFST	=	0x00e1
                    00E2    378 _T1CNTL	=	0x00e2
                    00E3    379 _T1CNTH	=	0x00e3
                    00E4    380 _T1CTL	=	0x00e4
                    00E5    381 _T1CCTL0	=	0x00e5
                    00E6    382 _T1CCTL1	=	0x00e6
                    00E7    383 _T1CCTL2	=	0x00e7
                    00E8    384 _IRCON2	=	0x00e8
                    00E9    385 _RFIF	=	0x00e9
                    00EA    386 _T4CNT	=	0x00ea
                    00EB    387 _T4CTL	=	0x00eb
                    00EC    388 _T4CCTL0	=	0x00ec
                    00ED    389 _T4CC0	=	0x00ed
                    00EE    390 _T4CCTL1	=	0x00ee
                    00EF    391 _T4CC1	=	0x00ef
                    00F0    392 _B	=	0x00f0
                    00F1    393 _PERCFG	=	0x00f1
                    00F2    394 _ADCCFG	=	0x00f2
                    00F3    395 _P0SEL	=	0x00f3
                    00F4    396 _P1SEL	=	0x00f4
                    00F5    397 _P2SEL	=	0x00f5
                    00F6    398 _P1INP	=	0x00f6
                    00F7    399 _P2INP	=	0x00f7
                    00F8    400 _U1CSR	=	0x00f8
                    00F9    401 _U1BUF	=	0x00f9
                    00FA    402 _U1BAUD	=	0x00fa
                    00FB    403 _U1UCR	=	0x00fb
                    00FC    404 _U1GCR	=	0x00fc
                    00FD    405 _P0DIR	=	0x00fd
                    00FE    406 _P1DIR	=	0x00fe
                    00FF    407 _P2DIR	=	0x00ff
                            408 ;--------------------------------------------------------
                            409 ; special function bits
                            410 ;--------------------------------------------------------
                            411 	.area RSEG    (ABS,DATA)
   0000                     412 	.org 0x0000
                    0087    413 _P0_7	=	0x0087
                    0086    414 _P0_6	=	0x0086
                    0085    415 _P0_5	=	0x0085
                    0084    416 _P0_4	=	0x0084
                    0083    417 _P0_3	=	0x0083
                    0082    418 _P0_2	=	0x0082
                    0081    419 _P0_1	=	0x0081
                    0080    420 _P0_0	=	0x0080
                    008F    421 _TCON_URX1IF	=	0x008f
                    008D    422 _TCON_ADCIF	=	0x008d
                    008B    423 _TCON_URX0IF	=	0x008b
                    008A    424 _TCON_IT1	=	0x008a
                    0089    425 _TCON_RFERRIF	=	0x0089
                    0088    426 _TCON_IT0	=	0x0088
                    0090    427 _P1_0	=	0x0090
                    0091    428 _P1_1	=	0x0091
                    0092    429 _P1_2	=	0x0092
                    0093    430 _P1_3	=	0x0093
                    0094    431 _P1_4	=	0x0094
                    0095    432 _P1_5	=	0x0095
                    0096    433 _P1_6	=	0x0096
                    0097    434 _P1_7	=	0x0097
                    0099    435 _S0CON_ENCIF_1	=	0x0099
                    0098    436 _S0CON_ENCIF_0	=	0x0098
                    00A0    437 _P2_0	=	0x00a0
                    00A1    438 _P2_1	=	0x00a1
                    00A2    439 _P2_2	=	0x00a2
                    00A3    440 _P2_3	=	0x00a3
                    00A4    441 _P2_4	=	0x00a4
                    00AF    442 _EA	=	0x00af
                    00AF    443 _IEN0_EA	=	0x00af
                    00AD    444 _IEN0_STIE	=	0x00ad
                    00AC    445 _IEN0_ENCIE	=	0x00ac
                    00AB    446 _IEN0_URX1IE	=	0x00ab
                    00AA    447 _IEN0_URX0IE	=	0x00aa
                    00A9    448 _IEN0_ADCIE	=	0x00a9
                    00A8    449 _IEN0_RFERRIE	=	0x00a8
                    00BD    450 _IEN1_P0IE	=	0x00bd
                    00BC    451 _IEN1_T4IE	=	0x00bc
                    00BB    452 _IEN1_T3IE	=	0x00bb
                    00BA    453 _IEN1_T2IE	=	0x00ba
                    00B9    454 _IEN1_T1IE	=	0x00b9
                    00B8    455 _IEN1_DMAIE	=	0x00b8
                    00C7    456 _IRCON_STIF	=	0x00c7
                    00C5    457 _IRCON_P0IF	=	0x00c5
                    00C4    458 _IRCON_T4IF	=	0x00c4
                    00C3    459 _IRCON_T3IF	=	0x00c3
                    00C2    460 _IRCON_T2IF	=	0x00c2
                    00C1    461 _IRCON_T1IF	=	0x00c1
                    00C0    462 _IRCON_DMAIF	=	0x00c0
                    00D0    463 _P	=	0x00d0
                    00D1    464 _F1	=	0x00d1
                    00D2    465 _OV	=	0x00d2
                    00D3    466 _RS0	=	0x00d3
                    00D4    467 _RS1	=	0x00d4
                    00D5    468 _F0	=	0x00d5
                    00D6    469 _AC	=	0x00d6
                    00D7    470 _CY	=	0x00d7
                    00EC    471 _IRCON2_WDTIF	=	0x00ec
                    00EB    472 _IRCON2_P1IF	=	0x00eb
                    00EA    473 _IRCON2_UTX1IF	=	0x00ea
                    00E9    474 _IRCON2_UTX0IF	=	0x00e9
                    00E8    475 _IRCON2_P2IF	=	0x00e8
                            476 ;--------------------------------------------------------
                            477 ; overlayable register banks
                            478 ;--------------------------------------------------------
                            479 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     480 	.ds 8
                            481 ;--------------------------------------------------------
                            482 ; internal ram data
                            483 ;--------------------------------------------------------
                            484 	.area DSEG    (DATA)
                            485 ;--------------------------------------------------------
                            486 ; overlayable items in internal ram 
                            487 ;--------------------------------------------------------
                            488 	.area OSEG    (OVR,DATA)
                            489 ;--------------------------------------------------------
                            490 ; indirectly addressable internal ram data
                            491 ;--------------------------------------------------------
                            492 	.area ISEG    (DATA)
                            493 ;--------------------------------------------------------
                            494 ; absolute internal ram data
                            495 ;--------------------------------------------------------
                            496 	.area IABS    (ABS,DATA)
                            497 	.area IABS    (ABS,DATA)
                            498 ;--------------------------------------------------------
                            499 ; bit data
                            500 ;--------------------------------------------------------
                            501 	.area BSEG    (BIT)
                            502 ;--------------------------------------------------------
                            503 ; paged external ram data
                            504 ;--------------------------------------------------------
                            505 	.area PSEG    (PAG,XDATA)
                            506 ;--------------------------------------------------------
                            507 ; external ram data
                            508 ;--------------------------------------------------------
                            509 	.area XSEG    (XDATA)
                    DF02    510 _MDMCTRL0H	=	0xdf02
                    DF03    511 _MDMCTRL0L	=	0xdf03
                    DF04    512 _MDMCTRL1H	=	0xdf04
                    DF05    513 _MDMCTRL1L	=	0xdf05
                    DF06    514 _RSSIH	=	0xdf06
                    DF07    515 _RSSIL	=	0xdf07
                    DF08    516 _SYNCWORDH	=	0xdf08
                    DF09    517 _SYNCWORDL	=	0xdf09
                    DF0A    518 _TXCTRLH	=	0xdf0a
                    DF0B    519 _TXCTRLL	=	0xdf0b
                    DF0C    520 _RXCTRL0H	=	0xdf0c
                    DF0D    521 _RXCTRL0L	=	0xdf0d
                    DF0E    522 _RXCTRL1H	=	0xdf0e
                    DF0F    523 _RXCTRL1L	=	0xdf0f
                    DF10    524 _FSCTRLH	=	0xdf10
                    DF11    525 _FSCTRLL	=	0xdf11
                    DF12    526 _CSPX	=	0xdf12
                    DF13    527 _CSPY	=	0xdf13
                    DF14    528 _CSPZ	=	0xdf14
                    DF15    529 _CSPCTRL	=	0xdf15
                    DF16    530 _CSPT	=	0xdf16
                    DF17    531 _RFPWR	=	0xdf17
                    DF20    532 _FSMTCH	=	0xdf20
                    DF21    533 _FSMTCL	=	0xdf21
                    DF22    534 _MANANDH	=	0xdf22
                    DF23    535 _MANANDL	=	0xdf23
                    DF24    536 _MANORH	=	0xdf24
                    DF25    537 _MANORL	=	0xdf25
                    DF26    538 _AGCCTRLH	=	0xdf26
                    DF27    539 _AGCCTRLL	=	0xdf27
                    DF39    540 _FSMSTATE	=	0xdf39
                    DF3A    541 _ADCTSTH	=	0xdf3a
                    DF3B    542 _ADCTSTL	=	0xdf3b
                    DF3C    543 _DACTSTH	=	0xdf3c
                    DF3D    544 _DACTSTL	=	0xdf3d
                    DF43    545 _IEEE_ADDR0	=	0xdf43
                    DF44    546 _IEEE_ADDR1	=	0xdf44
                    DF45    547 _IEEE_ADDR2	=	0xdf45
                    DF46    548 _IEEE_ADDR3	=	0xdf46
                    DF47    549 _IEEE_ADDR4	=	0xdf47
                    DF48    550 _IEEE_ADDR5	=	0xdf48
                    DF49    551 _IEEE_ADDR6	=	0xdf49
                    DF4A    552 _IEEE_ADDR7	=	0xdf4a
                    DF4B    553 _PANIDH	=	0xdf4b
                    DF4C    554 _PANIDL	=	0xdf4c
                    DF4D    555 _SHORTADDRH	=	0xdf4d
                    DF4E    556 _SHORTADDRL	=	0xdf4e
                    DF4F    557 _IOCFG0	=	0xdf4f
                    DF50    558 _IOCFG1	=	0xdf50
                    DF51    559 _IOCFG2	=	0xdf51
                    DF52    560 _IOCFG3	=	0xdf52
                    DF53    561 _RXFIFOCNT	=	0xdf53
                    DF54    562 _FSMTC1	=	0xdf54
                    DF60    563 _CHVER	=	0xdf60
                    DF61    564 _CHIPID	=	0xdf61
                    DF62    565 _RFSTATUS	=	0xdf62
                    DFC1    566 _U0BUF_SHADOW	=	0xdfc1
                    DFD9    567 _RFD_SHADOW	=	0xdfd9
                    DFF9    568 _U1BUF_SHADOW	=	0xdff9
                    DFBA    569 _ADC_SHADOW	=	0xdfba
   0000                     570 _elfloader_unknown::
   0000                     571 	.ds 30
   001E                     572 _elfloader_autostart_processes::
   001E                     573 	.ds 3
   0021                     574 _bss:
   0021                     575 	.ds 6
   0027                     576 _data:
   0027                     577 	.ds 6
   002D                     578 _rodata:
   002D                     579 	.ds 6
   0033                     580 _text:
   0033                     581 	.ds 6
                            582 ;--------------------------------------------------------
                            583 ; absolute external ram data
                            584 ;--------------------------------------------------------
                            585 	.area XABS    (ABS,XDATA)
                            586 ;--------------------------------------------------------
                            587 ; external initialized ram data
                            588 ;--------------------------------------------------------
                            589 	.area XISEG   (XDATA)
                            590 	.area HOME    (CODE)
                            591 	.area GSINIT0 (CODE)
                            592 	.area GSINIT1 (CODE)
                            593 	.area GSINIT2 (CODE)
                            594 	.area GSINIT3 (CODE)
                            595 	.area GSINIT4 (CODE)
                            596 	.area GSINIT5 (CODE)
                            597 	.area GSINIT  (CODE)
                            598 	.area GSFINAL (CODE)
                            599 	.area CSEG    (CODE)
                            600 ;--------------------------------------------------------
                            601 ; global & static initialisations
                            602 ;--------------------------------------------------------
                            603 	.area HOME    (CODE)
                            604 	.area GSINIT  (CODE)
                            605 	.area GSFINAL (CODE)
                            606 	.area GSINIT  (CODE)
                            607 ;--------------------------------------------------------
                            608 ; Home
                            609 ;--------------------------------------------------------
                            610 	.area HOME    (CODE)
                            611 	.area HOME    (CODE)
                            612 ;--------------------------------------------------------
                            613 ; code
                            614 ;--------------------------------------------------------
                            615 	.area CSEG    (CODE)
                            616 ;------------------------------------------------------------
                            617 ;Allocation info for local variables in function 'seek_read'
                            618 ;------------------------------------------------------------
                            619 ;offset                    Allocated to stack - _bp -4
                            620 ;buf                       Allocated to stack - _bp -7
                            621 ;len                       Allocated to stack - _bp -9
                            622 ;fd                        Allocated to stack - _bp +1
                            623 ;------------------------------------------------------------
                            624 ;	../../core/loader/elfloader.c:150: seek_read(int fd, unsigned int offset, char *buf, int len)
                            625 ;	-----------------------------------------
                            626 ;	 function seek_read
                            627 ;	-----------------------------------------
   0000                     628 _seek_read:
                    0007    629 	ar7 = 0x07
                    0006    630 	ar6 = 0x06
                    0005    631 	ar5 = 0x05
                    0004    632 	ar4 = 0x04
                    0003    633 	ar3 = 0x03
                    0002    634 	ar2 = 0x02
                    0001    635 	ar1 = 0x01
                    0000    636 	ar0 = 0x00
   0000 C0*00               637 	push	_bp
   0002 85 81*00            638 	mov	_bp,sp
   0005 C0 82               639 	push	dpl
   0007 C0 83               640 	push	dph
                            641 ;	../../core/loader/elfloader.c:152: cfs_seek(fd, offset, CFS_SEEK_SET);
   0009 E5*00               642 	mov	a,_bp
   000B 24 FC               643 	add	a,#0xfc
   000D F8                  644 	mov	r0,a
   000E 86 04               645 	mov	ar4,@r0
   0010 08                  646 	inc	r0
   0011 86 05               647 	mov	ar5,@r0
   0013 E4                  648 	clr	a
   0014 C0 E0               649 	push	acc
   0016 C0 E0               650 	push	acc
   0018 C0 04               651 	push	ar4
   001A C0 05               652 	push	ar5
   001C A8*00               653 	mov	r0,_bp
   001E 08                  654 	inc	r0
   001F 86 82               655 	mov	dpl,@r0
   0021 08                  656 	inc	r0
   0022 86 83               657 	mov	dph,@r0
   0024 12s00r00            658 	lcall	_cfs_seek
   0027 E5 81               659 	mov	a,sp
   0029 24 FC               660 	add	a,#0xfc
   002B F5 81               661 	mov	sp,a
                            662 ;	../../core/loader/elfloader.c:153: cfs_read(fd, buf, len);
   002D E5*00               663 	mov	a,_bp
   002F 24 F7               664 	add	a,#0xf7
   0031 F8                  665 	mov	r0,a
   0032 86 04               666 	mov	ar4,@r0
   0034 08                  667 	inc	r0
   0035 86 05               668 	mov	ar5,@r0
   0037 E5*00               669 	mov	a,_bp
   0039 24 F9               670 	add	a,#0xf9
   003B F8                  671 	mov	r0,a
   003C 86 02               672 	mov	ar2,@r0
   003E 08                  673 	inc	r0
   003F 86 03               674 	mov	ar3,@r0
   0041 08                  675 	inc	r0
   0042 86 07               676 	mov	ar7,@r0
   0044 C0 04               677 	push	ar4
   0046 C0 05               678 	push	ar5
   0048 C0 02               679 	push	ar2
   004A C0 03               680 	push	ar3
   004C C0 07               681 	push	ar7
   004E A8*00               682 	mov	r0,_bp
   0050 08                  683 	inc	r0
   0051 86 82               684 	mov	dpl,@r0
   0053 08                  685 	inc	r0
   0054 86 83               686 	mov	dph,@r0
   0056 12s00r00            687 	lcall	_cfs_read
   0059 E5 81               688 	mov	a,sp
   005B 24 FB               689 	add	a,#0xfb
   005D F5 81               690 	mov	sp,a
   005F 85*00 81            691 	mov	sp,_bp
   0062 D0*00               692 	pop	_bp
   0064 22                  693 	ret
                            694 ;------------------------------------------------------------
                            695 ;Allocation info for local variables in function 'find_local_symbol'
                            696 ;------------------------------------------------------------
                            697 ;symbol                    Allocated to stack - _bp -5
                            698 ;symtab                    Allocated to stack - _bp -7
                            699 ;symtabsize                Allocated to stack - _bp -9
                            700 ;strtab                    Allocated to stack - _bp -11
                            701 ;fd                        Allocated to stack - _bp +1
                            702 ;s                         Allocated to stack - _bp +3
                            703 ;a                         Allocated to registers r4 r5 
                            704 ;name                      Allocated to stack - _bp +19
                            705 ;sect                      Allocated to registers r4 r6 r7 
                            706 ;sloc0                     Allocated to stack - _bp +49
                            707 ;sloc1                     Allocated to stack - _bp +51
                            708 ;sloc2                     Allocated to stack - _bp +55
                            709 ;sloc3                     Allocated to stack - _bp +56
                            710 ;sloc4                     Allocated to stack - _bp +59
                            711 ;------------------------------------------------------------
                            712 ;	../../core/loader/elfloader.c:177: find_local_symbol(int fd, const char *symbol,
                            713 ;	-----------------------------------------
                            714 ;	 function find_local_symbol
                            715 ;	-----------------------------------------
   0065                     716 _find_local_symbol:
   0065 C0*00               717 	push	_bp
   0067 85 81*00            718 	mov	_bp,sp
   006A C0 82               719 	push	dpl
   006C C0 83               720 	push	dph
   006E E5 81               721 	mov	a,sp
   0070 24 39               722 	add	a,#0x39
   0072 F5 81               723 	mov	sp,a
                            724 ;	../../core/loader/elfloader.c:186: for(a = symtab; a < symtab + symtabsize; a += sizeof(s)) {
   0074 E5*00               725 	mov	a,_bp
   0076 24 F9               726 	add	a,#0xf9
   0078 F8                  727 	mov	r0,a
   0079 86 04               728 	mov	ar4,@r0
   007B 08                  729 	inc	r0
   007C 86 05               730 	mov	ar5,@r0
   007E E5*00               731 	mov	a,_bp
   0080 24 3B               732 	add	a,#0x3b
   0082 F8                  733 	mov	r0,a
   0083 E5*00               734 	mov	a,_bp
   0085 24 13               735 	add	a,#0x13
   0087 F6                  736 	mov	@r0,a
   0088 E5*00               737 	mov	a,_bp
   008A 24 3B               738 	add	a,#0x3b
   008C F8                  739 	mov	r0,a
   008D E5*00               740 	mov	a,_bp
   008F 24 37               741 	add	a,#0x37
   0091 F9                  742 	mov	r1,a
   0092 E6                  743 	mov	a,@r0
   0093 F7                  744 	mov	@r1,a
   0094 E5*00               745 	mov	a,_bp
   0096 24 03               746 	add	a,#0x03
   0098 F9                  747 	mov	r1,a
   0099 E5*00               748 	mov	a,_bp
   009B 24 F7               749 	add	a,#0xf7
   009D F8                  750 	mov	r0,a
   009E C0 01               751 	push	ar1
   00A0 E5*00               752 	mov	a,_bp
   00A2 24 31               753 	add	a,#0x31
   00A4 F9                  754 	mov	r1,a
   00A5 E6                  755 	mov	a,@r0
   00A6 2C                  756 	add	a,r4
   00A7 F7                  757 	mov	@r1,a
   00A8 08                  758 	inc	r0
   00A9 E6                  759 	mov	a,@r0
   00AA 3D                  760 	addc	a,r5
   00AB 09                  761 	inc	r1
   00AC F7                  762 	mov	@r1,a
   00AD D0 01               763 	pop	ar1
   00AF                     764 00114$:
   00AF E5*00               765 	mov	a,_bp
   00B1 24 31               766 	add	a,#0x31
   00B3 F8                  767 	mov	r0,a
   00B4 C3                  768 	clr	c
   00B5 EC                  769 	mov	a,r4
   00B6 96                  770 	subb	a,@r0
   00B7 ED                  771 	mov	a,r5
   00B8 08                  772 	inc	r0
   00B9 96                  773 	subb	a,@r0
   00BA 40 03               774 	jc	00134$
   00BC 02s02r6F            775 	ljmp	00117$
   00BF                     776 00134$:
                            777 ;	../../core/loader/elfloader.c:187: seek_read(fd, a, (char *)&s, sizeof(s));
   00BF E5*00               778 	mov	a,_bp
   00C1 24 03               779 	add	a,#0x03
   00C3 FA                  780 	mov	r2,a
   00C4 7E 00               781 	mov	r6,#0x00
   00C6 7F 40               782 	mov	r7,#0x40
   00C8 C0 05               783 	push	ar5
   00CA C0 04               784 	push	ar4
   00CC C0 01               785 	push	ar1
   00CE 74 10               786 	mov	a,#0x10
   00D0 C0 E0               787 	push	acc
   00D2 E4                  788 	clr	a
   00D3 C0 E0               789 	push	acc
   00D5 C0 02               790 	push	ar2
   00D7 C0 06               791 	push	ar6
   00D9 C0 07               792 	push	ar7
   00DB C0 04               793 	push	ar4
   00DD C0 05               794 	push	ar5
   00DF A8*00               795 	mov	r0,_bp
   00E1 08                  796 	inc	r0
   00E2 86 82               797 	mov	dpl,@r0
   00E4 08                  798 	inc	r0
   00E5 86 83               799 	mov	dph,@r0
   00E7 12s00r00            800 	lcall	_seek_read
   00EA E5 81               801 	mov	a,sp
   00EC 24 F9               802 	add	a,#0xf9
   00EE F5 81               803 	mov	sp,a
   00F0 D0 01               804 	pop	ar1
   00F2 D0 04               805 	pop	ar4
   00F4 D0 05               806 	pop	ar5
                            807 ;	../../core/loader/elfloader.c:189: if(s.st_name != 0) {
   00F6 E5*00               808 	mov	a,_bp
   00F8 24 33               809 	add	a,#0x33
   00FA F8                  810 	mov	r0,a
   00FB E7                  811 	mov	a,@r1
   00FC F6                  812 	mov	@r0,a
   00FD 09                  813 	inc	r1
   00FE E7                  814 	mov	a,@r1
   00FF 08                  815 	inc	r0
   0100 F6                  816 	mov	@r0,a
   0101 09                  817 	inc	r1
   0102 E7                  818 	mov	a,@r1
   0103 08                  819 	inc	r0
   0104 F6                  820 	mov	@r0,a
   0105 09                  821 	inc	r1
   0106 E7                  822 	mov	a,@r1
   0107 08                  823 	inc	r0
   0108 F6                  824 	mov	@r0,a
   0109 19                  825 	dec	r1
   010A 19                  826 	dec	r1
   010B 19                  827 	dec	r1
   010C E5*00               828 	mov	a,_bp
   010E 24 33               829 	add	a,#0x33
   0110 F8                  830 	mov	r0,a
   0111 E6                  831 	mov	a,@r0
   0112 08                  832 	inc	r0
   0113 46                  833 	orl	a,@r0
   0114 08                  834 	inc	r0
   0115 46                  835 	orl	a,@r0
   0116 08                  836 	inc	r0
   0117 46                  837 	orl	a,@r0
   0118 70 03               838 	jnz	00135$
   011A 02s02r65            839 	ljmp	00116$
   011D                     840 00135$:
                            841 ;	../../core/loader/elfloader.c:190: seek_read(fd, strtab + s.st_name, name, sizeof(name));
   011D C0 01               842 	push	ar1
   011F E5*00               843 	mov	a,_bp
   0121 24 3B               844 	add	a,#0x3b
   0123 F8                  845 	mov	r0,a
   0124 C0 01               846 	push	ar1
   0126 E5*00               847 	mov	a,_bp
   0128 24 38               848 	add	a,#0x38
   012A F9                  849 	mov	r1,a
   012B E6                  850 	mov	a,@r0
   012C F7                  851 	mov	@r1,a
   012D 09                  852 	inc	r1
   012E 77 00               853 	mov	@r1,#0x00
   0130 09                  854 	inc	r1
   0131 77 40               855 	mov	@r1,#0x40
   0133 D0 01               856 	pop	ar1
   0135 E5*00               857 	mov	a,_bp
   0137 24 F5               858 	add	a,#0xf5
   0139 F8                  859 	mov	r0,a
   013A 86 02               860 	mov	ar2,@r0
   013C 08                  861 	inc	r0
   013D 86 03               862 	mov	ar3,@r0
   013F E4                  863 	clr	a
   0140 FE                  864 	mov	r6,a
   0141 FF                  865 	mov	r7,a
   0142 E5*00               866 	mov	a,_bp
   0144 24 33               867 	add	a,#0x33
   0146 F8                  868 	mov	r0,a
   0147 E6                  869 	mov	a,@r0
   0148 2A                  870 	add	a,r2
   0149 FA                  871 	mov	r2,a
   014A 08                  872 	inc	r0
   014B E6                  873 	mov	a,@r0
   014C 3B                  874 	addc	a,r3
   014D FB                  875 	mov	r3,a
   014E 08                  876 	inc	r0
   014F E6                  877 	mov	a,@r0
   0150 3E                  878 	addc	a,r6
   0151 08                  879 	inc	r0
   0152 E6                  880 	mov	a,@r0
   0153 3F                  881 	addc	a,r7
   0154 C0 05               882 	push	ar5
   0156 C0 04               883 	push	ar4
   0158 C0 01               884 	push	ar1
   015A 74 1E               885 	mov	a,#0x1E
   015C C0 E0               886 	push	acc
   015E E4                  887 	clr	a
   015F C0 E0               888 	push	acc
   0161 E5*00               889 	mov	a,_bp
   0163 24 38               890 	add	a,#0x38
   0165 F8                  891 	mov	r0,a
   0166 E6                  892 	mov	a,@r0
   0167 C0 E0               893 	push	acc
   0169 08                  894 	inc	r0
   016A E6                  895 	mov	a,@r0
   016B C0 E0               896 	push	acc
   016D 08                  897 	inc	r0
   016E E6                  898 	mov	a,@r0
   016F C0 E0               899 	push	acc
   0171 C0 02               900 	push	ar2
   0173 C0 03               901 	push	ar3
   0175 A8*00               902 	mov	r0,_bp
   0177 08                  903 	inc	r0
   0178 86 82               904 	mov	dpl,@r0
   017A 08                  905 	inc	r0
   017B 86 83               906 	mov	dph,@r0
   017D 12s00r00            907 	lcall	_seek_read
   0180 E5 81               908 	mov	a,sp
   0182 24 F9               909 	add	a,#0xf9
   0184 F5 81               910 	mov	sp,a
                            911 ;	../../core/loader/elfloader.c:191: if(strcmp(name, symbol) == 0) {
   0186 E5*00               912 	mov	a,_bp
   0188 24 37               913 	add	a,#0x37
   018A F8                  914 	mov	r0,a
   018B 86 02               915 	mov	ar2,@r0
   018D 7E 00               916 	mov	r6,#0x00
   018F 7F 40               917 	mov	r7,#0x40
   0191 E5*00               918 	mov	a,_bp
   0193 24 FB               919 	add	a,#0xfb
   0195 F8                  920 	mov	r0,a
   0196 E6                  921 	mov	a,@r0
   0197 C0 E0               922 	push	acc
   0199 08                  923 	inc	r0
   019A E6                  924 	mov	a,@r0
   019B C0 E0               925 	push	acc
   019D 08                  926 	inc	r0
   019E E6                  927 	mov	a,@r0
   019F C0 E0               928 	push	acc
   01A1 8A 82               929 	mov	dpl,r2
   01A3 8E 83               930 	mov	dph,r6
   01A5 8F F0               931 	mov	b,r7
   01A7 12s00r00            932 	lcall	_strcmp
   01AA AE 82               933 	mov	r6,dpl
   01AC AF 83               934 	mov	r7,dph
   01AE 15 81               935 	dec	sp
   01B0 15 81               936 	dec	sp
   01B2 15 81               937 	dec	sp
   01B4 D0 01               938 	pop	ar1
   01B6 D0 04               939 	pop	ar4
   01B8 D0 05               940 	pop	ar5
   01BA D0 01               941 	pop	ar1
   01BC EE                  942 	mov	a,r6
   01BD 4F                  943 	orl	a,r7
   01BE 60 03               944 	jz	00136$
   01C0 02s02r65            945 	ljmp	00116$
   01C3                     946 00136$:
                            947 ;	../../core/loader/elfloader.c:192: if(s.st_shndx == bss.number) {
   01C3 E5*00               948 	mov	a,_bp
   01C5 24 03               949 	add	a,#0x03
   01C7 FD                  950 	mov	r5,a
   01C8 24 0E               951 	add	a,#0x0E
   01CA F8                  952 	mov	r0,a
   01CB 86 03               953 	mov	ar3,@r0
   01CD 08                  954 	inc	r0
   01CE 86 06               955 	mov	ar6,@r0
   01D0 90s00r21            956 	mov	dptr,#_bss
   01D3 E0                  957 	movx	a,@dptr
   01D4 FA                  958 	mov	r2,a
   01D5 7F 00               959 	mov	r7,#0x00
   01D7 EB                  960 	mov	a,r3
   01D8 B5 02 0C            961 	cjne	a,ar2,00108$
   01DB EE                  962 	mov	a,r6
   01DC B5 07 08            963 	cjne	a,ar7,00108$
                            964 ;	../../core/loader/elfloader.c:193: sect = &bss;
   01DF 7Cr21               965 	mov	r4,#_bss
   01E1 7Es00               966 	mov	r6,#(_bss >> 8)
   01E3 7F 00               967 	mov	r7,#0x00
   01E5 80 36               968 	sjmp	00109$
   01E7                     969 00108$:
                            970 ;	../../core/loader/elfloader.c:194: } else if(s.st_shndx == data.number) {
   01E7 90s00r27            971 	mov	dptr,#_data
   01EA E0                  972 	movx	a,@dptr
   01EB FF                  973 	mov	r7,a
   01EC 7A 00               974 	mov	r2,#0x00
   01EE EB                  975 	mov	a,r3
   01EF B5 07 0C            976 	cjne	a,ar7,00105$
   01F2 EE                  977 	mov	a,r6
   01F3 B5 02 08            978 	cjne	a,ar2,00105$
                            979 ;	../../core/loader/elfloader.c:195: sect = &data;
   01F6 7Cr27               980 	mov	r4,#_data
   01F8 7Es00               981 	mov	r6,#(_data >> 8)
   01FA 7F 00               982 	mov	r7,#0x00
   01FC 80 1F               983 	sjmp	00109$
   01FE                     984 00105$:
                            985 ;	../../core/loader/elfloader.c:196: } else if(s.st_shndx == text.number) {
   01FE 90s00r33            986 	mov	dptr,#_text
   0201 E0                  987 	movx	a,@dptr
   0202 FF                  988 	mov	r7,a
   0203 7A 00               989 	mov	r2,#0x00
   0205 EB                  990 	mov	a,r3
   0206 B5 07 0C            991 	cjne	a,ar7,00102$
   0209 EE                  992 	mov	a,r6
   020A B5 02 08            993 	cjne	a,ar2,00102$
                            994 ;	../../core/loader/elfloader.c:197: sect = &text;
   020D 7Cr33               995 	mov	r4,#_text
   020F 7Es00               996 	mov	r6,#(_text >> 8)
   0211 7F 00               997 	mov	r7,#0x00
   0213 80 08               998 	sjmp	00109$
   0215                     999 00102$:
                           1000 ;	../../core/loader/elfloader.c:199: return NULL;
   0215 90 00 00           1001 	mov	dptr,#0x0000
   0218 75 F0 00           1002 	mov	b,#0x00
   021B 80 58              1003 	sjmp	00118$
   021D                    1004 00109$:
                           1005 ;	../../core/loader/elfloader.c:201: return &(sect->address[s.st_value]);
   021D 74 03              1006 	mov	a,#0x03
   021F 2C                 1007 	add	a,r4
   0220 FB                 1008 	mov	r3,a
   0221 E4                 1009 	clr	a
   0222 3E                 1010 	addc	a,r6
   0223 FE                 1011 	mov	r6,a
   0224 8B 82              1012 	mov	dpl,r3
   0226 8E 83              1013 	mov	dph,r6
   0228 8F F0              1014 	mov	b,r7
   022A E5*00              1015 	mov	a,_bp
   022C 24 33              1016 	add	a,#0x33
   022E F8                 1017 	mov	r0,a
   022F 12s00r00           1018 	lcall	__gptrget
   0232 F6                 1019 	mov	@r0,a
   0233 A3                 1020 	inc	dptr
   0234 12s00r00           1021 	lcall	__gptrget
   0237 08                 1022 	inc	r0
   0238 F6                 1023 	mov	@r0,a
   0239 A3                 1024 	inc	dptr
   023A 12s00r00           1025 	lcall	__gptrget
   023D 08                 1026 	inc	r0
   023E F6                 1027 	mov	@r0,a
   023F 74 04              1028 	mov	a,#0x04
   0241 2D                 1029 	add	a,r5
   0242 F8                 1030 	mov	r0,a
   0243 86 02              1031 	mov	ar2,@r0
   0245 08                 1032 	inc	r0
   0246 86 03              1033 	mov	ar3,@r0
   0248 08                 1034 	inc	r0
   0249 86 06              1035 	mov	ar6,@r0
   024B 08                 1036 	inc	r0
   024C 86 07              1037 	mov	ar7,@r0
   024E E5*00              1038 	mov	a,_bp
   0250 24 33              1039 	add	a,#0x33
   0252 F8                 1040 	mov	r0,a
   0253 EA                 1041 	mov	a,r2
   0254 26                 1042 	add	a,@r0
   0255 FA                 1043 	mov	r2,a
   0256 EB                 1044 	mov	a,r3
   0257 08                 1045 	inc	r0
   0258 36                 1046 	addc	a,@r0
   0259 FB                 1047 	mov	r3,a
   025A 08                 1048 	inc	r0
   025B 86 06              1049 	mov	ar6,@r0
   025D 8A 82              1050 	mov	dpl,r2
   025F 8B 83              1051 	mov	dph,r3
   0261 8E F0              1052 	mov	b,r6
   0263 80 10              1053 	sjmp	00118$
   0265                    1054 00116$:
                           1055 ;	../../core/loader/elfloader.c:186: for(a = symtab; a < symtab + symtabsize; a += sizeof(s)) {
   0265 74 10              1056 	mov	a,#0x10
   0267 2C                 1057 	add	a,r4
   0268 FC                 1058 	mov	r4,a
   0269 E4                 1059 	clr	a
   026A 3D                 1060 	addc	a,r5
   026B FD                 1061 	mov	r5,a
   026C 02s00rAF           1062 	ljmp	00114$
   026F                    1063 00117$:
                           1064 ;	../../core/loader/elfloader.c:205: return NULL;
   026F 90 00 00           1065 	mov	dptr,#0x0000
   0272 75 F0 00           1066 	mov	b,#0x00
   0275                    1067 00118$:
   0275 85*00 81           1068 	mov	sp,_bp
   0278 D0*00              1069 	pop	_bp
   027A 22                 1070 	ret
                           1071 ;------------------------------------------------------------
                           1072 ;Allocation info for local variables in function 'relocate_section'
                           1073 ;------------------------------------------------------------
                           1074 ;section                   Allocated to stack - _bp -4
                           1075 ;size                      Allocated to stack - _bp -6
                           1076 ;sectionaddr               Allocated to stack - _bp -8
                           1077 ;sectionbase               Allocated to stack - _bp -11
                           1078 ;strs                      Allocated to stack - _bp -13
                           1079 ;strtab                    Allocated to stack - _bp -15
                           1080 ;symtab                    Allocated to stack - _bp -17
                           1081 ;symtabsize                Allocated to stack - _bp -19
                           1082 ;using_relas               Allocated to stack - _bp -20
                           1083 ;fd                        Allocated to stack - _bp +1
                           1084 ;rela                      Allocated to stack - _bp +3
                           1085 ;rel_size                  Allocated to stack - _bp +15
                           1086 ;s                         Allocated to stack - _bp +17
                           1087 ;a                         Allocated to stack - _bp +33
                           1088 ;name                      Allocated to stack - _bp +35
                           1089 ;addr                      Allocated to stack - _bp +65
                           1090 ;sect                      Allocated to registers r2 r3 r4 
                           1091 ;sloc0                     Allocated to stack - _bp +68
                           1092 ;sloc1                     Allocated to stack - _bp +69
                           1093 ;sloc2                     Allocated to stack - _bp +71
                           1094 ;sloc3                     Allocated to stack - _bp +72
                           1095 ;sloc4                     Allocated to stack - _bp +75
                           1096 ;sloc5                     Allocated to stack - _bp +79
                           1097 ;sloc6                     Allocated to stack - _bp +80
                           1098 ;------------------------------------------------------------
                           1099 ;	../../core/loader/elfloader.c:209: relocate_section(int fd,
                           1100 ;	-----------------------------------------
                           1101 ;	 function relocate_section
                           1102 ;	-----------------------------------------
   027B                    1103 _relocate_section:
   027B C0*00              1104 	push	_bp
   027D 85 81*00           1105 	mov	_bp,sp
   0280 C0 82              1106 	push	dpl
   0282 C0 83              1107 	push	dph
   0284 E5 81              1108 	mov	a,sp
   0286 24 51              1109 	add	a,#0x51
   0288 F5 81              1110 	mov	sp,a
                           1111 ;	../../core/loader/elfloader.c:228: if(using_relas) {
   028A E5*00              1112 	mov	a,_bp
   028C 24 EC              1113 	add	a,#0xec
   028E F8                 1114 	mov	r0,a
   028F E6                 1115 	mov	a,@r0
   0290 60 0C              1116 	jz	00102$
                           1117 ;	../../core/loader/elfloader.c:229: rel_size = sizeof(struct elf32_rela);
   0292 E5*00              1118 	mov	a,_bp
   0294 24 0F              1119 	add	a,#0x0f
   0296 F8                 1120 	mov	r0,a
   0297 76 0C              1121 	mov	@r0,#0x0C
   0299 08                 1122 	inc	r0
   029A 76 00              1123 	mov	@r0,#0x00
   029C 80 0A              1124 	sjmp	00103$
   029E                    1125 00102$:
                           1126 ;	../../core/loader/elfloader.c:231: rel_size = sizeof(struct elf32_rel);
   029E E5*00              1127 	mov	a,_bp
   02A0 24 0F              1128 	add	a,#0x0f
   02A2 F8                 1129 	mov	r0,a
   02A3 76 08              1130 	mov	@r0,#0x08
   02A5 08                 1131 	inc	r0
   02A6 76 00              1132 	mov	@r0,#0x00
   02A8                    1133 00103$:
                           1134 ;	../../core/loader/elfloader.c:234: for(a = section; a < section + size; a += rel_size) {
   02A8 E5*00              1135 	mov	a,_bp
   02AA 24 FC              1136 	add	a,#0xfc
   02AC F8                 1137 	mov	r0,a
   02AD E5*00              1138 	mov	a,_bp
   02AF 24 21              1139 	add	a,#0x21
   02B1 F9                 1140 	mov	r1,a
   02B2 E6                 1141 	mov	a,@r0
   02B3 F7                 1142 	mov	@r1,a
   02B4 08                 1143 	inc	r0
   02B5 09                 1144 	inc	r1
   02B6 E6                 1145 	mov	a,@r0
   02B7 F7                 1146 	mov	@r1,a
   02B8 E5*00              1147 	mov	a,_bp
   02BA 24 11              1148 	add	a,#0x11
   02BC 24 0E              1149 	add	a,#0x0E
   02BE F9                 1150 	mov	r1,a
   02BF E5*00              1151 	mov	a,_bp
   02C1 24 47              1152 	add	a,#0x47
   02C3 F8                 1153 	mov	r0,a
   02C4 E5*00              1154 	mov	a,_bp
   02C6 24 11              1155 	add	a,#0x11
   02C8 F6                 1156 	mov	@r0,a
   02C9 E5*00              1157 	mov	a,_bp
   02CB 24 11              1158 	add	a,#0x11
   02CD C8                 1159 	xch	a,r0
   02CE E5*00              1160 	mov	a,_bp
   02D0 24 44              1161 	add	a,#0x44
   02D2 C8                 1162 	xch	a,r0
   02D3 24 0E              1163 	add	a,#0x0E
   02D5 F6                 1164 	mov	@r0,a
   02D6 E5*00              1165 	mov	a,_bp
   02D8 24 21              1166 	add	a,#0x21
   02DA F8                 1167 	mov	r0,a
   02DB C0 01              1168 	push	ar1
   02DD E5*00              1169 	mov	a,_bp
   02DF 24 FA              1170 	add	a,#0xfa
   02E1 F9                 1171 	mov	r1,a
   02E2 E7                 1172 	mov	a,@r1
   02E3 26                 1173 	add	a,@r0
   02E4 C0 E0              1174 	push	acc
   02E6 09                 1175 	inc	r1
   02E7 E7                 1176 	mov	a,@r1
   02E8 08                 1177 	inc	r0
   02E9 36                 1178 	addc	a,@r0
   02EA C0 E0              1179 	push	acc
   02EC E5*00              1180 	mov	a,_bp
   02EE 24 46              1181 	add	a,#0x46
   02F0 F8                 1182 	mov	r0,a
   02F1 D0 E0              1183 	pop	acc
   02F3 F6                 1184 	mov	@r0,a
   02F4 18                 1185 	dec	r0
   02F5 D0 E0              1186 	pop	acc
   02F7 F6                 1187 	mov	@r0,a
   02F8 D0 01              1188 	pop	ar1
   02FA                    1189 00145$:
   02FA E5*00              1190 	mov	a,_bp
   02FC 24 21              1191 	add	a,#0x21
   02FE F8                 1192 	mov	r0,a
   02FF C0 01              1193 	push	ar1
   0301 E5*00              1194 	mov	a,_bp
   0303 24 45              1195 	add	a,#0x45
   0305 F9                 1196 	mov	r1,a
   0306 C3                 1197 	clr	c
   0307 E6                 1198 	mov	a,@r0
   0308 97                 1199 	subb	a,@r1
   0309 08                 1200 	inc	r0
   030A E6                 1201 	mov	a,@r0
   030B 09                 1202 	inc	r1
   030C 97                 1203 	subb	a,@r1
   030D D0 01              1204 	pop	ar1
   030F 40 03              1205 	jc	00182$
   0311 02s07r64           1206 	ljmp	00148$
   0314                    1207 00182$:
                           1208 ;	../../core/loader/elfloader.c:235: seek_read(fd, a, (char *)&rela, rel_size);
   0314 C0 01              1209 	push	ar1
   0316 E5*00              1210 	mov	a,_bp
   0318 24 03              1211 	add	a,#0x03
   031A FB                 1212 	mov	r3,a
   031B 7C 00              1213 	mov	r4,#0x00
   031D 7D 40              1214 	mov	r5,#0x40
   031F C0 01              1215 	push	ar1
   0321 E5*00              1216 	mov	a,_bp
   0323 24 0F              1217 	add	a,#0x0f
   0325 F8                 1218 	mov	r0,a
   0326 E6                 1219 	mov	a,@r0
   0327 C0 E0              1220 	push	acc
   0329 08                 1221 	inc	r0
   032A E6                 1222 	mov	a,@r0
   032B C0 E0              1223 	push	acc
   032D C0 03              1224 	push	ar3
   032F C0 04              1225 	push	ar4
   0331 C0 05              1226 	push	ar5
   0333 E5*00              1227 	mov	a,_bp
   0335 24 21              1228 	add	a,#0x21
   0337 F8                 1229 	mov	r0,a
   0338 E6                 1230 	mov	a,@r0
   0339 C0 E0              1231 	push	acc
   033B 08                 1232 	inc	r0
   033C E6                 1233 	mov	a,@r0
   033D C0 E0              1234 	push	acc
   033F A8*00              1235 	mov	r0,_bp
   0341 08                 1236 	inc	r0
   0342 86 82              1237 	mov	dpl,@r0
   0344 08                 1238 	inc	r0
   0345 86 83              1239 	mov	dph,@r0
   0347 12s00r00           1240 	lcall	_seek_read
   034A E5 81              1241 	mov	a,sp
   034C 24 F9              1242 	add	a,#0xf9
   034E F5 81              1243 	mov	sp,a
   0350 D0 01              1244 	pop	ar1
                           1245 ;	../../core/loader/elfloader.c:238: (char *)&s, sizeof(s));
   0352 E5*00              1246 	mov	a,_bp
   0354 24 11              1247 	add	a,#0x11
   0356 FD                 1248 	mov	r5,a
   0357 E5*00              1249 	mov	a,_bp
   0359 24 48              1250 	add	a,#0x48
   035B F8                 1251 	mov	r0,a
   035C A6 05              1252 	mov	@r0,ar5
   035E 08                 1253 	inc	r0
   035F 76 00              1254 	mov	@r0,#0x00
   0361 08                 1255 	inc	r0
   0362 76 40              1256 	mov	@r0,#0x40
                           1257 ;	../../core/loader/elfloader.c:237: symtab + sizeof(struct elf32_sym) * ELF32_R_SYM(rela.r_info),
   0364 E5*00              1258 	mov	a,_bp
   0366 24 03              1259 	add	a,#0x03
   0368 24 04              1260 	add	a,#0x04
   036A F9                 1261 	mov	r1,a
   036B 87 02              1262 	mov	ar2,@r1
   036D 09                 1263 	inc	r1
   036E 87 05              1264 	mov	ar5,@r1
   0370 09                 1265 	inc	r1
   0371 87 06              1266 	mov	ar6,@r1
   0373 09                 1267 	inc	r1
   0374 87 07              1268 	mov	ar7,@r1
   0376 19                 1269 	dec	r1
   0377 19                 1270 	dec	r1
   0378 19                 1271 	dec	r1
   0379 8D 02              1272 	mov	ar2,r5
   037B 8E 05              1273 	mov	ar5,r6
   037D ED                 1274 	mov	a,r5
   037E C4                 1275 	swap	a
   037F 54 F0              1276 	anl	a,#0xF0
   0381 CA                 1277 	xch	a,r2
   0382 C4                 1278 	swap	a
   0383 CA                 1279 	xch	a,r2
   0384 6A                 1280 	xrl	a,r2
   0385 CA                 1281 	xch	a,r2
   0386 54 F0              1282 	anl	a,#0xF0
   0388 CA                 1283 	xch	a,r2
   0389 6A                 1284 	xrl	a,r2
   038A FD                 1285 	mov	r5,a
   038B E5*00              1286 	mov	a,_bp
   038D 24 EF              1287 	add	a,#0xef
   038F F8                 1288 	mov	r0,a
   0390 EA                 1289 	mov	a,r2
   0391 26                 1290 	add	a,@r0
   0392 FA                 1291 	mov	r2,a
   0393 ED                 1292 	mov	a,r5
   0394 08                 1293 	inc	r0
   0395 36                 1294 	addc	a,@r0
   0396 FD                 1295 	mov	r5,a
                           1296 ;	../../core/loader/elfloader.c:236: seek_read(fd,
   0397 C0 01              1297 	push	ar1
   0399 74 10              1298 	mov	a,#0x10
   039B C0 E0              1299 	push	acc
   039D E4                 1300 	clr	a
   039E C0 E0              1301 	push	acc
   03A0 E5*00              1302 	mov	a,_bp
   03A2 24 48              1303 	add	a,#0x48
   03A4 F8                 1304 	mov	r0,a
   03A5 E6                 1305 	mov	a,@r0
   03A6 C0 E0              1306 	push	acc
   03A8 08                 1307 	inc	r0
   03A9 E6                 1308 	mov	a,@r0
   03AA C0 E0              1309 	push	acc
   03AC 08                 1310 	inc	r0
   03AD E6                 1311 	mov	a,@r0
   03AE C0 E0              1312 	push	acc
   03B0 C0 02              1313 	push	ar2
   03B2 C0 05              1314 	push	ar5
   03B4 A8*00              1315 	mov	r0,_bp
   03B6 08                 1316 	inc	r0
   03B7 86 82              1317 	mov	dpl,@r0
   03B9 08                 1318 	inc	r0
   03BA 86 83              1319 	mov	dph,@r0
   03BC 12s00r00           1320 	lcall	_seek_read
   03BF E5 81              1321 	mov	a,sp
   03C1 24 F9              1322 	add	a,#0xf9
   03C3 F5 81              1323 	mov	sp,a
                           1324 ;	../../core/loader/elfloader.c:239: if(s.st_name != 0) {
   03C5 E5*00              1325 	mov	a,_bp
   03C7 24 47              1326 	add	a,#0x47
   03C9 F8                 1327 	mov	r0,a
   03CA E5*00              1328 	mov	a,_bp
   03CC 24 4B              1329 	add	a,#0x4b
   03CE F9                 1330 	mov	r1,a
   03CF 86 00              1331 	mov	ar0,@r0
   03D1 E6                 1332 	mov	a,@r0
   03D2 F7                 1333 	mov	@r1,a
   03D3 08                 1334 	inc	r0
   03D4 E6                 1335 	mov	a,@r0
   03D5 09                 1336 	inc	r1
   03D6 F7                 1337 	mov	@r1,a
   03D7 08                 1338 	inc	r0
   03D8 E6                 1339 	mov	a,@r0
   03D9 09                 1340 	inc	r1
   03DA F7                 1341 	mov	@r1,a
   03DB 08                 1342 	inc	r0
   03DC E6                 1343 	mov	a,@r0
   03DD 09                 1344 	inc	r1
   03DE F7                 1345 	mov	@r1,a
   03DF 18                 1346 	dec	r0
   03E0 18                 1347 	dec	r0
   03E1 18                 1348 	dec	r0
   03E2 D0 01              1349 	pop	ar1
   03E4 D0 01              1350 	pop	ar1
   03E6 E5*00              1351 	mov	a,_bp
   03E8 24 4B              1352 	add	a,#0x4b
   03EA F8                 1353 	mov	r0,a
   03EB E6                 1354 	mov	a,@r0
   03EC 08                 1355 	inc	r0
   03ED 46                 1356 	orl	a,@r0
   03EE 08                 1357 	inc	r0
   03EF 46                 1358 	orl	a,@r0
   03F0 08                 1359 	inc	r0
   03F1 46                 1360 	orl	a,@r0
   03F2 70 03              1361 	jnz	00183$
   03F4 02s05rCD           1362 	ljmp	00141$
   03F7                    1363 00183$:
                           1364 ;	../../core/loader/elfloader.c:240: seek_read(fd, strtab + s.st_name, name, sizeof(name));
   03F7 C0 01              1365 	push	ar1
   03F9 E5*00              1366 	mov	a,_bp
   03FB 24 4F              1367 	add	a,#0x4f
   03FD F8                 1368 	mov	r0,a
   03FE E5*00              1369 	mov	a,_bp
   0400 24 23              1370 	add	a,#0x23
   0402 F6                 1371 	mov	@r0,a
   0403 E5*00              1372 	mov	a,_bp
   0405 24 4F              1373 	add	a,#0x4f
   0407 F8                 1374 	mov	r0,a
   0408 C0 01              1375 	push	ar1
   040A E5*00              1376 	mov	a,_bp
   040C 24 48              1377 	add	a,#0x48
   040E F9                 1378 	mov	r1,a
   040F E6                 1379 	mov	a,@r0
   0410 F7                 1380 	mov	@r1,a
   0411 09                 1381 	inc	r1
   0412 77 00              1382 	mov	@r1,#0x00
   0414 09                 1383 	inc	r1
   0415 77 40              1384 	mov	@r1,#0x40
   0417 E5*00              1385 	mov	a,_bp
   0419 24 F1              1386 	add	a,#0xf1
   041B F8                 1387 	mov	r0,a
   041C 86 02              1388 	mov	ar2,@r0
   041E 08                 1389 	inc	r0
   041F 86 03              1390 	mov	ar3,@r0
   0421 E4                 1391 	clr	a
   0422 FD                 1392 	mov	r5,a
   0423 FE                 1393 	mov	r6,a
   0424 E5*00              1394 	mov	a,_bp
   0426 24 4B              1395 	add	a,#0x4b
   0428 F8                 1396 	mov	r0,a
   0429 E6                 1397 	mov	a,@r0
   042A 2A                 1398 	add	a,r2
   042B FA                 1399 	mov	r2,a
   042C 08                 1400 	inc	r0
   042D E6                 1401 	mov	a,@r0
   042E 3B                 1402 	addc	a,r3
   042F FB                 1403 	mov	r3,a
   0430 08                 1404 	inc	r0
   0431 E6                 1405 	mov	a,@r0
   0432 3D                 1406 	addc	a,r5
   0433 08                 1407 	inc	r0
   0434 E6                 1408 	mov	a,@r0
   0435 3E                 1409 	addc	a,r6
   0436 74 1E              1410 	mov	a,#0x1E
   0438 C0 E0              1411 	push	acc
   043A E4                 1412 	clr	a
   043B C0 E0              1413 	push	acc
   043D E5*00              1414 	mov	a,_bp
   043F 24 48              1415 	add	a,#0x48
   0441 F8                 1416 	mov	r0,a
   0442 E6                 1417 	mov	a,@r0
   0443 C0 E0              1418 	push	acc
   0445 08                 1419 	inc	r0
   0446 E6                 1420 	mov	a,@r0
   0447 C0 E0              1421 	push	acc
   0449 08                 1422 	inc	r0
   044A E6                 1423 	mov	a,@r0
   044B C0 E0              1424 	push	acc
   044D C0 02              1425 	push	ar2
   044F C0 03              1426 	push	ar3
   0451 A8*00              1427 	mov	r0,_bp
   0453 08                 1428 	inc	r0
   0454 86 82              1429 	mov	dpl,@r0
   0456 08                 1430 	inc	r0
   0457 86 83              1431 	mov	dph,@r0
   0459 12s00r00           1432 	lcall	_seek_read
   045C E5 81              1433 	mov	a,sp
   045E 24 F9              1434 	add	a,#0xf9
   0460 F5 81              1435 	mov	sp,a
                           1436 ;	../../core/loader/elfloader.c:242: addr = (char *)symtab_lookup(name);
   0462 E5*00              1437 	mov	a,_bp
   0464 24 4F              1438 	add	a,#0x4f
   0466 F8                 1439 	mov	r0,a
   0467 86 06              1440 	mov	ar6,@r0
   0469 7D 00              1441 	mov	r5,#0x00
   046B 7C 40              1442 	mov	r4,#0x40
   046D 8E 82              1443 	mov	dpl,r6
   046F 8D 83              1444 	mov	dph,r5
   0471 8C F0              1445 	mov	b,r4
   0473 12s00r00           1446 	lcall	_symtab_lookup
   0476 AC 82              1447 	mov	r4,dpl
   0478 AD 83              1448 	mov	r5,dph
   047A AE F0              1449 	mov	r6,b
   047C D0 01              1450 	pop	ar1
   047E E5*00              1451 	mov	a,_bp
   0480 24 41              1452 	add	a,#0x41
   0482 F8                 1453 	mov	r0,a
   0483 A6 04              1454 	mov	@r0,ar4
   0485 08                 1455 	inc	r0
   0486 A6 05              1456 	mov	@r0,ar5
   0488 08                 1457 	inc	r0
   0489 A6 06              1458 	mov	@r0,ar6
                           1459 ;	../../core/loader/elfloader.c:244: if(addr == NULL) {
   048B D0 01              1460 	pop	ar1
   048D E5*00              1461 	mov	a,_bp
   048F 24 41              1462 	add	a,#0x41
   0491 F8                 1463 	mov	r0,a
   0492 E6                 1464 	mov	a,@r0
   0493 08                 1465 	inc	r0
   0494 46                 1466 	orl	a,@r0
   0495 70 5D              1467 	jnz	00111$
                           1468 ;	../../core/loader/elfloader.c:246: addr = find_local_symbol(fd, name, symtab, symtabsize, strtab);
   0497 E5*00              1469 	mov	a,_bp
   0499 24 4F              1470 	add	a,#0x4f
   049B F8                 1471 	mov	r0,a
   049C 86 06              1472 	mov	ar6,@r0
   049E 7D 00              1473 	mov	r5,#0x00
   04A0 7C 40              1474 	mov	r4,#0x40
   04A2 C0 01              1475 	push	ar1
   04A4 E5*00              1476 	mov	a,_bp
   04A6 24 F1              1477 	add	a,#0xf1
   04A8 F8                 1478 	mov	r0,a
   04A9 E6                 1479 	mov	a,@r0
   04AA C0 E0              1480 	push	acc
   04AC 08                 1481 	inc	r0
   04AD E6                 1482 	mov	a,@r0
   04AE C0 E0              1483 	push	acc
   04B0 E5*00              1484 	mov	a,_bp
   04B2 24 ED              1485 	add	a,#0xed
   04B4 F8                 1486 	mov	r0,a
   04B5 E6                 1487 	mov	a,@r0
   04B6 C0 E0              1488 	push	acc
   04B8 08                 1489 	inc	r0
   04B9 E6                 1490 	mov	a,@r0
   04BA C0 E0              1491 	push	acc
   04BC E5*00              1492 	mov	a,_bp
   04BE 24 EF              1493 	add	a,#0xef
   04C0 F8                 1494 	mov	r0,a
   04C1 E6                 1495 	mov	a,@r0
   04C2 C0 E0              1496 	push	acc
   04C4 08                 1497 	inc	r0
   04C5 E6                 1498 	mov	a,@r0
   04C6 C0 E0              1499 	push	acc
   04C8 C0 06              1500 	push	ar6
   04CA C0 05              1501 	push	ar5
   04CC C0 04              1502 	push	ar4
   04CE A8*00              1503 	mov	r0,_bp
   04D0 08                 1504 	inc	r0
   04D1 86 82              1505 	mov	dpl,@r0
   04D3 08                 1506 	inc	r0
   04D4 86 83              1507 	mov	dph,@r0
   04D6 12s00r65           1508 	lcall	_find_local_symbol
   04D9 AC 82              1509 	mov	r4,dpl
   04DB AD 83              1510 	mov	r5,dph
   04DD AE F0              1511 	mov	r6,b
   04DF E5 81              1512 	mov	a,sp
   04E1 24 F7              1513 	add	a,#0xf7
   04E3 F5 81              1514 	mov	sp,a
   04E5 D0 01              1515 	pop	ar1
   04E7 E5*00              1516 	mov	a,_bp
   04E9 24 41              1517 	add	a,#0x41
   04EB F8                 1518 	mov	r0,a
   04EC A6 04              1519 	mov	@r0,ar4
   04EE 08                 1520 	inc	r0
   04EF A6 05              1521 	mov	@r0,ar5
   04F1 08                 1522 	inc	r0
   04F2 A6 06              1523 	mov	@r0,ar6
                           1524 ;	../../core/loader/elfloader.c:247: PRINTF("found address %p\n", addr);
   04F4                    1525 00111$:
                           1526 ;	../../core/loader/elfloader.c:249: if(addr == NULL) {
   04F4 E5*00              1527 	mov	a,_bp
   04F6 24 41              1528 	add	a,#0x41
   04F8 F8                 1529 	mov	r0,a
   04F9 E6                 1530 	mov	a,@r0
   04FA 08                 1531 	inc	r0
   04FB 46                 1532 	orl	a,@r0
   04FC 60 03              1533 	jz	00185$
   04FE 02s06r6E           1534 	ljmp	00142$
   0501                    1535 00185$:
                           1536 ;	../../core/loader/elfloader.c:250: if(s.st_shndx == bss.number) {
   0501 87 05              1537 	mov	ar5,@r1
   0503 09                 1538 	inc	r1
   0504 87 02              1539 	mov	ar2,@r1
   0506 19                 1540 	dec	r1
   0507 90s00r21           1541 	mov	dptr,#_bss
   050A E0                 1542 	movx	a,@dptr
   050B FC                 1543 	mov	r4,a
   050C 7B 00              1544 	mov	r3,#0x00
   050E ED                 1545 	mov	a,r5
   050F B5 04 0D           1546 	cjne	a,ar4,00124$
   0512 EA                 1547 	mov	a,r2
   0513 B5 03 09           1548 	cjne	a,ar3,00124$
                           1549 ;	../../core/loader/elfloader.c:251: sect = &bss;
   0516 7Ar21              1550 	mov	r2,#_bss
   0518 7Bs00              1551 	mov	r3,#(_bss >> 8)
   051A 7C 00              1552 	mov	r4,#0x00
   051C 02s05rA0           1553 	ljmp	00125$
   051F                    1554 00124$:
                           1555 ;	../../core/loader/elfloader.c:252: } else if(s.st_shndx == data.number) {
   051F C0 01              1556 	push	ar1
   0521 90s00r27           1557 	mov	dptr,#_data
   0524 E0                 1558 	movx	a,@dptr
   0525 FE                 1559 	mov	r6,a
   0526 7F 00              1560 	mov	r7,#0x00
   0528 ED                 1561 	mov	a,r5
   0529 B5 06 06           1562 	cjne	a,ar6,00188$
   052C EA                 1563 	mov	a,r2
   052D B5 07 02           1564 	cjne	a,ar7,00188$
   0530 80 04              1565 	sjmp	00189$
   0532                    1566 00188$:
   0532 D0 01              1567 	pop	ar1
   0534 80 0A              1568 	sjmp	00121$
   0536                    1569 00189$:
   0536 D0 01              1570 	pop	ar1
                           1571 ;	../../core/loader/elfloader.c:253: sect = &data;
   0538 7Ar27              1572 	mov	r2,#_data
   053A 7Bs00              1573 	mov	r3,#(_data >> 8)
   053C 7C 00              1574 	mov	r4,#0x00
   053E 80 60              1575 	sjmp	00125$
   0540                    1576 00121$:
                           1577 ;	../../core/loader/elfloader.c:254: } else if(s.st_shndx == rodata.number) {
   0540 90s00r2D           1578 	mov	dptr,#_rodata
   0543 E0                 1579 	movx	a,@dptr
   0544 FF                 1580 	mov	r7,a
   0545 7E 00              1581 	mov	r6,#0x00
   0547 ED                 1582 	mov	a,r5
   0548 B5 07 0C           1583 	cjne	a,ar7,00118$
   054B EA                 1584 	mov	a,r2
   054C B5 06 08           1585 	cjne	a,ar6,00118$
                           1586 ;	../../core/loader/elfloader.c:255: sect = &rodata;
   054F 7Ar2D              1587 	mov	r2,#_rodata
   0551 7Bs00              1588 	mov	r3,#(_rodata >> 8)
   0553 7C 00              1589 	mov	r4,#0x00
   0555 80 49              1590 	sjmp	00125$
   0557                    1591 00118$:
                           1592 ;	../../core/loader/elfloader.c:256: } else if(s.st_shndx == text.number) {
   0557 90s00r33           1593 	mov	dptr,#_text
   055A E0                 1594 	movx	a,@dptr
   055B FF                 1595 	mov	r7,a
   055C 7E 00              1596 	mov	r6,#0x00
   055E ED                 1597 	mov	a,r5
   055F B5 07 0C           1598 	cjne	a,ar7,00112$
   0562 EA                 1599 	mov	a,r2
   0563 B5 06 08           1600 	cjne	a,ar6,00112$
                           1601 ;	../../core/loader/elfloader.c:257: sect = &text;
   0566 7Ar33              1602 	mov	r2,#_text
   0568 7Bs00              1603 	mov	r3,#(_text >> 8)
   056A 7C 00              1604 	mov	r4,#0x00
                           1605 ;	../../core/loader/elfloader.c:259: PRINTF("elfloader unknown name: '%30s'\n", name);
   056C 80 32              1606 	sjmp	00125$
   056E                    1607 00112$:
                           1608 ;	../../core/loader/elfloader.c:260: memcpy(elfloader_unknown, name, sizeof(elfloader_unknown));
   056E E5*00              1609 	mov	a,_bp
   0570 24 4F              1610 	add	a,#0x4f
   0572 F8                 1611 	mov	r0,a
   0573 86 07              1612 	mov	ar7,@r0
   0575 7E 00              1613 	mov	r6,#0x00
   0577 7D 40              1614 	mov	r5,#0x40
   0579 74 1E              1615 	mov	a,#0x1E
   057B C0 E0              1616 	push	acc
   057D E4                 1617 	clr	a
   057E C0 E0              1618 	push	acc
   0580 C0 07              1619 	push	ar7
   0582 C0 06              1620 	push	ar6
   0584 C0 05              1621 	push	ar5
   0586 90s00r00           1622 	mov	dptr,#_elfloader_unknown
   0589 75 F0 00           1623 	mov	b,#0x00
   058C 12s00r00           1624 	lcall	_memcpy
   058F E5 81              1625 	mov	a,sp
   0591 24 FB              1626 	add	a,#0xfb
   0593 F5 81              1627 	mov	sp,a
                           1628 ;	../../core/loader/elfloader.c:261: elfloader_unknown[sizeof(elfloader_unknown) - 1] = 0;
   0595 90s00r1D           1629 	mov	dptr,#(_elfloader_unknown + 0x001d)
   0598 E4                 1630 	clr	a
   0599 F0                 1631 	movx	@dptr,a
                           1632 ;	../../core/loader/elfloader.c:262: return ELFLOADER_SYMBOL_NOT_FOUND;
   059A 90 00 05           1633 	mov	dptr,#0x0005
   059D 02s07r67           1634 	ljmp	00149$
   05A0                    1635 00125$:
                           1636 ;	../../core/loader/elfloader.c:264: addr = sect->address;
   05A0 74 03              1637 	mov	a,#0x03
   05A2 2A                 1638 	add	a,r2
   05A3 FD                 1639 	mov	r5,a
   05A4 E4                 1640 	clr	a
   05A5 3B                 1641 	addc	a,r3
   05A6 FE                 1642 	mov	r6,a
   05A7 8C 07              1643 	mov	ar7,r4
   05A9 8D 82              1644 	mov	dpl,r5
   05AB 8E 83              1645 	mov	dph,r6
   05AD 8F F0              1646 	mov	b,r7
   05AF 12s00r00           1647 	lcall	__gptrget
   05B2 FD                 1648 	mov	r5,a
   05B3 A3                 1649 	inc	dptr
   05B4 12s00r00           1650 	lcall	__gptrget
   05B7 FE                 1651 	mov	r6,a
   05B8 A3                 1652 	inc	dptr
   05B9 12s00r00           1653 	lcall	__gptrget
   05BC FF                 1654 	mov	r7,a
   05BD E5*00              1655 	mov	a,_bp
   05BF 24 41              1656 	add	a,#0x41
   05C1 F8                 1657 	mov	r0,a
   05C2 A6 05              1658 	mov	@r0,ar5
   05C4 08                 1659 	inc	r0
   05C5 A6 06              1660 	mov	@r0,ar6
   05C7 08                 1661 	inc	r0
   05C8 A6 07              1662 	mov	@r0,ar7
   05CA 02s06r6E           1663 	ljmp	00142$
   05CD                    1664 00141$:
                           1665 ;	../../core/loader/elfloader.c:267: if(s.st_shndx == bss.number) {
   05CD C0 01              1666 	push	ar1
   05CF E5*00              1667 	mov	a,_bp
   05D1 24 44              1668 	add	a,#0x44
   05D3 F8                 1669 	mov	r0,a
   05D4 86 00              1670 	mov	ar0,@r0
   05D6 86 04              1671 	mov	ar4,@r0
   05D8 08                 1672 	inc	r0
   05D9 86 03              1673 	mov	ar3,@r0
   05DB 18                 1674 	dec	r0
   05DC 90s00r21           1675 	mov	dptr,#_bss
   05DF E0                 1676 	movx	a,@dptr
   05E0 FD                 1677 	mov	r5,a
   05E1 7F 00              1678 	mov	r7,#0x00
   05E3 EC                 1679 	mov	a,r4
   05E4 B5 05 06           1680 	cjne	a,ar5,00194$
   05E7 EB                 1681 	mov	a,r3
   05E8 B5 07 02           1682 	cjne	a,ar7,00194$
   05EB 80 04              1683 	sjmp	00195$
   05ED                    1684 00194$:
   05ED D0 01              1685 	pop	ar1
   05EF 80 0A              1686 	sjmp	00138$
   05F1                    1687 00195$:
   05F1 D0 01              1688 	pop	ar1
                           1689 ;	../../core/loader/elfloader.c:268: sect = &bss;
   05F3 7Ar21              1690 	mov	r2,#_bss
   05F5 7Bs00              1691 	mov	r3,#(_bss >> 8)
   05F7 7C 00              1692 	mov	r4,#0x00
   05F9 80 4B              1693 	sjmp	00139$
   05FB                    1694 00138$:
                           1695 ;	../../core/loader/elfloader.c:269: } else if(s.st_shndx == data.number) {
   05FB 90s00r27           1696 	mov	dptr,#_data
   05FE E0                 1697 	movx	a,@dptr
   05FF FF                 1698 	mov	r7,a
   0600 7E 00              1699 	mov	r6,#0x00
   0602 EC                 1700 	mov	a,r4
   0603 B5 07 0C           1701 	cjne	a,ar7,00135$
   0606 EB                 1702 	mov	a,r3
   0607 B5 06 08           1703 	cjne	a,ar6,00135$
                           1704 ;	../../core/loader/elfloader.c:270: sect = &data;
   060A 7Ar27              1705 	mov	r2,#_data
   060C 7Bs00              1706 	mov	r3,#(_data >> 8)
   060E 7C 00              1707 	mov	r4,#0x00
   0610 80 34              1708 	sjmp	00139$
   0612                    1709 00135$:
                           1710 ;	../../core/loader/elfloader.c:271: } else if(s.st_shndx == rodata.number) {
   0612 90s00r2D           1711 	mov	dptr,#_rodata
   0615 E0                 1712 	movx	a,@dptr
   0616 FF                 1713 	mov	r7,a
   0617 7E 00              1714 	mov	r6,#0x00
   0619 EC                 1715 	mov	a,r4
   061A B5 07 0C           1716 	cjne	a,ar7,00132$
   061D EB                 1717 	mov	a,r3
   061E B5 06 08           1718 	cjne	a,ar6,00132$
                           1719 ;	../../core/loader/elfloader.c:272: sect = &rodata;
   0621 7Ar2D              1720 	mov	r2,#_rodata
   0623 7Bs00              1721 	mov	r3,#(_rodata >> 8)
   0625 7C 00              1722 	mov	r4,#0x00
   0627 80 1D              1723 	sjmp	00139$
   0629                    1724 00132$:
                           1725 ;	../../core/loader/elfloader.c:273: } else if(s.st_shndx == text.number) {
   0629 90s00r33           1726 	mov	dptr,#_text
   062C E0                 1727 	movx	a,@dptr
   062D FF                 1728 	mov	r7,a
   062E 7E 00              1729 	mov	r6,#0x00
   0630 EC                 1730 	mov	a,r4
   0631 B5 07 0C           1731 	cjne	a,ar7,00129$
   0634 EB                 1732 	mov	a,r3
   0635 B5 06 08           1733 	cjne	a,ar6,00129$
                           1734 ;	../../core/loader/elfloader.c:274: sect = &text;
   0638 7Ar33              1735 	mov	r2,#_text
   063A 7Bs00              1736 	mov	r3,#(_text >> 8)
   063C 7C 00              1737 	mov	r4,#0x00
   063E 80 06              1738 	sjmp	00139$
   0640                    1739 00129$:
                           1740 ;	../../core/loader/elfloader.c:276: return ELFLOADER_SEGMENT_NOT_FOUND;
   0640 90 00 06           1741 	mov	dptr,#0x0006
   0643 02s07r67           1742 	ljmp	00149$
   0646                    1743 00139$:
                           1744 ;	../../core/loader/elfloader.c:279: addr = sect->address;
   0646 74 03              1745 	mov	a,#0x03
   0648 2A                 1746 	add	a,r2
   0649 FA                 1747 	mov	r2,a
   064A E4                 1748 	clr	a
   064B 3B                 1749 	addc	a,r3
   064C FB                 1750 	mov	r3,a
   064D 8A 82              1751 	mov	dpl,r2
   064F 8B 83              1752 	mov	dph,r3
   0651 8C F0              1753 	mov	b,r4
   0653 12s00r00           1754 	lcall	__gptrget
   0656 FA                 1755 	mov	r2,a
   0657 A3                 1756 	inc	dptr
   0658 12s00r00           1757 	lcall	__gptrget
   065B FB                 1758 	mov	r3,a
   065C A3                 1759 	inc	dptr
   065D 12s00r00           1760 	lcall	__gptrget
   0660 FC                 1761 	mov	r4,a
   0661 E5*00              1762 	mov	a,_bp
   0663 24 41              1763 	add	a,#0x41
   0665 F8                 1764 	mov	r0,a
   0666 A6 02              1765 	mov	@r0,ar2
   0668 08                 1766 	inc	r0
   0669 A6 03              1767 	mov	@r0,ar3
   066B 08                 1768 	inc	r0
   066C A6 04              1769 	mov	@r0,ar4
   066E                    1770 00142$:
                           1771 ;	../../core/loader/elfloader.c:282: if(!using_relas) {
   066E E5*00              1772 	mov	a,_bp
   0670 24 EC              1773 	add	a,#0xec
   0672 F8                 1774 	mov	r0,a
   0673 E6                 1775 	mov	a,@r0
   0674 60 03              1776 	jz	00202$
   0676 02s06rFB           1777 	ljmp	00144$
   0679                    1778 00202$:
                           1779 ;	../../core/loader/elfloader.c:284: seek_read(fd, sectionaddr + rela.r_offset, (char *)&rela.r_addend, 4);
   0679 C0 01              1780 	push	ar1
   067B E5*00              1781 	mov	a,_bp
   067D 24 03              1782 	add	a,#0x03
   067F F8                 1783 	mov	r0,a
   0680 24 08              1784 	add	a,#0x08
   0682 FF                 1785 	mov	r7,a
   0683 C0 00              1786 	push	ar0
   0685 E5*00              1787 	mov	a,_bp
   0687 24 4B              1788 	add	a,#0x4b
   0689 F8                 1789 	mov	r0,a
   068A A6 07              1790 	mov	@r0,ar7
   068C 08                 1791 	inc	r0
   068D 76 00              1792 	mov	@r0,#0x00
   068F 08                 1793 	inc	r0
   0690 76 40              1794 	mov	@r0,#0x40
   0692 D0 00              1795 	pop	ar0
   0694 C0 01              1796 	push	ar1
   0696 E5*00              1797 	mov	a,_bp
   0698 24 50              1798 	add	a,#0x50
   069A F9                 1799 	mov	r1,a
   069B E6                 1800 	mov	a,@r0
   069C F7                 1801 	mov	@r1,a
   069D 08                 1802 	inc	r0
   069E E6                 1803 	mov	a,@r0
   069F 09                 1804 	inc	r1
   06A0 F7                 1805 	mov	@r1,a
   06A1 08                 1806 	inc	r0
   06A2 E6                 1807 	mov	a,@r0
   06A3 09                 1808 	inc	r1
   06A4 F7                 1809 	mov	@r1,a
   06A5 08                 1810 	inc	r0
   06A6 E6                 1811 	mov	a,@r0
   06A7 09                 1812 	inc	r1
   06A8 F7                 1813 	mov	@r1,a
   06A9 18                 1814 	dec	r0
   06AA 18                 1815 	dec	r0
   06AB 18                 1816 	dec	r0
   06AC E5*00              1817 	mov	a,_bp
   06AE 24 F8              1818 	add	a,#0xf8
   06B0 F8                 1819 	mov	r0,a
   06B1 86 04              1820 	mov	ar4,@r0
   06B3 08                 1821 	inc	r0
   06B4 86 05              1822 	mov	ar5,@r0
   06B6 E4                 1823 	clr	a
   06B7 FE                 1824 	mov	r6,a
   06B8 FF                 1825 	mov	r7,a
   06B9 E5*00              1826 	mov	a,_bp
   06BB 24 50              1827 	add	a,#0x50
   06BD F8                 1828 	mov	r0,a
   06BE E6                 1829 	mov	a,@r0
   06BF 2C                 1830 	add	a,r4
   06C0 FC                 1831 	mov	r4,a
   06C1 08                 1832 	inc	r0
   06C2 E6                 1833 	mov	a,@r0
   06C3 3D                 1834 	addc	a,r5
   06C4 FD                 1835 	mov	r5,a
   06C5 08                 1836 	inc	r0
   06C6 E6                 1837 	mov	a,@r0
   06C7 3E                 1838 	addc	a,r6
   06C8 08                 1839 	inc	r0
   06C9 E6                 1840 	mov	a,@r0
   06CA 3F                 1841 	addc	a,r7
   06CB 74 04              1842 	mov	a,#0x04
   06CD C0 E0              1843 	push	acc
   06CF E4                 1844 	clr	a
   06D0 C0 E0              1845 	push	acc
   06D2 E5*00              1846 	mov	a,_bp
   06D4 24 4B              1847 	add	a,#0x4b
   06D6 F8                 1848 	mov	r0,a
   06D7 E6                 1849 	mov	a,@r0
   06D8 C0 E0              1850 	push	acc
   06DA 08                 1851 	inc	r0
   06DB E6                 1852 	mov	a,@r0
   06DC C0 E0              1853 	push	acc
   06DE 08                 1854 	inc	r0
   06DF E6                 1855 	mov	a,@r0
   06E0 C0 E0              1856 	push	acc
   06E2 C0 04              1857 	push	ar4
   06E4 C0 05              1858 	push	ar5
   06E6 A8*00              1859 	mov	r0,_bp
   06E8 08                 1860 	inc	r0
   06E9 86 82              1861 	mov	dpl,@r0
   06EB 08                 1862 	inc	r0
   06EC 86 83              1863 	mov	dph,@r0
   06EE 12s00r00           1864 	lcall	_seek_read
   06F1 E5 81              1865 	mov	a,sp
   06F3 24 F9              1866 	add	a,#0xf9
   06F5 F5 81              1867 	mov	sp,a
   06F7 D0 01              1868 	pop	ar1
                           1869 ;	../../core/loader/elfloader.c:289: return ELFLOADER_OK;
   06F9 D0 01              1870 	pop	ar1
                           1871 ;	../../core/loader/elfloader.c:284: seek_read(fd, sectionaddr + rela.r_offset, (char *)&rela.r_addend, 4);
   06FB                    1872 00144$:
                           1873 ;	../../core/loader/elfloader.c:287: elfloader_arch_relocate(fd, sectionaddr, sectionbase, &rela, addr);
   06FB E5*00              1874 	mov	a,_bp
   06FD 24 03              1875 	add	a,#0x03
   06FF FF                 1876 	mov	r7,a
   0700 7E 00              1877 	mov	r6,#0x00
   0702 7D 40              1878 	mov	r5,#0x40
   0704 C0 01              1879 	push	ar1
   0706 E5*00              1880 	mov	a,_bp
   0708 24 41              1881 	add	a,#0x41
   070A F8                 1882 	mov	r0,a
   070B E6                 1883 	mov	a,@r0
   070C C0 E0              1884 	push	acc
   070E 08                 1885 	inc	r0
   070F E6                 1886 	mov	a,@r0
   0710 C0 E0              1887 	push	acc
   0712 08                 1888 	inc	r0
   0713 E6                 1889 	mov	a,@r0
   0714 C0 E0              1890 	push	acc
   0716 C0 07              1891 	push	ar7
   0718 C0 06              1892 	push	ar6
   071A C0 05              1893 	push	ar5
   071C E5*00              1894 	mov	a,_bp
   071E 24 F5              1895 	add	a,#0xf5
   0720 F8                 1896 	mov	r0,a
   0721 E6                 1897 	mov	a,@r0
   0722 C0 E0              1898 	push	acc
   0724 08                 1899 	inc	r0
   0725 E6                 1900 	mov	a,@r0
   0726 C0 E0              1901 	push	acc
   0728 08                 1902 	inc	r0
   0729 E6                 1903 	mov	a,@r0
   072A C0 E0              1904 	push	acc
   072C E5*00              1905 	mov	a,_bp
   072E 24 F8              1906 	add	a,#0xf8
   0730 F8                 1907 	mov	r0,a
   0731 E6                 1908 	mov	a,@r0
   0732 C0 E0              1909 	push	acc
   0734 08                 1910 	inc	r0
   0735 E6                 1911 	mov	a,@r0
   0736 C0 E0              1912 	push	acc
   0738 A8*00              1913 	mov	r0,_bp
   073A 08                 1914 	inc	r0
   073B 86 82              1915 	mov	dpl,@r0
   073D 08                 1916 	inc	r0
   073E 86 83              1917 	mov	dph,@r0
   0740 12s00r00           1918 	lcall	_elfloader_arch_relocate
   0743 E5 81              1919 	mov	a,sp
   0745 24 F5              1920 	add	a,#0xf5
   0747 F5 81              1921 	mov	sp,a
   0749 D0 01              1922 	pop	ar1
                           1923 ;	../../core/loader/elfloader.c:234: for(a = section; a < section + size; a += rel_size) {
   074B E5*00              1924 	mov	a,_bp
   074D 24 0F              1925 	add	a,#0x0f
   074F F8                 1926 	mov	r0,a
   0750 86 04              1927 	mov	ar4,@r0
   0752 08                 1928 	inc	r0
   0753 86 05              1929 	mov	ar5,@r0
   0755 E5*00              1930 	mov	a,_bp
   0757 24 21              1931 	add	a,#0x21
   0759 F8                 1932 	mov	r0,a
   075A EC                 1933 	mov	a,r4
   075B 26                 1934 	add	a,@r0
   075C F6                 1935 	mov	@r0,a
   075D ED                 1936 	mov	a,r5
   075E 08                 1937 	inc	r0
   075F 36                 1938 	addc	a,@r0
   0760 F6                 1939 	mov	@r0,a
   0761 02s02rFA           1940 	ljmp	00145$
   0764                    1941 00148$:
                           1942 ;	../../core/loader/elfloader.c:289: return ELFLOADER_OK;
   0764 90 00 00           1943 	mov	dptr,#0x0000
   0767                    1944 00149$:
   0767 85*00 81           1945 	mov	sp,_bp
   076A D0*00              1946 	pop	_bp
   076C 22                 1947 	ret
                           1948 ;------------------------------------------------------------
                           1949 ;Allocation info for local variables in function 'find_program_processes'
                           1950 ;------------------------------------------------------------
                           1951 ;symtab                    Allocated to stack - _bp -4
                           1952 ;size                      Allocated to stack - _bp -6
                           1953 ;strtab                    Allocated to stack - _bp -8
                           1954 ;fd                        Allocated to stack - _bp +1
                           1955 ;s                         Allocated to stack - _bp +3
                           1956 ;a                         Allocated to registers r4 r5 
                           1957 ;name                      Allocated to stack - _bp +19
                           1958 ;sloc0                     Allocated to stack - _bp +49
                           1959 ;sloc1                     Allocated to stack - _bp +51
                           1960 ;sloc2                     Allocated to stack - _bp +55
                           1961 ;sloc3                     Allocated to stack - _bp +56
                           1962 ;sloc4                     Allocated to stack - _bp +59
                           1963 ;------------------------------------------------------------
                           1964 ;	../../core/loader/elfloader.c:293: find_program_processes(int fd,
                           1965 ;	-----------------------------------------
                           1966 ;	 function find_program_processes
                           1967 ;	-----------------------------------------
   076D                    1968 _find_program_processes:
   076D C0*00              1969 	push	_bp
   076F 85 81*00           1970 	mov	_bp,sp
   0772 C0 82              1971 	push	dpl
   0774 C0 83              1972 	push	dph
   0776 E5 81              1973 	mov	a,sp
   0778 24 39              1974 	add	a,#0x39
   077A F5 81              1975 	mov	sp,a
                           1976 ;	../../core/loader/elfloader.c:301: for(a = symtab; a < symtab + size; a += sizeof(s)) {
   077C E5*00              1977 	mov	a,_bp
   077E 24 FC              1978 	add	a,#0xfc
   0780 F8                 1979 	mov	r0,a
   0781 86 04              1980 	mov	ar4,@r0
   0783 08                 1981 	inc	r0
   0784 86 05              1982 	mov	ar5,@r0
   0786 E5*00              1983 	mov	a,_bp
   0788 24 3B              1984 	add	a,#0x3b
   078A F8                 1985 	mov	r0,a
   078B E5*00              1986 	mov	a,_bp
   078D 24 13              1987 	add	a,#0x13
   078F F6                 1988 	mov	@r0,a
   0790 E5*00              1989 	mov	a,_bp
   0792 24 3B              1990 	add	a,#0x3b
   0794 F8                 1991 	mov	r0,a
   0795 E5*00              1992 	mov	a,_bp
   0797 24 37              1993 	add	a,#0x37
   0799 F9                 1994 	mov	r1,a
   079A E6                 1995 	mov	a,@r0
   079B F7                 1996 	mov	@r1,a
   079C E5*00              1997 	mov	a,_bp
   079E 24 03              1998 	add	a,#0x03
   07A0 F9                 1999 	mov	r1,a
   07A1 E5*00              2000 	mov	a,_bp
   07A3 24 FA              2001 	add	a,#0xfa
   07A5 F8                 2002 	mov	r0,a
   07A6 C0 01              2003 	push	ar1
   07A8 E5*00              2004 	mov	a,_bp
   07AA 24 31              2005 	add	a,#0x31
   07AC F9                 2006 	mov	r1,a
   07AD E6                 2007 	mov	a,@r0
   07AE 2C                 2008 	add	a,r4
   07AF F7                 2009 	mov	@r1,a
   07B0 08                 2010 	inc	r0
   07B1 E6                 2011 	mov	a,@r0
   07B2 3D                 2012 	addc	a,r5
   07B3 09                 2013 	inc	r1
   07B4 F7                 2014 	mov	@r1,a
   07B5 D0 01              2015 	pop	ar1
   07B7                    2016 00105$:
   07B7 E5*00              2017 	mov	a,_bp
   07B9 24 31              2018 	add	a,#0x31
   07BB F8                 2019 	mov	r0,a
   07BC C3                 2020 	clr	c
   07BD EC                 2021 	mov	a,r4
   07BE 96                 2022 	subb	a,@r0
   07BF ED                 2023 	mov	a,r5
   07C0 08                 2024 	inc	r0
   07C1 96                 2025 	subb	a,@r0
   07C2 40 03              2026 	jc	00119$
   07C4 02s09r09           2027 	ljmp	00108$
   07C7                    2028 00119$:
                           2029 ;	../../core/loader/elfloader.c:302: seek_read(fd, a, (char *)&s, sizeof(s));
   07C7 E5*00              2030 	mov	a,_bp
   07C9 24 03              2031 	add	a,#0x03
   07CB FA                 2032 	mov	r2,a
   07CC 7E 00              2033 	mov	r6,#0x00
   07CE 7F 40              2034 	mov	r7,#0x40
   07D0 C0 05              2035 	push	ar5
   07D2 C0 04              2036 	push	ar4
   07D4 C0 01              2037 	push	ar1
   07D6 74 10              2038 	mov	a,#0x10
   07D8 C0 E0              2039 	push	acc
   07DA E4                 2040 	clr	a
   07DB C0 E0              2041 	push	acc
   07DD C0 02              2042 	push	ar2
   07DF C0 06              2043 	push	ar6
   07E1 C0 07              2044 	push	ar7
   07E3 C0 04              2045 	push	ar4
   07E5 C0 05              2046 	push	ar5
   07E7 A8*00              2047 	mov	r0,_bp
   07E9 08                 2048 	inc	r0
   07EA 86 82              2049 	mov	dpl,@r0
   07EC 08                 2050 	inc	r0
   07ED 86 83              2051 	mov	dph,@r0
   07EF 12s00r00           2052 	lcall	_seek_read
   07F2 E5 81              2053 	mov	a,sp
   07F4 24 F9              2054 	add	a,#0xf9
   07F6 F5 81              2055 	mov	sp,a
   07F8 D0 01              2056 	pop	ar1
   07FA D0 04              2057 	pop	ar4
   07FC D0 05              2058 	pop	ar5
                           2059 ;	../../core/loader/elfloader.c:304: if(s.st_name != 0) {
   07FE E5*00              2060 	mov	a,_bp
   0800 24 33              2061 	add	a,#0x33
   0802 F8                 2062 	mov	r0,a
   0803 E7                 2063 	mov	a,@r1
   0804 F6                 2064 	mov	@r0,a
   0805 09                 2065 	inc	r1
   0806 E7                 2066 	mov	a,@r1
   0807 08                 2067 	inc	r0
   0808 F6                 2068 	mov	@r0,a
   0809 09                 2069 	inc	r1
   080A E7                 2070 	mov	a,@r1
   080B 08                 2071 	inc	r0
   080C F6                 2072 	mov	@r0,a
   080D 09                 2073 	inc	r1
   080E E7                 2074 	mov	a,@r1
   080F 08                 2075 	inc	r0
   0810 F6                 2076 	mov	@r0,a
   0811 19                 2077 	dec	r1
   0812 19                 2078 	dec	r1
   0813 19                 2079 	dec	r1
   0814 E5*00              2080 	mov	a,_bp
   0816 24 33              2081 	add	a,#0x33
   0818 F8                 2082 	mov	r0,a
   0819 E6                 2083 	mov	a,@r0
   081A 08                 2084 	inc	r0
   081B 46                 2085 	orl	a,@r0
   081C 08                 2086 	inc	r0
   081D 46                 2087 	orl	a,@r0
   081E 08                 2088 	inc	r0
   081F 46                 2089 	orl	a,@r0
   0820 70 03              2090 	jnz	00120$
   0822 02s08rFF           2091 	ljmp	00107$
   0825                    2092 00120$:
                           2093 ;	../../core/loader/elfloader.c:305: seek_read(fd, strtab + s.st_name, name, sizeof(name));
   0825 C0 01              2094 	push	ar1
   0827 E5*00              2095 	mov	a,_bp
   0829 24 3B              2096 	add	a,#0x3b
   082B F8                 2097 	mov	r0,a
   082C C0 01              2098 	push	ar1
   082E E5*00              2099 	mov	a,_bp
   0830 24 38              2100 	add	a,#0x38
   0832 F9                 2101 	mov	r1,a
   0833 E6                 2102 	mov	a,@r0
   0834 F7                 2103 	mov	@r1,a
   0835 09                 2104 	inc	r1
   0836 77 00              2105 	mov	@r1,#0x00
   0838 09                 2106 	inc	r1
   0839 77 40              2107 	mov	@r1,#0x40
   083B D0 01              2108 	pop	ar1
   083D E5*00              2109 	mov	a,_bp
   083F 24 F8              2110 	add	a,#0xf8
   0841 F8                 2111 	mov	r0,a
   0842 86 02              2112 	mov	ar2,@r0
   0844 08                 2113 	inc	r0
   0845 86 03              2114 	mov	ar3,@r0
   0847 E4                 2115 	clr	a
   0848 FE                 2116 	mov	r6,a
   0849 FF                 2117 	mov	r7,a
   084A E5*00              2118 	mov	a,_bp
   084C 24 33              2119 	add	a,#0x33
   084E F8                 2120 	mov	r0,a
   084F E6                 2121 	mov	a,@r0
   0850 2A                 2122 	add	a,r2
   0851 FA                 2123 	mov	r2,a
   0852 08                 2124 	inc	r0
   0853 E6                 2125 	mov	a,@r0
   0854 3B                 2126 	addc	a,r3
   0855 FB                 2127 	mov	r3,a
   0856 08                 2128 	inc	r0
   0857 E6                 2129 	mov	a,@r0
   0858 3E                 2130 	addc	a,r6
   0859 08                 2131 	inc	r0
   085A E6                 2132 	mov	a,@r0
   085B 3F                 2133 	addc	a,r7
   085C C0 05              2134 	push	ar5
   085E C0 04              2135 	push	ar4
   0860 C0 01              2136 	push	ar1
   0862 74 1E              2137 	mov	a,#0x1E
   0864 C0 E0              2138 	push	acc
   0866 E4                 2139 	clr	a
   0867 C0 E0              2140 	push	acc
   0869 E5*00              2141 	mov	a,_bp
   086B 24 38              2142 	add	a,#0x38
   086D F8                 2143 	mov	r0,a
   086E E6                 2144 	mov	a,@r0
   086F C0 E0              2145 	push	acc
   0871 08                 2146 	inc	r0
   0872 E6                 2147 	mov	a,@r0
   0873 C0 E0              2148 	push	acc
   0875 08                 2149 	inc	r0
   0876 E6                 2150 	mov	a,@r0
   0877 C0 E0              2151 	push	acc
   0879 C0 02              2152 	push	ar2
   087B C0 03              2153 	push	ar3
   087D A8*00              2154 	mov	r0,_bp
   087F 08                 2155 	inc	r0
   0880 86 82              2156 	mov	dpl,@r0
   0882 08                 2157 	inc	r0
   0883 86 83              2158 	mov	dph,@r0
   0885 12s00r00           2159 	lcall	_seek_read
   0888 E5 81              2160 	mov	a,sp
   088A 24 F9              2161 	add	a,#0xf9
   088C F5 81              2162 	mov	sp,a
                           2163 ;	../../core/loader/elfloader.c:306: if(strcmp(name, "autostart_processes") == 0) {
   088E E5*00              2164 	mov	a,_bp
   0890 24 37              2165 	add	a,#0x37
   0892 F8                 2166 	mov	r0,a
   0893 86 02              2167 	mov	ar2,@r0
   0895 7E 00              2168 	mov	r6,#0x00
   0897 7F 40              2169 	mov	r7,#0x40
   0899 74r07              2170 	mov	a,#__str_0
   089B C0 E0              2171 	push	acc
   089D 74s00              2172 	mov	a,#(__str_0 >> 8)
   089F C0 E0              2173 	push	acc
   08A1 74 80              2174 	mov	a,#0x80
   08A3 C0 E0              2175 	push	acc
   08A5 8A 82              2176 	mov	dpl,r2
   08A7 8E 83              2177 	mov	dph,r6
   08A9 8F F0              2178 	mov	b,r7
   08AB 12s00r00           2179 	lcall	_strcmp
   08AE AE 82              2180 	mov	r6,dpl
   08B0 AF 83              2181 	mov	r7,dph
   08B2 15 81              2182 	dec	sp
   08B4 15 81              2183 	dec	sp
   08B6 15 81              2184 	dec	sp
   08B8 D0 01              2185 	pop	ar1
   08BA D0 04              2186 	pop	ar4
   08BC D0 05              2187 	pop	ar5
   08BE D0 01              2188 	pop	ar1
   08C0 EE                 2189 	mov	a,r6
   08C1 4F                 2190 	orl	a,r7
   08C2 70 3B              2191 	jnz	00107$
                           2192 ;	../../core/loader/elfloader.c:307: return &data.address[s.st_value];
   08C4 90s00r2A           2193 	mov	dptr,#(_data + 0x0003)
   08C7 E5*00              2194 	mov	a,_bp
   08C9 24 38              2195 	add	a,#0x38
   08CB F8                 2196 	mov	r0,a
   08CC E0                 2197 	movx	a,@dptr
   08CD F6                 2198 	mov	@r0,a
   08CE A3                 2199 	inc	dptr
   08CF E0                 2200 	movx	a,@dptr
   08D0 08                 2201 	inc	r0
   08D1 F6                 2202 	mov	@r0,a
   08D2 A3                 2203 	inc	dptr
   08D3 E0                 2204 	movx	a,@dptr
   08D4 08                 2205 	inc	r0
   08D5 F6                 2206 	mov	@r0,a
   08D6 E5*00              2207 	mov	a,_bp
   08D8 24 03              2208 	add	a,#0x03
   08DA 24 04              2209 	add	a,#0x04
   08DC F8                 2210 	mov	r0,a
   08DD 86 02              2211 	mov	ar2,@r0
   08DF 08                 2212 	inc	r0
   08E0 86 03              2213 	mov	ar3,@r0
   08E2 08                 2214 	inc	r0
   08E3 86 06              2215 	mov	ar6,@r0
   08E5 08                 2216 	inc	r0
   08E6 86 07              2217 	mov	ar7,@r0
   08E8 E5*00              2218 	mov	a,_bp
   08EA 24 38              2219 	add	a,#0x38
   08EC F8                 2220 	mov	r0,a
   08ED EA                 2221 	mov	a,r2
   08EE 26                 2222 	add	a,@r0
   08EF FA                 2223 	mov	r2,a
   08F0 EB                 2224 	mov	a,r3
   08F1 08                 2225 	inc	r0
   08F2 36                 2226 	addc	a,@r0
   08F3 FB                 2227 	mov	r3,a
   08F4 08                 2228 	inc	r0
   08F5 86 06              2229 	mov	ar6,@r0
   08F7 8A 82              2230 	mov	dpl,r2
   08F9 8B 83              2231 	mov	dph,r3
   08FB 8E F0              2232 	mov	b,r6
   08FD 80 10              2233 	sjmp	00109$
   08FF                    2234 00107$:
                           2235 ;	../../core/loader/elfloader.c:301: for(a = symtab; a < symtab + size; a += sizeof(s)) {
   08FF 74 10              2236 	mov	a,#0x10
   0901 2C                 2237 	add	a,r4
   0902 FC                 2238 	mov	r4,a
   0903 E4                 2239 	clr	a
   0904 3D                 2240 	addc	a,r5
   0905 FD                 2241 	mov	r5,a
   0906 02s07rB7           2242 	ljmp	00105$
   0909                    2243 00108$:
                           2244 ;	../../core/loader/elfloader.c:311: return NULL;
   0909 90 00 00           2245 	mov	dptr,#0x0000
   090C 75 F0 00           2246 	mov	b,#0x00
   090F                    2247 00109$:
   090F 85*00 81           2248 	mov	sp,_bp
   0912 D0*00              2249 	pop	_bp
   0914 22                 2250 	ret
                           2251 ;------------------------------------------------------------
                           2252 ;Allocation info for local variables in function 'elfloader_init'
                           2253 ;------------------------------------------------------------
                           2254 ;	../../core/loader/elfloader.c:316: elfloader_init(void)
                           2255 ;	-----------------------------------------
                           2256 ;	 function elfloader_init
                           2257 ;	-----------------------------------------
   0915                    2258 _elfloader_init:
                           2259 ;	../../core/loader/elfloader.c:318: elfloader_autostart_processes = NULL;
   0915 90s00r1E           2260 	mov	dptr,#_elfloader_autostart_processes
   0918 E4                 2261 	clr	a
   0919 F0                 2262 	movx	@dptr,a
   091A A3                 2263 	inc	dptr
   091B F0                 2264 	movx	@dptr,a
   091C A3                 2265 	inc	dptr
   091D F0                 2266 	movx	@dptr,a
   091E 22                 2267 	ret
                           2268 ;------------------------------------------------------------
                           2269 ;Allocation info for local variables in function 'elfloader_load'
                           2270 ;------------------------------------------------------------
                           2271 ;fd                        Allocated to stack - _bp +1
                           2272 ;ehdr                      Allocated to stack - _bp +3
                           2273 ;shdr                      Allocated to stack - _bp +55
                           2274 ;strtable                  Allocated to stack - _bp +95
                           2275 ;strs                      Allocated to stack - _bp +135
                           2276 ;shdrptr                   Allocated to stack - _bp +137
                           2277 ;nameptr                   Allocated to registers r3 r4 
                           2278 ;name                      Allocated to stack - _bp +139
                           2279 ;i                         Allocated to stack - _bp +151
                           2280 ;shdrnum                   Allocated to stack - _bp +153
                           2281 ;shdrsize                  Allocated to stack - _bp +155
                           2282 ;using_relas               Allocated to stack - _bp +157
                           2283 ;textoff                   Allocated to stack - _bp +158
                           2284 ;textsize                  Allocated to stack - _bp +160
                           2285 ;textrelaoff               Allocated to registers r2 r5 
                           2286 ;textrelasize              Allocated to stack - _bp +192
                           2287 ;dataoff                   Allocated to stack - _bp +162
                           2288 ;datasize                  Allocated to stack - _bp +190
                           2289 ;datarelaoff               Allocated to stack - _bp +172
                           2290 ;datarelasize              Allocated to stack - _bp +188
                           2291 ;rodataoff                 Allocated to stack - _bp +164
                           2292 ;rodatasize                Allocated to stack - _bp +186
                           2293 ;rodatarelaoff             Allocated to stack - _bp +174
                           2294 ;rodatarelasize            Allocated to stack - _bp +178
                           2295 ;symtaboff                 Allocated to stack - _bp +166
                           2296 ;symtabsize                Allocated to stack - _bp +168
                           2297 ;strtaboff                 Allocated to stack - _bp +170
                           2298 ;strtabsize                Allocated to stack - _bp +182
                           2299 ;bsssize                   Allocated to stack - _bp +176
                           2300 ;process                   Allocated to registers r5 r6 r7 
                           2301 ;ret                       Allocated to registers r6 r7 
                           2302 ;sloc0                     Allocated to stack - _bp +172
                           2303 ;sloc1                     Allocated to stack - _bp +174
                           2304 ;sloc2                     Allocated to stack - _bp +176
                           2305 ;sloc3                     Allocated to stack - _bp +178
                           2306 ;sloc4                     Allocated to stack - _bp +181
                           2307 ;sloc5                     Allocated to stack - _bp +182
                           2308 ;sloc6                     Allocated to stack - _bp +186
                           2309 ;sloc7                     Allocated to stack - _bp +188
                           2310 ;sloc8                     Allocated to stack - _bp +190
                           2311 ;sloc9                     Allocated to stack - _bp +192
                           2312 ;sloc10                    Allocated to stack - _bp +221
                           2313 ;sloc11                    Allocated to stack - _bp +194
                           2314 ;sloc12                    Allocated to stack - _bp +195
                           2315 ;sloc13                    Allocated to stack - _bp +196
                           2316 ;sloc14                    Allocated to stack - _bp +197
                           2317 ;sloc15                    Allocated to stack - _bp +198
                           2318 ;sloc16                    Allocated to stack - _bp +199
                           2319 ;sloc17                    Allocated to stack - _bp +200
                           2320 ;sloc18                    Allocated to stack - _bp +201
                           2321 ;sloc19                    Allocated to stack - _bp +202
                           2322 ;sloc20                    Allocated to stack - _bp +203
                           2323 ;sloc21                    Allocated to stack - _bp +204
                           2324 ;sloc22                    Allocated to stack - _bp +205
                           2325 ;sloc23                    Allocated to stack - _bp +206
                           2326 ;sloc24                    Allocated to stack - _bp +207
                           2327 ;sloc25                    Allocated to stack - _bp +208
                           2328 ;sloc26                    Allocated to stack - _bp +209
                           2329 ;sloc27                    Allocated to stack - _bp +210
                           2330 ;sloc28                    Allocated to stack - _bp +211
                           2331 ;sloc29                    Allocated to stack - _bp +212
                           2332 ;sloc30                    Allocated to stack - _bp +213
                           2333 ;sloc31                    Allocated to stack - _bp +214
                           2334 ;sloc32                    Allocated to stack - _bp +215
                           2335 ;sloc33                    Allocated to stack - _bp +216
                           2336 ;sloc34                    Allocated to stack - _bp +217
                           2337 ;sloc35                    Allocated to stack - _bp +218
                           2338 ;sloc36                    Allocated to stack - _bp +219
                           2339 ;sloc37                    Allocated to stack - _bp +220
                           2340 ;sloc38                    Allocated to stack - _bp +221
                           2341 ;sloc39                    Allocated to stack - _bp +222
                           2342 ;sloc40                    Allocated to stack - _bp +223
                           2343 ;sloc41                    Allocated to stack - _bp +224
                           2344 ;sloc42                    Allocated to stack - _bp +225
                           2345 ;sloc43                    Allocated to stack - _bp +226
                           2346 ;sloc44                    Allocated to stack - _bp +227
                           2347 ;------------------------------------------------------------
                           2348 ;	../../core/loader/elfloader.c:338: elfloader_load(int fd)
                           2349 ;	-----------------------------------------
                           2350 ;	 function elfloader_load
                           2351 ;	-----------------------------------------
   091F                    2352 _elfloader_load:
   091F C0*00              2353 	push	_bp
   0921 85 81*00           2354 	mov	_bp,sp
   0924 C0 82              2355 	push	dpl
   0926 C0 83              2356 	push	dph
   0928 E5 81              2357 	mov	a,sp
   092A 24 E4              2358 	add	a,#0xE4
   092C F5 81              2359 	mov	sp,a
                           2360 ;	../../core/loader/elfloader.c:351: unsigned char using_relas = -1;
   092E E5*00              2361 	mov	a,_bp
   0930 24 9D              2362 	add	a,#0x9d
   0932 F8                 2363 	mov	r0,a
   0933 76 FF              2364 	mov	@r0,#0xFF
                           2365 ;	../../core/loader/elfloader.c:352: unsigned short textoff = 0, textsize, textrelaoff = 0, textrelasize;
   0935 E5*00              2366 	mov	a,_bp
   0937 24 9E              2367 	add	a,#0x9e
   0939 F8                 2368 	mov	r0,a
   093A E4                 2369 	clr	a
   093B F6                 2370 	mov	@r0,a
   093C 08                 2371 	inc	r0
   093D F6                 2372 	mov	@r0,a
                           2373 ;	../../core/loader/elfloader.c:353: unsigned short dataoff = 0, datasize, datarelaoff = 0, datarelasize;
   093E E4                 2374 	clr	a
   093F FA                 2375 	mov	r2,a
   0940 FD                 2376 	mov	r5,a
   0941 E5*00              2377 	mov	a,_bp
   0943 24 A2              2378 	add	a,#0xa2
   0945 F8                 2379 	mov	r0,a
   0946 E4                 2380 	clr	a
   0947 F6                 2381 	mov	@r0,a
   0948 08                 2382 	inc	r0
   0949 F6                 2383 	mov	@r0,a
   094A E5*00              2384 	mov	a,_bp
   094C 24 AC              2385 	add	a,#0xac
   094E F8                 2386 	mov	r0,a
   094F E4                 2387 	clr	a
   0950 F6                 2388 	mov	@r0,a
   0951 08                 2389 	inc	r0
   0952 F6                 2390 	mov	@r0,a
                           2391 ;	../../core/loader/elfloader.c:354: unsigned short rodataoff = 0, rodatasize, rodatarelaoff = 0, rodatarelasize;
   0953 E5*00              2392 	mov	a,_bp
   0955 24 A4              2393 	add	a,#0xa4
   0957 F8                 2394 	mov	r0,a
   0958 E4                 2395 	clr	a
   0959 F6                 2396 	mov	@r0,a
   095A 08                 2397 	inc	r0
   095B F6                 2398 	mov	@r0,a
   095C E5*00              2399 	mov	a,_bp
   095E 24 AE              2400 	add	a,#0xae
   0960 F8                 2401 	mov	r0,a
   0961 E4                 2402 	clr	a
   0962 F6                 2403 	mov	@r0,a
   0963 08                 2404 	inc	r0
   0964 F6                 2405 	mov	@r0,a
                           2406 ;	../../core/loader/elfloader.c:355: unsigned short symtaboff = 0, symtabsize;
   0965 E5*00              2407 	mov	a,_bp
   0967 24 A6              2408 	add	a,#0xa6
   0969 F8                 2409 	mov	r0,a
   096A E4                 2410 	clr	a
   096B F6                 2411 	mov	@r0,a
   096C 08                 2412 	inc	r0
   096D F6                 2413 	mov	@r0,a
                           2414 ;	../../core/loader/elfloader.c:356: unsigned short strtaboff = 0, strtabsize;
   096E E5*00              2415 	mov	a,_bp
   0970 24 AA              2416 	add	a,#0xaa
   0972 F8                 2417 	mov	r0,a
   0973 E4                 2418 	clr	a
   0974 F6                 2419 	mov	@r0,a
   0975 08                 2420 	inc	r0
   0976 F6                 2421 	mov	@r0,a
                           2422 ;	../../core/loader/elfloader.c:357: unsigned short bsssize = 0;
   0977 E5*00              2423 	mov	a,_bp
   0979 24 B0              2424 	add	a,#0xb0
   097B F8                 2425 	mov	r0,a
   097C E4                 2426 	clr	a
   097D F6                 2427 	mov	@r0,a
   097E 08                 2428 	inc	r0
   097F F6                 2429 	mov	@r0,a
                           2430 ;	../../core/loader/elfloader.c:362: elfloader_unknown[0] = 0;
   0980 90s00r00           2431 	mov	dptr,#_elfloader_unknown
   0983 E4                 2432 	clr	a
   0984 F0                 2433 	movx	@dptr,a
                           2434 ;	../../core/loader/elfloader.c:365: seek_read(fd, 0, (char *)&ehdr, sizeof(ehdr));
   0985 E5*00              2435 	mov	a,_bp
   0987 24 03              2436 	add	a,#0x03
   0989 FB                 2437 	mov	r3,a
   098A 7C 00              2438 	mov	r4,#0x00
   098C 7F 40              2439 	mov	r7,#0x40
   098E C0 05              2440 	push	ar5
   0990 C0 02              2441 	push	ar2
   0992 74 34              2442 	mov	a,#0x34
   0994 C0 E0              2443 	push	acc
   0996 E4                 2444 	clr	a
   0997 C0 E0              2445 	push	acc
   0999 C0 03              2446 	push	ar3
   099B C0 04              2447 	push	ar4
   099D C0 07              2448 	push	ar7
   099F E4                 2449 	clr	a
   09A0 C0 E0              2450 	push	acc
   09A2 C0 E0              2451 	push	acc
   09A4 A8*00              2452 	mov	r0,_bp
   09A6 08                 2453 	inc	r0
   09A7 86 82              2454 	mov	dpl,@r0
   09A9 08                 2455 	inc	r0
   09AA 86 83              2456 	mov	dph,@r0
   09AC 12s00r00           2457 	lcall	_seek_read
   09AF E5 81              2458 	mov	a,sp
   09B1 24 F9              2459 	add	a,#0xf9
   09B3 F5 81              2460 	mov	sp,a
                           2461 ;	../../core/loader/elfloader.c:370: if(memcmp(ehdr.e_ident, elf_magic_header, sizeof(elf_magic_header)) != 0) {
   09B5 E5*00              2462 	mov	a,_bp
   09B7 24 03              2463 	add	a,#0x03
   09B9 FF                 2464 	mov	r7,a
   09BA 7E 00              2465 	mov	r6,#0x00
   09BC 7C 40              2466 	mov	r4,#0x40
   09BE 74 07              2467 	mov	a,#0x07
   09C0 C0 E0              2468 	push	acc
   09C2 E4                 2469 	clr	a
   09C3 C0 E0              2470 	push	acc
   09C5 74r00              2471 	mov	a,#_elf_magic_header
   09C7 C0 E0              2472 	push	acc
   09C9 74s00              2473 	mov	a,#(_elf_magic_header >> 8)
   09CB C0 E0              2474 	push	acc
   09CD 74 80              2475 	mov	a,#0x80
   09CF C0 E0              2476 	push	acc
   09D1 8F 82              2477 	mov	dpl,r7
   09D3 8E 83              2478 	mov	dph,r6
   09D5 8C F0              2479 	mov	b,r4
   09D7 12s00r00           2480 	lcall	_memcmp
   09DA AE 82              2481 	mov	r6,dpl
   09DC AF 83              2482 	mov	r7,dph
   09DE E5 81              2483 	mov	a,sp
   09E0 24 FB              2484 	add	a,#0xfb
   09E2 F5 81              2485 	mov	sp,a
   09E4 D0 02              2486 	pop	ar2
   09E6 D0 05              2487 	pop	ar5
   09E8 EE                 2488 	mov	a,r6
   09E9 4F                 2489 	orl	a,r7
   09EA 60 06              2490 	jz	00104$
                           2491 ;	../../core/loader/elfloader.c:372: return ELFLOADER_BAD_ELF_HEADER;
   09EC 90 00 01           2492 	mov	dptr,#0x0001
   09EF 02s18r78           2493 	ljmp	00207$
   09F2                    2494 00104$:
                           2495 ;	../../core/loader/elfloader.c:376: shdrptr = ehdr.e_shoff;
   09F2 C0 02              2496 	push	ar2
   09F4 C0 05              2497 	push	ar5
   09F6 E5*00              2498 	mov	a,_bp
   09F8 24 03              2499 	add	a,#0x03
   09FA 24 20              2500 	add	a,#0x20
   09FC F9                 2501 	mov	r1,a
   09FD 87 03              2502 	mov	ar3,@r1
   09FF 09                 2503 	inc	r1
   0A00 87 04              2504 	mov	ar4,@r1
   0A02 09                 2505 	inc	r1
   0A03 87 06              2506 	mov	ar6,@r1
   0A05 09                 2507 	inc	r1
   0A06 87 07              2508 	mov	ar7,@r1
   0A08 E5*00              2509 	mov	a,_bp
   0A0A 24 89              2510 	add	a,#0x89
   0A0C F8                 2511 	mov	r0,a
   0A0D A6 03              2512 	mov	@r0,ar3
   0A0F 08                 2513 	inc	r0
   0A10 A6 04              2514 	mov	@r0,ar4
                           2515 ;	../../core/loader/elfloader.c:377: seek_read(fd, shdrptr, (char *)&shdr, sizeof(shdr));
   0A12 E5*00              2516 	mov	a,_bp
   0A14 24 37              2517 	add	a,#0x37
   0A16 FD                 2518 	mov	r5,a
   0A17 7E 00              2519 	mov	r6,#0x00
   0A19 7F 40              2520 	mov	r7,#0x40
   0A1B C0 05              2521 	push	ar5
   0A1D C0 02              2522 	push	ar2
   0A1F 74 28              2523 	mov	a,#0x28
   0A21 C0 E0              2524 	push	acc
   0A23 E4                 2525 	clr	a
   0A24 C0 E0              2526 	push	acc
   0A26 C0 05              2527 	push	ar5
   0A28 C0 06              2528 	push	ar6
   0A2A C0 07              2529 	push	ar7
   0A2C E5*00              2530 	mov	a,_bp
   0A2E 24 89              2531 	add	a,#0x89
   0A30 F8                 2532 	mov	r0,a
   0A31 E6                 2533 	mov	a,@r0
   0A32 C0 E0              2534 	push	acc
   0A34 08                 2535 	inc	r0
   0A35 E6                 2536 	mov	a,@r0
   0A36 C0 E0              2537 	push	acc
   0A38 A8*00              2538 	mov	r0,_bp
   0A3A 08                 2539 	inc	r0
   0A3B 86 82              2540 	mov	dpl,@r0
   0A3D 08                 2541 	inc	r0
   0A3E 86 83              2542 	mov	dph,@r0
   0A40 12s00r00           2543 	lcall	_seek_read
   0A43 E5 81              2544 	mov	a,sp
   0A45 24 F9              2545 	add	a,#0xf9
   0A47 F5 81              2546 	mov	sp,a
   0A49 D0 02              2547 	pop	ar2
   0A4B D0 05              2548 	pop	ar5
                           2549 ;	../../core/loader/elfloader.c:380: shdrsize = ehdr.e_shentsize;
   0A4D E5*00              2550 	mov	a,_bp
   0A4F 24 03              2551 	add	a,#0x03
   0A51 FF                 2552 	mov	r7,a
   0A52 24 2E              2553 	add	a,#0x2E
   0A54 F9                 2554 	mov	r1,a
   0A55 87 05              2555 	mov	ar5,@r1
   0A57 09                 2556 	inc	r1
   0A58 87 06              2557 	mov	ar6,@r1
   0A5A E5*00              2558 	mov	a,_bp
   0A5C 24 9B              2559 	add	a,#0x9b
   0A5E F8                 2560 	mov	r0,a
   0A5F A6 05              2561 	mov	@r0,ar5
   0A61 08                 2562 	inc	r0
   0A62 A6 06              2563 	mov	@r0,ar6
                           2564 ;	../../core/loader/elfloader.c:381: shdrnum = ehdr.e_shnum;
   0A64 74 30              2565 	mov	a,#0x30
   0A66 2F                 2566 	add	a,r7
   0A67 F9                 2567 	mov	r1,a
   0A68 87 05              2568 	mov	ar5,@r1
   0A6A 09                 2569 	inc	r1
   0A6B 87 06              2570 	mov	ar6,@r1
   0A6D E5*00              2571 	mov	a,_bp
   0A6F 24 99              2572 	add	a,#0x99
   0A71 F8                 2573 	mov	r0,a
   0A72 A6 05              2574 	mov	@r0,ar5
   0A74 08                 2575 	inc	r0
   0A75 A6 06              2576 	mov	@r0,ar6
                           2577 ;	../../core/loader/elfloader.c:387: (char *)&strtable, sizeof(strtable));
   0A77 E5*00              2578 	mov	a,_bp
   0A79 24 5F              2579 	add	a,#0x5F
   0A7B FE                 2580 	mov	r6,a
   0A7C E5*00              2581 	mov	a,_bp
   0A7E 24 B2              2582 	add	a,#0xb2
   0A80 F8                 2583 	mov	r0,a
   0A81 A6 06              2584 	mov	@r0,ar6
   0A83 08                 2585 	inc	r0
   0A84 76 00              2586 	mov	@r0,#0x00
   0A86 08                 2587 	inc	r0
   0A87 76 40              2588 	mov	@r0,#0x40
                           2589 ;	../../core/loader/elfloader.c:386: seek_read(fd, ehdr.e_shoff + shdrsize * ehdr.e_shstrndx,
   0A89 74 20              2590 	mov	a,#0x20
   0A8B 2F                 2591 	add	a,r7
   0A8C F9                 2592 	mov	r1,a
   0A8D E5*00              2593 	mov	a,_bp
   0A8F 24 B6              2594 	add	a,#0xb6
   0A91 F8                 2595 	mov	r0,a
   0A92 E7                 2596 	mov	a,@r1
   0A93 F6                 2597 	mov	@r0,a
   0A94 09                 2598 	inc	r1
   0A95 E7                 2599 	mov	a,@r1
   0A96 08                 2600 	inc	r0
   0A97 F6                 2601 	mov	@r0,a
   0A98 09                 2602 	inc	r1
   0A99 E7                 2603 	mov	a,@r1
   0A9A 08                 2604 	inc	r0
   0A9B F6                 2605 	mov	@r0,a
   0A9C 09                 2606 	inc	r1
   0A9D E7                 2607 	mov	a,@r1
   0A9E 08                 2608 	inc	r0
   0A9F F6                 2609 	mov	@r0,a
   0AA0 74 32              2610 	mov	a,#0x32
   0AA2 2F                 2611 	add	a,r7
   0AA3 F9                 2612 	mov	r1,a
   0AA4 87 06              2613 	mov	ar6,@r1
   0AA6 09                 2614 	inc	r1
   0AA7 87 07              2615 	mov	ar7,@r1
   0AA9 C0 05              2616 	push	ar5
   0AAB C0 02              2617 	push	ar2
   0AAD C0 06              2618 	push	ar6
   0AAF C0 07              2619 	push	ar7
   0AB1 E5*00              2620 	mov	a,_bp
   0AB3 24 9B              2621 	add	a,#0x9b
   0AB5 F8                 2622 	mov	r0,a
   0AB6 86 82              2623 	mov	dpl,@r0
   0AB8 08                 2624 	inc	r0
   0AB9 86 83              2625 	mov	dph,@r0
   0ABB 12s00r00           2626 	lcall	__mulint
   0ABE AE 82              2627 	mov	r6,dpl
   0AC0 AF 83              2628 	mov	r7,dph
   0AC2 15 81              2629 	dec	sp
   0AC4 15 81              2630 	dec	sp
   0AC6 D0 02              2631 	pop	ar2
   0AC8 D0 05              2632 	pop	ar5
   0ACA E4                 2633 	clr	a
   0ACB FD                 2634 	mov	r5,a
   0ACC FA                 2635 	mov	r2,a
   0ACD E5*00              2636 	mov	a,_bp
   0ACF 24 B6              2637 	add	a,#0xb6
   0AD1 F8                 2638 	mov	r0,a
   0AD2 EE                 2639 	mov	a,r6
   0AD3 26                 2640 	add	a,@r0
   0AD4 FE                 2641 	mov	r6,a
   0AD5 EF                 2642 	mov	a,r7
   0AD6 08                 2643 	inc	r0
   0AD7 36                 2644 	addc	a,@r0
   0AD8 FF                 2645 	mov	r7,a
   0AD9 ED                 2646 	mov	a,r5
   0ADA 08                 2647 	inc	r0
   0ADB 36                 2648 	addc	a,@r0
   0ADC FD                 2649 	mov	r5,a
   0ADD EA                 2650 	mov	a,r2
   0ADE 08                 2651 	inc	r0
   0ADF 36                 2652 	addc	a,@r0
   0AE0 FA                 2653 	mov	r2,a
   0AE1 C0 05              2654 	push	ar5
   0AE3 C0 02              2655 	push	ar2
   0AE5 74 28              2656 	mov	a,#0x28
   0AE7 C0 E0              2657 	push	acc
   0AE9 E4                 2658 	clr	a
   0AEA C0 E0              2659 	push	acc
   0AEC E5*00              2660 	mov	a,_bp
   0AEE 24 B2              2661 	add	a,#0xb2
   0AF0 F8                 2662 	mov	r0,a
   0AF1 E6                 2663 	mov	a,@r0
   0AF2 C0 E0              2664 	push	acc
   0AF4 08                 2665 	inc	r0
   0AF5 E6                 2666 	mov	a,@r0
   0AF6 C0 E0              2667 	push	acc
   0AF8 08                 2668 	inc	r0
   0AF9 E6                 2669 	mov	a,@r0
   0AFA C0 E0              2670 	push	acc
   0AFC C0 06              2671 	push	ar6
   0AFE C0 07              2672 	push	ar7
   0B00 A8*00              2673 	mov	r0,_bp
   0B02 08                 2674 	inc	r0
   0B03 86 82              2675 	mov	dpl,@r0
   0B05 08                 2676 	inc	r0
   0B06 86 83              2677 	mov	dph,@r0
   0B08 12s00r00           2678 	lcall	_seek_read
   0B0B E5 81              2679 	mov	a,sp
   0B0D 24 F9              2680 	add	a,#0xf9
   0B0F F5 81              2681 	mov	sp,a
   0B11 D0 02              2682 	pop	ar2
   0B13 D0 05              2683 	pop	ar5
                           2684 ;	../../core/loader/elfloader.c:392: strs = strtable.sh_offset;
   0B15 E5*00              2685 	mov	a,_bp
   0B17 24 5F              2686 	add	a,#0x5F
   0B19 24 10              2687 	add	a,#0x10
   0B1B F9                 2688 	mov	r1,a
   0B1C 87 02              2689 	mov	ar2,@r1
   0B1E 09                 2690 	inc	r1
   0B1F 87 05              2691 	mov	ar5,@r1
   0B21 09                 2692 	inc	r1
   0B22 87 06              2693 	mov	ar6,@r1
   0B24 09                 2694 	inc	r1
   0B25 87 07              2695 	mov	ar7,@r1
   0B27 E5*00              2696 	mov	a,_bp
   0B29 24 87              2697 	add	a,#0x87
   0B2B F8                 2698 	mov	r0,a
   0B2C A6 02              2699 	mov	@r0,ar2
   0B2E 08                 2700 	inc	r0
   0B2F A6 05              2701 	mov	@r0,ar5
                           2702 ;	../../core/loader/elfloader.c:415: rodatasize = rodatarelasize = symtabsize = strtabsize = 0;
   0B31 E5*00              2703 	mov	a,_bp
   0B33 24 B6              2704 	add	a,#0xb6
   0B35 F8                 2705 	mov	r0,a
   0B36 E4                 2706 	clr	a
   0B37 F6                 2707 	mov	@r0,a
   0B38 08                 2708 	inc	r0
   0B39 F6                 2709 	mov	@r0,a
   0B3A E5*00              2710 	mov	a,_bp
   0B3C 24 A8              2711 	add	a,#0xa8
   0B3E F8                 2712 	mov	r0,a
   0B3F E4                 2713 	clr	a
   0B40 F6                 2714 	mov	@r0,a
   0B41 08                 2715 	inc	r0
   0B42 F6                 2716 	mov	@r0,a
   0B43 E5*00              2717 	mov	a,_bp
   0B45 24 B2              2718 	add	a,#0xb2
   0B47 F8                 2719 	mov	r0,a
   0B48 E4                 2720 	clr	a
   0B49 F6                 2721 	mov	@r0,a
   0B4A 08                 2722 	inc	r0
   0B4B F6                 2723 	mov	@r0,a
   0B4C E5*00              2724 	mov	a,_bp
   0B4E 24 BA              2725 	add	a,#0xba
   0B50 F8                 2726 	mov	r0,a
   0B51 E4                 2727 	clr	a
   0B52 F6                 2728 	mov	@r0,a
   0B53 08                 2729 	inc	r0
   0B54 F6                 2730 	mov	@r0,a
   0B55 E5*00              2731 	mov	a,_bp
   0B57 24 BC              2732 	add	a,#0xbc
   0B59 F8                 2733 	mov	r0,a
   0B5A E4                 2734 	clr	a
   0B5B F6                 2735 	mov	@r0,a
   0B5C 08                 2736 	inc	r0
   0B5D F6                 2737 	mov	@r0,a
   0B5E E5*00              2738 	mov	a,_bp
   0B60 24 BE              2739 	add	a,#0xbe
   0B62 F8                 2740 	mov	r0,a
   0B63 E4                 2741 	clr	a
   0B64 F6                 2742 	mov	@r0,a
   0B65 08                 2743 	inc	r0
   0B66 F6                 2744 	mov	@r0,a
   0B67 E5*00              2745 	mov	a,_bp
   0B69 24 C0              2746 	add	a,#0xc0
   0B6B F8                 2747 	mov	r0,a
   0B6C E4                 2748 	clr	a
   0B6D F6                 2749 	mov	@r0,a
   0B6E 08                 2750 	inc	r0
   0B6F F6                 2751 	mov	@r0,a
   0B70 E5*00              2752 	mov	a,_bp
   0B72 24 A0              2753 	add	a,#0xa0
   0B74 F8                 2754 	mov	r0,a
   0B75 E4                 2755 	clr	a
   0B76 F6                 2756 	mov	@r0,a
   0B77 08                 2757 	inc	r0
   0B78 F6                 2758 	mov	@r0,a
                           2759 ;	../../core/loader/elfloader.c:417: bss.number = data.number = rodata.number = text.number = -1;
   0B79 90s00r33           2760 	mov	dptr,#_text
   0B7C 74 FF              2761 	mov	a,#0xFF
   0B7E F0                 2762 	movx	@dptr,a
   0B7F 90s00r2D           2763 	mov	dptr,#_rodata
   0B82 74 FF              2764 	mov	a,#0xFF
   0B84 F0                 2765 	movx	@dptr,a
   0B85 90s00r27           2766 	mov	dptr,#_data
   0B88 74 FF              2767 	mov	a,#0xFF
   0B8A F0                 2768 	movx	@dptr,a
   0B8B 90s00r21           2769 	mov	dptr,#_bss
   0B8E 74 FF              2770 	mov	a,#0xFF
   0B90 F0                 2771 	movx	@dptr,a
                           2772 ;	../../core/loader/elfloader.c:419: shdrptr = ehdr.e_shoff;
   0B91 E5*00              2773 	mov	a,_bp
   0B93 24 03              2774 	add	a,#0x03
   0B95 24 20              2775 	add	a,#0x20
   0B97 F9                 2776 	mov	r1,a
   0B98 87 02              2777 	mov	ar2,@r1
   0B9A 09                 2778 	inc	r1
   0B9B 87 05              2779 	mov	ar5,@r1
   0B9D 09                 2780 	inc	r1
   0B9E 87 06              2781 	mov	ar6,@r1
   0BA0 09                 2782 	inc	r1
   0BA1 87 07              2783 	mov	ar7,@r1
   0BA3 E5*00              2784 	mov	a,_bp
   0BA5 24 89              2785 	add	a,#0x89
   0BA7 F8                 2786 	mov	r0,a
   0BA8 A6 02              2787 	mov	@r0,ar2
   0BAA 08                 2788 	inc	r0
   0BAB A6 05              2789 	mov	@r0,ar5
                           2790 ;	../../core/loader/elfloader.c:420: for(i = 0; i < shdrnum; ++i) {
   0BAD E5*00              2791 	mov	a,_bp
   0BAF 24 B5              2792 	add	a,#0xb5
   0BB1 F8                 2793 	mov	r0,a
   0BB2 E5*00              2794 	mov	a,_bp
   0BB4 24 8B              2795 	add	a,#0x8B
   0BB6 F6                 2796 	mov	@r0,a
   0BB7 E5*00              2797 	mov	a,_bp
   0BB9 24 37              2798 	add	a,#0x37
   0BBB FF                 2799 	mov	r7,a
   0BBC 24 04              2800 	add	a,#0x04
   0BBE F8                 2801 	mov	r0,a
   0BBF E5*00              2802 	mov	a,_bp
   0BC1 24 B5              2803 	add	a,#0xb5
   0BC3 F9                 2804 	mov	r1,a
   0BC4 C0 00              2805 	push	ar0
   0BC6 E5*00              2806 	mov	a,_bp
   0BC8 24 C2              2807 	add	a,#0xc2
   0BCA F8                 2808 	mov	r0,a
   0BCB E7                 2809 	mov	a,@r1
   0BCC F6                 2810 	mov	@r0,a
   0BCD E5*00              2811 	mov	a,_bp
   0BCF 24 B5              2812 	add	a,#0xb5
   0BD1 F9                 2813 	mov	r1,a
   0BD2 E5*00              2814 	mov	a,_bp
   0BD4 24 C3              2815 	add	a,#0xc3
   0BD6 F8                 2816 	mov	r0,a
   0BD7 E7                 2817 	mov	a,@r1
   0BD8 F6                 2818 	mov	@r0,a
   0BD9 E5*00              2819 	mov	a,_bp
   0BDB 24 B5              2820 	add	a,#0xb5
   0BDD F9                 2821 	mov	r1,a
   0BDE E5*00              2822 	mov	a,_bp
   0BE0 24 C4              2823 	add	a,#0xc4
   0BE2 F8                 2824 	mov	r0,a
   0BE3 E7                 2825 	mov	a,@r1
   0BE4 F6                 2826 	mov	@r0,a
   0BE5 E5*00              2827 	mov	a,_bp
   0BE7 24 B5              2828 	add	a,#0xb5
   0BE9 F9                 2829 	mov	r1,a
   0BEA E5*00              2830 	mov	a,_bp
   0BEC 24 C5              2831 	add	a,#0xc5
   0BEE F8                 2832 	mov	r0,a
   0BEF E7                 2833 	mov	a,@r1
   0BF0 F6                 2834 	mov	@r0,a
   0BF1 E5*00              2835 	mov	a,_bp
   0BF3 24 B5              2836 	add	a,#0xb5
   0BF5 F9                 2837 	mov	r1,a
   0BF6 E5*00              2838 	mov	a,_bp
   0BF8 24 C6              2839 	add	a,#0xc6
   0BFA F8                 2840 	mov	r0,a
   0BFB E7                 2841 	mov	a,@r1
   0BFC F6                 2842 	mov	@r0,a
   0BFD E5*00              2843 	mov	a,_bp
   0BFF 24 B5              2844 	add	a,#0xb5
   0C01 F9                 2845 	mov	r1,a
   0C02 E5*00              2846 	mov	a,_bp
   0C04 24 C7              2847 	add	a,#0xc7
   0C06 F8                 2848 	mov	r0,a
   0C07 E7                 2849 	mov	a,@r1
   0C08 F6                 2850 	mov	@r0,a
   0C09 E5*00              2851 	mov	a,_bp
   0C0B 24 B5              2852 	add	a,#0xb5
   0C0D F9                 2853 	mov	r1,a
   0C0E E5*00              2854 	mov	a,_bp
   0C10 24 C8              2855 	add	a,#0xc8
   0C12 F8                 2856 	mov	r0,a
   0C13 E7                 2857 	mov	a,@r1
   0C14 F6                 2858 	mov	@r0,a
   0C15 E5*00              2859 	mov	a,_bp
   0C17 24 B5              2860 	add	a,#0xb5
   0C19 F9                 2861 	mov	r1,a
   0C1A E5*00              2862 	mov	a,_bp
   0C1C 24 C9              2863 	add	a,#0xc9
   0C1E F8                 2864 	mov	r0,a
   0C1F E7                 2865 	mov	a,@r1
   0C20 F6                 2866 	mov	@r0,a
   0C21 E5*00              2867 	mov	a,_bp
   0C23 24 B5              2868 	add	a,#0xb5
   0C25 F9                 2869 	mov	r1,a
   0C26 E5*00              2870 	mov	a,_bp
   0C28 24 CA              2871 	add	a,#0xca
   0C2A F8                 2872 	mov	r0,a
   0C2B E7                 2873 	mov	a,@r1
   0C2C F6                 2874 	mov	@r0,a
   0C2D E5*00              2875 	mov	a,_bp
   0C2F 24 CB              2876 	add	a,#0xcb
   0C31 F9                 2877 	mov	r1,a
   0C32 74 14              2878 	mov	a,#0x14
   0C34 2F                 2879 	add	a,r7
   0C35 F7                 2880 	mov	@r1,a
   0C36 E5*00              2881 	mov	a,_bp
   0C38 24 B5              2882 	add	a,#0xb5
   0C3A F9                 2883 	mov	r1,a
   0C3B E5*00              2884 	mov	a,_bp
   0C3D 24 CC              2885 	add	a,#0xcc
   0C3F F8                 2886 	mov	r0,a
   0C40 E7                 2887 	mov	a,@r1
   0C41 F6                 2888 	mov	@r0,a
   0C42 E5*00              2889 	mov	a,_bp
   0C44 24 CD              2890 	add	a,#0xcd
   0C46 F9                 2891 	mov	r1,a
   0C47 74 10              2892 	mov	a,#0x10
   0C49 2F                 2893 	add	a,r7
   0C4A F7                 2894 	mov	@r1,a
   0C4B E5*00              2895 	mov	a,_bp
   0C4D 24 CB              2896 	add	a,#0xcb
   0C4F F9                 2897 	mov	r1,a
   0C50 E5*00              2898 	mov	a,_bp
   0C52 24 CE              2899 	add	a,#0xce
   0C54 F8                 2900 	mov	r0,a
   0C55 E7                 2901 	mov	a,@r1
   0C56 F6                 2902 	mov	@r0,a
   0C57 E5*00              2903 	mov	a,_bp
   0C59 24 CD              2904 	add	a,#0xcd
   0C5B F9                 2905 	mov	r1,a
   0C5C E5*00              2906 	mov	a,_bp
   0C5E 24 CF              2907 	add	a,#0xcf
   0C60 F8                 2908 	mov	r0,a
   0C61 E7                 2909 	mov	a,@r1
   0C62 F6                 2910 	mov	@r0,a
   0C63 E5*00              2911 	mov	a,_bp
   0C65 24 CB              2912 	add	a,#0xcb
   0C67 F9                 2913 	mov	r1,a
   0C68 E5*00              2914 	mov	a,_bp
   0C6A 24 D0              2915 	add	a,#0xd0
   0C6C F8                 2916 	mov	r0,a
   0C6D E7                 2917 	mov	a,@r1
   0C6E F6                 2918 	mov	@r0,a
   0C6F E5*00              2919 	mov	a,_bp
   0C71 24 CD              2920 	add	a,#0xcd
   0C73 F9                 2921 	mov	r1,a
   0C74 E5*00              2922 	mov	a,_bp
   0C76 24 D1              2923 	add	a,#0xd1
   0C78 F8                 2924 	mov	r0,a
   0C79 E7                 2925 	mov	a,@r1
   0C7A F6                 2926 	mov	@r0,a
   0C7B E5*00              2927 	mov	a,_bp
   0C7D 24 CB              2928 	add	a,#0xcb
   0C7F F9                 2929 	mov	r1,a
   0C80 E5*00              2930 	mov	a,_bp
   0C82 24 D2              2931 	add	a,#0xd2
   0C84 F8                 2932 	mov	r0,a
   0C85 E7                 2933 	mov	a,@r1
   0C86 F6                 2934 	mov	@r0,a
   0C87 E5*00              2935 	mov	a,_bp
   0C89 24 CD              2936 	add	a,#0xcd
   0C8B F9                 2937 	mov	r1,a
   0C8C E5*00              2938 	mov	a,_bp
   0C8E 24 D3              2939 	add	a,#0xd3
   0C90 F8                 2940 	mov	r0,a
   0C91 E7                 2941 	mov	a,@r1
   0C92 F6                 2942 	mov	@r0,a
   0C93 E5*00              2943 	mov	a,_bp
   0C95 24 CB              2944 	add	a,#0xcb
   0C97 F9                 2945 	mov	r1,a
   0C98 E5*00              2946 	mov	a,_bp
   0C9A 24 D4              2947 	add	a,#0xd4
   0C9C F8                 2948 	mov	r0,a
   0C9D E7                 2949 	mov	a,@r1
   0C9E F6                 2950 	mov	@r0,a
   0C9F E5*00              2951 	mov	a,_bp
   0CA1 24 CD              2952 	add	a,#0xcd
   0CA3 F9                 2953 	mov	r1,a
   0CA4 E5*00              2954 	mov	a,_bp
   0CA6 24 D5              2955 	add	a,#0xd5
   0CA8 F8                 2956 	mov	r0,a
   0CA9 E7                 2957 	mov	a,@r1
   0CAA F6                 2958 	mov	@r0,a
   0CAB E5*00              2959 	mov	a,_bp
   0CAD 24 CB              2960 	add	a,#0xcb
   0CAF F9                 2961 	mov	r1,a
   0CB0 E5*00              2962 	mov	a,_bp
   0CB2 24 D6              2963 	add	a,#0xd6
   0CB4 F8                 2964 	mov	r0,a
   0CB5 E7                 2965 	mov	a,@r1
   0CB6 F6                 2966 	mov	@r0,a
   0CB7 E5*00              2967 	mov	a,_bp
   0CB9 24 CD              2968 	add	a,#0xcd
   0CBB F9                 2969 	mov	r1,a
   0CBC E5*00              2970 	mov	a,_bp
   0CBE 24 D7              2971 	add	a,#0xd7
   0CC0 F8                 2972 	mov	r0,a
   0CC1 E7                 2973 	mov	a,@r1
   0CC2 F6                 2974 	mov	@r0,a
   0CC3 E5*00              2975 	mov	a,_bp
   0CC5 24 CB              2976 	add	a,#0xcb
   0CC7 F9                 2977 	mov	r1,a
   0CC8 E5*00              2978 	mov	a,_bp
   0CCA 24 D8              2979 	add	a,#0xd8
   0CCC F8                 2980 	mov	r0,a
   0CCD E7                 2981 	mov	a,@r1
   0CCE F6                 2982 	mov	@r0,a
   0CCF E5*00              2983 	mov	a,_bp
   0CD1 24 CD              2984 	add	a,#0xcd
   0CD3 F9                 2985 	mov	r1,a
   0CD4 E5*00              2986 	mov	a,_bp
   0CD6 24 D9              2987 	add	a,#0xd9
   0CD8 F8                 2988 	mov	r0,a
   0CD9 E7                 2989 	mov	a,@r1
   0CDA F6                 2990 	mov	@r0,a
   0CDB E5*00              2991 	mov	a,_bp
   0CDD 24 CB              2992 	add	a,#0xcb
   0CDF F9                 2993 	mov	r1,a
   0CE0 E5*00              2994 	mov	a,_bp
   0CE2 24 DA              2995 	add	a,#0xda
   0CE4 F8                 2996 	mov	r0,a
   0CE5 E7                 2997 	mov	a,@r1
   0CE6 F6                 2998 	mov	@r0,a
   0CE7 E5*00              2999 	mov	a,_bp
   0CE9 24 CD              3000 	add	a,#0xcd
   0CEB F9                 3001 	mov	r1,a
   0CEC E5*00              3002 	mov	a,_bp
   0CEE 24 DB              3003 	add	a,#0xdb
   0CF0 F8                 3004 	mov	r0,a
   0CF1 E7                 3005 	mov	a,@r1
   0CF2 F6                 3006 	mov	@r0,a
   0CF3 E5*00              3007 	mov	a,_bp
   0CF5 24 CB              3008 	add	a,#0xcb
   0CF7 F9                 3009 	mov	r1,a
   0CF8 E5*00              3010 	mov	a,_bp
   0CFA 24 DC              3011 	add	a,#0xdc
   0CFC F8                 3012 	mov	r0,a
   0CFD E7                 3013 	mov	a,@r1
   0CFE F6                 3014 	mov	@r0,a
   0CFF E5*00              3015 	mov	a,_bp
   0D01 24 CD              3016 	add	a,#0xcd
   0D03 F9                 3017 	mov	r1,a
   0D04 E5*00              3018 	mov	a,_bp
   0D06 24 DD              3019 	add	a,#0xdd
   0D08 F8                 3020 	mov	r0,a
   0D09 E7                 3021 	mov	a,@r1
   0D0A F6                 3022 	mov	@r0,a
   0D0B E5*00              3023 	mov	a,_bp
   0D0D 24 CB              3024 	add	a,#0xcb
   0D0F F9                 3025 	mov	r1,a
   0D10 E5*00              3026 	mov	a,_bp
   0D12 24 DE              3027 	add	a,#0xde
   0D14 F8                 3028 	mov	r0,a
   0D15 E7                 3029 	mov	a,@r1
   0D16 F6                 3030 	mov	@r0,a
   0D17 E5*00              3031 	mov	a,_bp
   0D19 24 CD              3032 	add	a,#0xcd
   0D1B F9                 3033 	mov	r1,a
   0D1C E5*00              3034 	mov	a,_bp
   0D1E 24 DF              3035 	add	a,#0xdf
   0D20 F8                 3036 	mov	r0,a
   0D21 E7                 3037 	mov	a,@r1
   0D22 F6                 3038 	mov	@r0,a
   0D23 E5*00              3039 	mov	a,_bp
   0D25 24 CB              3040 	add	a,#0xcb
   0D27 F9                 3041 	mov	r1,a
   0D28 E5*00              3042 	mov	a,_bp
   0D2A 24 E0              3043 	add	a,#0xe0
   0D2C F8                 3044 	mov	r0,a
   0D2D E7                 3045 	mov	a,@r1
   0D2E F6                 3046 	mov	@r0,a
   0D2F E5*00              3047 	mov	a,_bp
   0D31 24 CD              3048 	add	a,#0xcd
   0D33 F9                 3049 	mov	r1,a
   0D34 E5*00              3050 	mov	a,_bp
   0D36 24 E1              3051 	add	a,#0xe1
   0D38 F8                 3052 	mov	r0,a
   0D39 E7                 3053 	mov	a,@r1
   0D3A F6                 3054 	mov	@r0,a
   0D3B E5*00              3055 	mov	a,_bp
   0D3D 24 CB              3056 	add	a,#0xcb
   0D3F F9                 3057 	mov	r1,a
   0D40 E5*00              3058 	mov	a,_bp
   0D42 24 E2              3059 	add	a,#0xe2
   0D44 F8                 3060 	mov	r0,a
   0D45 E7                 3061 	mov	a,@r1
   0D46 F6                 3062 	mov	@r0,a
   0D47 D0 00              3063 	pop	ar0
   0D49 E5*00              3064 	mov	a,_bp
   0D4B 24 97              3065 	add	a,#0x97
   0D4D F9                 3066 	mov	r1,a
   0D4E E4                 3067 	clr	a
   0D4F F7                 3068 	mov	@r1,a
   0D50 09                 3069 	inc	r1
   0D51 F7                 3070 	mov	@r1,a
                           3071 ;	../../core/loader/elfloader.c:586: return ELFLOADER_NO_STARTPOINT;
   0D52 D0 05              3072 	pop	ar5
   0D54 D0 02              3073 	pop	ar2
                           3074 ;	../../core/loader/elfloader.c:420: for(i = 0; i < shdrnum; ++i) {
   0D56                    3075 00203$:
   0D56 E5*00              3076 	mov	a,_bp
   0D58 24 97              3077 	add	a,#0x97
   0D5A F9                 3078 	mov	r1,a
   0D5B 87 06              3079 	mov	ar6,@r1
   0D5D 09                 3080 	inc	r1
   0D5E 87 07              3081 	mov	ar7,@r1
   0D60 E5*00              3082 	mov	a,_bp
   0D62 24 99              3083 	add	a,#0x99
   0D64 F9                 3084 	mov	r1,a
   0D65 C3                 3085 	clr	c
   0D66 EE                 3086 	mov	a,r6
   0D67 97                 3087 	subb	a,@r1
   0D68 EF                 3088 	mov	a,r7
   0D69 09                 3089 	inc	r1
   0D6A 97                 3090 	subb	a,@r1
   0D6B 40 03              3091 	jc	00261$
   0D6D 02s14r72           3092 	ljmp	00206$
   0D70                    3093 00261$:
                           3094 ;	../../core/loader/elfloader.c:422: seek_read(fd, shdrptr, (char *)&shdr, sizeof(shdr));
   0D70 C0 02              3095 	push	ar2
   0D72 C0 05              3096 	push	ar5
   0D74 E5*00              3097 	mov	a,_bp
   0D76 24 37              3098 	add	a,#0x37
   0D78 FD                 3099 	mov	r5,a
   0D79 7E 00              3100 	mov	r6,#0x00
   0D7B 7F 40              3101 	mov	r7,#0x40
   0D7D C0 05              3102 	push	ar5
   0D7F C0 02              3103 	push	ar2
   0D81 C0 00              3104 	push	ar0
   0D83 74 28              3105 	mov	a,#0x28
   0D85 C0 E0              3106 	push	acc
   0D87 E4                 3107 	clr	a
   0D88 C0 E0              3108 	push	acc
   0D8A C0 05              3109 	push	ar5
   0D8C C0 06              3110 	push	ar6
   0D8E C0 07              3111 	push	ar7
   0D90 E5*00              3112 	mov	a,_bp
   0D92 24 89              3113 	add	a,#0x89
   0D94 F9                 3114 	mov	r1,a
   0D95 E7                 3115 	mov	a,@r1
   0D96 C0 E0              3116 	push	acc
   0D98 09                 3117 	inc	r1
   0D99 E7                 3118 	mov	a,@r1
   0D9A C0 E0              3119 	push	acc
   0D9C A9*00              3120 	mov	r1,_bp
   0D9E 09                 3121 	inc	r1
   0D9F 87 82              3122 	mov	dpl,@r1
   0DA1 09                 3123 	inc	r1
   0DA2 87 83              3124 	mov	dph,@r1
   0DA4 12s00r00           3125 	lcall	_seek_read
   0DA7 E5 81              3126 	mov	a,sp
   0DA9 24 F9              3127 	add	a,#0xf9
   0DAB F5 81              3128 	mov	sp,a
   0DAD D0 00              3129 	pop	ar0
   0DAF D0 02              3130 	pop	ar2
   0DB1 D0 05              3131 	pop	ar5
                           3132 ;	../../core/loader/elfloader.c:425: nameptr = strs + shdr.sh_name;
   0DB3 E5*00              3133 	mov	a,_bp
   0DB5 24 37              3134 	add	a,#0x37
   0DB7 F9                 3135 	mov	r1,a
   0DB8 C0 00              3136 	push	ar0
   0DBA E5*00              3137 	mov	a,_bp
   0DBC 24 E3              3138 	add	a,#0xe3
   0DBE F8                 3139 	mov	r0,a
   0DBF E7                 3140 	mov	a,@r1
   0DC0 F6                 3141 	mov	@r0,a
   0DC1 09                 3142 	inc	r1
   0DC2 E7                 3143 	mov	a,@r1
   0DC3 08                 3144 	inc	r0
   0DC4 F6                 3145 	mov	@r0,a
   0DC5 09                 3146 	inc	r1
   0DC6 E7                 3147 	mov	a,@r1
   0DC7 08                 3148 	inc	r0
   0DC8 F6                 3149 	mov	@r0,a
   0DC9 09                 3150 	inc	r1
   0DCA E7                 3151 	mov	a,@r1
   0DCB 08                 3152 	inc	r0
   0DCC F6                 3153 	mov	@r0,a
   0DCD 19                 3154 	dec	r1
   0DCE 19                 3155 	dec	r1
   0DCF 19                 3156 	dec	r1
   0DD0 D0 00              3157 	pop	ar0
   0DD2 E5*00              3158 	mov	a,_bp
   0DD4 24 87              3159 	add	a,#0x87
   0DD6 F9                 3160 	mov	r1,a
   0DD7 87 03              3161 	mov	ar3,@r1
   0DD9 09                 3162 	inc	r1
   0DDA 87 04              3163 	mov	ar4,@r1
   0DDC E4                 3164 	clr	a
   0DDD FE                 3165 	mov	r6,a
   0DDE FF                 3166 	mov	r7,a
   0DDF E5*00              3167 	mov	a,_bp
   0DE1 24 E3              3168 	add	a,#0xe3
   0DE3 F9                 3169 	mov	r1,a
   0DE4 E7                 3170 	mov	a,@r1
   0DE5 2B                 3171 	add	a,r3
   0DE6 FB                 3172 	mov	r3,a
   0DE7 09                 3173 	inc	r1
   0DE8 E7                 3174 	mov	a,@r1
   0DE9 3C                 3175 	addc	a,r4
   0DEA FC                 3176 	mov	r4,a
   0DEB 09                 3177 	inc	r1
   0DEC E7                 3178 	mov	a,@r1
   0DED 3E                 3179 	addc	a,r6
   0DEE 09                 3180 	inc	r1
   0DEF E7                 3181 	mov	a,@r1
   0DF0 3F                 3182 	addc	a,r7
                           3183 ;	../../core/loader/elfloader.c:426: seek_read(fd, nameptr, name, sizeof(name));
   0DF1 E5*00              3184 	mov	a,_bp
   0DF3 24 B5              3185 	add	a,#0xb5
   0DF5 F9                 3186 	mov	r1,a
   0DF6 87 05              3187 	mov	ar5,@r1
   0DF8 7E 00              3188 	mov	r6,#0x00
   0DFA 7F 40              3189 	mov	r7,#0x40
   0DFC C0 05              3190 	push	ar5
   0DFE C0 02              3191 	push	ar2
   0E00 C0 00              3192 	push	ar0
   0E02 74 0C              3193 	mov	a,#0x0C
   0E04 C0 E0              3194 	push	acc
   0E06 E4                 3195 	clr	a
   0E07 C0 E0              3196 	push	acc
   0E09 C0 05              3197 	push	ar5
   0E0B C0 06              3198 	push	ar6
   0E0D C0 07              3199 	push	ar7
   0E0F C0 03              3200 	push	ar3
   0E11 C0 04              3201 	push	ar4
   0E13 A9*00              3202 	mov	r1,_bp
   0E15 09                 3203 	inc	r1
   0E16 87 82              3204 	mov	dpl,@r1
   0E18 09                 3205 	inc	r1
   0E19 87 83              3206 	mov	dph,@r1
   0E1B 12s00r00           3207 	lcall	_seek_read
   0E1E E5 81              3208 	mov	a,sp
   0E20 24 F9              3209 	add	a,#0xf9
   0E22 F5 81              3210 	mov	sp,a
   0E24 D0 00              3211 	pop	ar0
   0E26 D0 02              3212 	pop	ar2
   0E28 D0 05              3213 	pop	ar5
                           3214 ;	../../core/loader/elfloader.c:436: if(shdr.sh_type == SHT_SYMTAB/*strncmp(name, ".symtab", 7) == 0*/) {
   0E2A 86 07              3215 	mov	ar7,@r0
   0E2C 08                 3216 	inc	r0
   0E2D 86 06              3217 	mov	ar6,@r0
   0E2F 08                 3218 	inc	r0
   0E30 86 04              3219 	mov	ar4,@r0
   0E32 08                 3220 	inc	r0
   0E33 86 03              3221 	mov	ar3,@r0
   0E35 18                 3222 	dec	r0
   0E36 18                 3223 	dec	r0
   0E37 18                 3224 	dec	r0
   0E38 BF 02 0B           3225 	cjne	r7,#0x02,00262$
   0E3B BE 00 08           3226 	cjne	r6,#0x00,00262$
   0E3E BC 00 05           3227 	cjne	r4,#0x00,00262$
   0E41 BB 00 02           3228 	cjne	r3,#0x00,00262$
   0E44 80 06              3229 	sjmp	00263$
   0E46                    3230 00262$:
   0E46 D0 05              3231 	pop	ar5
   0E48 D0 02              3232 	pop	ar2
   0E4A 80 45              3233 	sjmp	00148$
   0E4C                    3234 00263$:
   0E4C D0 05              3235 	pop	ar5
   0E4E D0 02              3236 	pop	ar2
                           3237 ;	../../core/loader/elfloader.c:438: symtaboff = shdr.sh_offset;
   0E50 E5*00              3238 	mov	a,_bp
   0E52 24 E1              3239 	add	a,#0xe1
   0E54 F9                 3240 	mov	r1,a
   0E55 87 01              3241 	mov	ar1,@r1
   0E57 87 03              3242 	mov	ar3,@r1
   0E59 09                 3243 	inc	r1
   0E5A 87 04              3244 	mov	ar4,@r1
   0E5C 09                 3245 	inc	r1
   0E5D 87 06              3246 	mov	ar6,@r1
   0E5F 09                 3247 	inc	r1
   0E60 87 07              3248 	mov	ar7,@r1
   0E62 19                 3249 	dec	r1
   0E63 19                 3250 	dec	r1
   0E64 19                 3251 	dec	r1
   0E65 E5*00              3252 	mov	a,_bp
   0E67 24 A6              3253 	add	a,#0xa6
   0E69 F9                 3254 	mov	r1,a
   0E6A A7 03              3255 	mov	@r1,ar3
   0E6C 09                 3256 	inc	r1
   0E6D A7 04              3257 	mov	@r1,ar4
                           3258 ;	../../core/loader/elfloader.c:439: symtabsize = shdr.sh_size;
   0E6F E5*00              3259 	mov	a,_bp
   0E71 24 E2              3260 	add	a,#0xe2
   0E73 F9                 3261 	mov	r1,a
   0E74 87 01              3262 	mov	ar1,@r1
   0E76 87 03              3263 	mov	ar3,@r1
   0E78 09                 3264 	inc	r1
   0E79 87 04              3265 	mov	ar4,@r1
   0E7B 09                 3266 	inc	r1
   0E7C 87 06              3267 	mov	ar6,@r1
   0E7E 09                 3268 	inc	r1
   0E7F 87 07              3269 	mov	ar7,@r1
   0E81 19                 3270 	dec	r1
   0E82 19                 3271 	dec	r1
   0E83 19                 3272 	dec	r1
   0E84 E5*00              3273 	mov	a,_bp
   0E86 24 A8              3274 	add	a,#0xa8
   0E88 F9                 3275 	mov	r1,a
   0E89 A7 03              3276 	mov	@r1,ar3
   0E8B 09                 3277 	inc	r1
   0E8C A7 04              3278 	mov	@r1,ar4
   0E8E 02s14r4E           3279 	ljmp	00149$
   0E91                    3280 00148$:
                           3281 ;	../../core/loader/elfloader.c:440: } else if(shdr.sh_type == SHT_STRTAB/*strncmp(name, ".strtab", 7) == 0*/) {
   0E91 BF 03 4A           3282 	cjne	r7,#0x03,00145$
   0E94 BE 00 47           3283 	cjne	r6,#0x00,00145$
   0E97 BC 00 44           3284 	cjne	r4,#0x00,00145$
   0E9A BB 00 41           3285 	cjne	r3,#0x00,00145$
                           3286 ;	../../core/loader/elfloader.c:442: strtaboff = shdr.sh_offset;
   0E9D E5*00              3287 	mov	a,_bp
   0E9F 24 DF              3288 	add	a,#0xdf
   0EA1 F9                 3289 	mov	r1,a
   0EA2 87 01              3290 	mov	ar1,@r1
   0EA4 87 03              3291 	mov	ar3,@r1
   0EA6 09                 3292 	inc	r1
   0EA7 87 04              3293 	mov	ar4,@r1
   0EA9 09                 3294 	inc	r1
   0EAA 87 06              3295 	mov	ar6,@r1
   0EAC 09                 3296 	inc	r1
   0EAD 87 07              3297 	mov	ar7,@r1
   0EAF 19                 3298 	dec	r1
   0EB0 19                 3299 	dec	r1
   0EB1 19                 3300 	dec	r1
   0EB2 E5*00              3301 	mov	a,_bp
   0EB4 24 AA              3302 	add	a,#0xaa
   0EB6 F9                 3303 	mov	r1,a
   0EB7 A7 03              3304 	mov	@r1,ar3
   0EB9 09                 3305 	inc	r1
   0EBA A7 04              3306 	mov	@r1,ar4
                           3307 ;	../../core/loader/elfloader.c:443: strtabsize = shdr.sh_size;
   0EBC E5*00              3308 	mov	a,_bp
   0EBE 24 E0              3309 	add	a,#0xe0
   0EC0 F9                 3310 	mov	r1,a
   0EC1 87 01              3311 	mov	ar1,@r1
   0EC3 87 03              3312 	mov	ar3,@r1
   0EC5 09                 3313 	inc	r1
   0EC6 87 04              3314 	mov	ar4,@r1
   0EC8 09                 3315 	inc	r1
   0EC9 87 06              3316 	mov	ar6,@r1
   0ECB 09                 3317 	inc	r1
   0ECC 87 07              3318 	mov	ar7,@r1
   0ECE 19                 3319 	dec	r1
   0ECF 19                 3320 	dec	r1
   0ED0 19                 3321 	dec	r1
   0ED1 E5*00              3322 	mov	a,_bp
   0ED3 24 B6              3323 	add	a,#0xb6
   0ED5 F9                 3324 	mov	r1,a
   0ED6 A7 03              3325 	mov	@r1,ar3
   0ED8 09                 3326 	inc	r1
   0ED9 A7 04              3327 	mov	@r1,ar4
   0EDB 02s14r4E           3328 	ljmp	00149$
   0EDE                    3329 00145$:
                           3330 ;	../../core/loader/elfloader.c:444: } else if(strncmp(name, ".text", 5) == 0) {
   0EDE E5*00              3331 	mov	a,_bp
   0EE0 24 C2              3332 	add	a,#0xc2
   0EE2 F9                 3333 	mov	r1,a
   0EE3 87 04              3334 	mov	ar4,@r1
   0EE5 7E 00              3335 	mov	r6,#0x00
   0EE7 7F 40              3336 	mov	r7,#0x40
   0EE9 C0 05              3337 	push	ar5
   0EEB C0 02              3338 	push	ar2
   0EED C0 00              3339 	push	ar0
   0EEF 74 05              3340 	mov	a,#0x05
   0EF1 C0 E0              3341 	push	acc
   0EF3 E4                 3342 	clr	a
   0EF4 C0 E0              3343 	push	acc
   0EF6 74r1B              3344 	mov	a,#__str_1
   0EF8 C0 E0              3345 	push	acc
   0EFA 74s00              3346 	mov	a,#(__str_1 >> 8)
   0EFC C0 E0              3347 	push	acc
   0EFE 74 80              3348 	mov	a,#0x80
   0F00 C0 E0              3349 	push	acc
   0F02 8C 82              3350 	mov	dpl,r4
   0F04 8E 83              3351 	mov	dph,r6
   0F06 8F F0              3352 	mov	b,r7
   0F08 12s00r00           3353 	lcall	_strncmp
   0F0B AE 82              3354 	mov	r6,dpl
   0F0D AF 83              3355 	mov	r7,dph
   0F0F E5 81              3356 	mov	a,sp
   0F11 24 FB              3357 	add	a,#0xfb
   0F13 F5 81              3358 	mov	sp,a
   0F15 D0 00              3359 	pop	ar0
   0F17 D0 02              3360 	pop	ar2
   0F19 D0 05              3361 	pop	ar5
   0F1B EE                 3362 	mov	a,r6
   0F1C 4F                 3363 	orl	a,r7
   0F1D 70 5B              3364 	jnz	00142$
                           3365 ;	../../core/loader/elfloader.c:445: textoff = shdr.sh_offset;
   0F1F E5*00              3366 	mov	a,_bp
   0F21 24 DD              3367 	add	a,#0xdd
   0F23 F9                 3368 	mov	r1,a
   0F24 87 01              3369 	mov	ar1,@r1
   0F26 87 03              3370 	mov	ar3,@r1
   0F28 09                 3371 	inc	r1
   0F29 87 04              3372 	mov	ar4,@r1
   0F2B 09                 3373 	inc	r1
   0F2C 87 06              3374 	mov	ar6,@r1
   0F2E 09                 3375 	inc	r1
   0F2F 87 07              3376 	mov	ar7,@r1
   0F31 19                 3377 	dec	r1
   0F32 19                 3378 	dec	r1
   0F33 19                 3379 	dec	r1
   0F34 E5*00              3380 	mov	a,_bp
   0F36 24 9E              3381 	add	a,#0x9e
   0F38 F9                 3382 	mov	r1,a
   0F39 A7 03              3383 	mov	@r1,ar3
   0F3B 09                 3384 	inc	r1
   0F3C A7 04              3385 	mov	@r1,ar4
                           3386 ;	../../core/loader/elfloader.c:446: textsize = shdr.sh_size;
   0F3E E5*00              3387 	mov	a,_bp
   0F40 24 DE              3388 	add	a,#0xde
   0F42 F9                 3389 	mov	r1,a
   0F43 87 01              3390 	mov	ar1,@r1
   0F45 87 03              3391 	mov	ar3,@r1
   0F47 09                 3392 	inc	r1
   0F48 87 04              3393 	mov	ar4,@r1
   0F4A 09                 3394 	inc	r1
   0F4B 87 06              3395 	mov	ar6,@r1
   0F4D 09                 3396 	inc	r1
   0F4E 87 07              3397 	mov	ar7,@r1
   0F50 19                 3398 	dec	r1
   0F51 19                 3399 	dec	r1
   0F52 19                 3400 	dec	r1
   0F53 E5*00              3401 	mov	a,_bp
   0F55 24 A0              3402 	add	a,#0xa0
   0F57 F9                 3403 	mov	r1,a
   0F58 A7 03              3404 	mov	@r1,ar3
   0F5A 09                 3405 	inc	r1
   0F5B A7 04              3406 	mov	@r1,ar4
                           3407 ;	../../core/loader/elfloader.c:447: text.number = i;
   0F5D E5*00              3408 	mov	a,_bp
   0F5F 24 97              3409 	add	a,#0x97
   0F61 F9                 3410 	mov	r1,a
   0F62 87 07              3411 	mov	ar7,@r1
   0F64 90s00r33           3412 	mov	dptr,#_text
   0F67 EF                 3413 	mov	a,r7
   0F68 F0                 3414 	movx	@dptr,a
                           3415 ;	../../core/loader/elfloader.c:448: text.offset = textoff;
   0F69 90s00r34           3416 	mov	dptr,#(_text + 0x0001)
   0F6C E5*00              3417 	mov	a,_bp
   0F6E 24 9E              3418 	add	a,#0x9e
   0F70 F9                 3419 	mov	r1,a
   0F71 E7                 3420 	mov	a,@r1
   0F72 F0                 3421 	movx	@dptr,a
   0F73 A3                 3422 	inc	dptr
   0F74 09                 3423 	inc	r1
   0F75 E7                 3424 	mov	a,@r1
   0F76 F0                 3425 	movx	@dptr,a
   0F77 02s14r4E           3426 	ljmp	00149$
   0F7A                    3427 00142$:
                           3428 ;	../../core/loader/elfloader.c:449: } else if(strncmp(name, ".rel.text", 9) == 0) {
   0F7A E5*00              3429 	mov	a,_bp
   0F7C 24 C3              3430 	add	a,#0xc3
   0F7E F9                 3431 	mov	r1,a
   0F7F 87 04              3432 	mov	ar4,@r1
   0F81 7E 00              3433 	mov	r6,#0x00
   0F83 7F 40              3434 	mov	r7,#0x40
   0F85 C0 05              3435 	push	ar5
   0F87 C0 02              3436 	push	ar2
   0F89 C0 00              3437 	push	ar0
   0F8B 74 09              3438 	mov	a,#0x09
   0F8D C0 E0              3439 	push	acc
   0F8F E4                 3440 	clr	a
   0F90 C0 E0              3441 	push	acc
   0F92 74r21              3442 	mov	a,#__str_2
   0F94 C0 E0              3443 	push	acc
   0F96 74s00              3444 	mov	a,#(__str_2 >> 8)
   0F98 C0 E0              3445 	push	acc
   0F9A 74 80              3446 	mov	a,#0x80
   0F9C C0 E0              3447 	push	acc
   0F9E 8C 82              3448 	mov	dpl,r4
   0FA0 8E 83              3449 	mov	dph,r6
   0FA2 8F F0              3450 	mov	b,r7
   0FA4 12s00r00           3451 	lcall	_strncmp
   0FA7 AE 82              3452 	mov	r6,dpl
   0FA9 AF 83              3453 	mov	r7,dph
   0FAB E5 81              3454 	mov	a,sp
   0FAD 24 FB              3455 	add	a,#0xfb
   0FAF F5 81              3456 	mov	sp,a
   0FB1 D0 00              3457 	pop	ar0
   0FB3 D0 02              3458 	pop	ar2
   0FB5 D0 05              3459 	pop	ar5
   0FB7 EE                 3460 	mov	a,r6
   0FB8 4F                 3461 	orl	a,r7
   0FB9 70 42              3462 	jnz	00139$
                           3463 ;	../../core/loader/elfloader.c:450: using_relas = 0;
   0FBB E5*00              3464 	mov	a,_bp
   0FBD 24 9D              3465 	add	a,#0x9d
   0FBF F9                 3466 	mov	r1,a
   0FC0 77 00              3467 	mov	@r1,#0x00
                           3468 ;	../../core/loader/elfloader.c:451: textrelaoff = shdr.sh_offset;
   0FC2 E5*00              3469 	mov	a,_bp
   0FC4 24 DB              3470 	add	a,#0xdb
   0FC6 F9                 3471 	mov	r1,a
   0FC7 87 01              3472 	mov	ar1,@r1
   0FC9 87 03              3473 	mov	ar3,@r1
   0FCB 09                 3474 	inc	r1
   0FCC 87 04              3475 	mov	ar4,@r1
   0FCE 09                 3476 	inc	r1
   0FCF 87 06              3477 	mov	ar6,@r1
   0FD1 09                 3478 	inc	r1
   0FD2 87 07              3479 	mov	ar7,@r1
   0FD4 19                 3480 	dec	r1
   0FD5 19                 3481 	dec	r1
   0FD6 19                 3482 	dec	r1
   0FD7 8B 02              3483 	mov	ar2,r3
   0FD9 8C 05              3484 	mov	ar5,r4
                           3485 ;	../../core/loader/elfloader.c:452: textrelasize = shdr.sh_size;
   0FDB E5*00              3486 	mov	a,_bp
   0FDD 24 DC              3487 	add	a,#0xdc
   0FDF F9                 3488 	mov	r1,a
   0FE0 87 01              3489 	mov	ar1,@r1
   0FE2 87 03              3490 	mov	ar3,@r1
   0FE4 09                 3491 	inc	r1
   0FE5 87 04              3492 	mov	ar4,@r1
   0FE7 09                 3493 	inc	r1
   0FE8 87 06              3494 	mov	ar6,@r1
   0FEA 09                 3495 	inc	r1
   0FEB 87 07              3496 	mov	ar7,@r1
   0FED 19                 3497 	dec	r1
   0FEE 19                 3498 	dec	r1
   0FEF 19                 3499 	dec	r1
   0FF0 E5*00              3500 	mov	a,_bp
   0FF2 24 C0              3501 	add	a,#0xc0
   0FF4 F9                 3502 	mov	r1,a
   0FF5 A7 03              3503 	mov	@r1,ar3
   0FF7 09                 3504 	inc	r1
   0FF8 A7 04              3505 	mov	@r1,ar4
   0FFA 02s14r4E           3506 	ljmp	00149$
   0FFD                    3507 00139$:
                           3508 ;	../../core/loader/elfloader.c:453: } else if(strncmp(name, ".rela.text", 10) == 0) {
   0FFD E5*00              3509 	mov	a,_bp
   0FFF 24 C4              3510 	add	a,#0xc4
   1001 F9                 3511 	mov	r1,a
   1002 87 04              3512 	mov	ar4,@r1
   1004 7E 00              3513 	mov	r6,#0x00
   1006 7F 40              3514 	mov	r7,#0x40
   1008 C0 05              3515 	push	ar5
   100A C0 02              3516 	push	ar2
   100C C0 00              3517 	push	ar0
   100E 74 0A              3518 	mov	a,#0x0A
   1010 C0 E0              3519 	push	acc
   1012 E4                 3520 	clr	a
   1013 C0 E0              3521 	push	acc
   1015 74r2B              3522 	mov	a,#__str_3
   1017 C0 E0              3523 	push	acc
   1019 74s00              3524 	mov	a,#(__str_3 >> 8)
   101B C0 E0              3525 	push	acc
   101D 74 80              3526 	mov	a,#0x80
   101F C0 E0              3527 	push	acc
   1021 8C 82              3528 	mov	dpl,r4
   1023 8E 83              3529 	mov	dph,r6
   1025 8F F0              3530 	mov	b,r7
   1027 12s00r00           3531 	lcall	_strncmp
   102A AE 82              3532 	mov	r6,dpl
   102C AF 83              3533 	mov	r7,dph
   102E E5 81              3534 	mov	a,sp
   1030 24 FB              3535 	add	a,#0xfb
   1032 F5 81              3536 	mov	sp,a
   1034 D0 00              3537 	pop	ar0
   1036 D0 02              3538 	pop	ar2
   1038 D0 05              3539 	pop	ar5
   103A EE                 3540 	mov	a,r6
   103B 4F                 3541 	orl	a,r7
   103C 70 42              3542 	jnz	00136$
                           3543 ;	../../core/loader/elfloader.c:454: using_relas = 1;
   103E E5*00              3544 	mov	a,_bp
   1040 24 9D              3545 	add	a,#0x9d
   1042 F9                 3546 	mov	r1,a
   1043 77 01              3547 	mov	@r1,#0x01
                           3548 ;	../../core/loader/elfloader.c:455: textrelaoff = shdr.sh_offset;
   1045 E5*00              3549 	mov	a,_bp
   1047 24 D9              3550 	add	a,#0xd9
   1049 F9                 3551 	mov	r1,a
   104A 87 01              3552 	mov	ar1,@r1
   104C 87 03              3553 	mov	ar3,@r1
   104E 09                 3554 	inc	r1
   104F 87 04              3555 	mov	ar4,@r1
   1051 09                 3556 	inc	r1
   1052 87 06              3557 	mov	ar6,@r1
   1054 09                 3558 	inc	r1
   1055 87 07              3559 	mov	ar7,@r1
   1057 19                 3560 	dec	r1
   1058 19                 3561 	dec	r1
   1059 19                 3562 	dec	r1
   105A 8B 02              3563 	mov	ar2,r3
   105C 8C 05              3564 	mov	ar5,r4
                           3565 ;	../../core/loader/elfloader.c:456: textrelasize = shdr.sh_size;
   105E E5*00              3566 	mov	a,_bp
   1060 24 DA              3567 	add	a,#0xda
   1062 F9                 3568 	mov	r1,a
   1063 87 01              3569 	mov	ar1,@r1
   1065 87 03              3570 	mov	ar3,@r1
   1067 09                 3571 	inc	r1
   1068 87 04              3572 	mov	ar4,@r1
   106A 09                 3573 	inc	r1
   106B 87 06              3574 	mov	ar6,@r1
   106D 09                 3575 	inc	r1
   106E 87 07              3576 	mov	ar7,@r1
   1070 19                 3577 	dec	r1
   1071 19                 3578 	dec	r1
   1072 19                 3579 	dec	r1
   1073 E5*00              3580 	mov	a,_bp
   1075 24 C0              3581 	add	a,#0xc0
   1077 F9                 3582 	mov	r1,a
   1078 A7 03              3583 	mov	@r1,ar3
   107A 09                 3584 	inc	r1
   107B A7 04              3585 	mov	@r1,ar4
   107D 02s14r4E           3586 	ljmp	00149$
   1080                    3587 00136$:
                           3588 ;	../../core/loader/elfloader.c:457: } else if(strncmp(name, ".data", 5) == 0) {
   1080 E5*00              3589 	mov	a,_bp
   1082 24 C5              3590 	add	a,#0xc5
   1084 F9                 3591 	mov	r1,a
   1085 87 04              3592 	mov	ar4,@r1
   1087 7E 00              3593 	mov	r6,#0x00
   1089 7F 40              3594 	mov	r7,#0x40
   108B C0 05              3595 	push	ar5
   108D C0 02              3596 	push	ar2
   108F C0 00              3597 	push	ar0
   1091 74 05              3598 	mov	a,#0x05
   1093 C0 E0              3599 	push	acc
   1095 E4                 3600 	clr	a
   1096 C0 E0              3601 	push	acc
   1098 74r36              3602 	mov	a,#__str_4
   109A C0 E0              3603 	push	acc
   109C 74s00              3604 	mov	a,#(__str_4 >> 8)
   109E C0 E0              3605 	push	acc
   10A0 74 80              3606 	mov	a,#0x80
   10A2 C0 E0              3607 	push	acc
   10A4 8C 82              3608 	mov	dpl,r4
   10A6 8E 83              3609 	mov	dph,r6
   10A8 8F F0              3610 	mov	b,r7
   10AA 12s00r00           3611 	lcall	_strncmp
   10AD AE 82              3612 	mov	r6,dpl
   10AF AF 83              3613 	mov	r7,dph
   10B1 E5 81              3614 	mov	a,sp
   10B3 24 FB              3615 	add	a,#0xfb
   10B5 F5 81              3616 	mov	sp,a
   10B7 D0 00              3617 	pop	ar0
   10B9 D0 02              3618 	pop	ar2
   10BB D0 05              3619 	pop	ar5
   10BD EE                 3620 	mov	a,r6
   10BE 4F                 3621 	orl	a,r7
   10BF 70 5B              3622 	jnz	00133$
                           3623 ;	../../core/loader/elfloader.c:458: dataoff = shdr.sh_offset;
   10C1 E5*00              3624 	mov	a,_bp
   10C3 24 D7              3625 	add	a,#0xd7
   10C5 F9                 3626 	mov	r1,a
   10C6 87 01              3627 	mov	ar1,@r1
   10C8 87 03              3628 	mov	ar3,@r1
   10CA 09                 3629 	inc	r1
   10CB 87 04              3630 	mov	ar4,@r1
   10CD 09                 3631 	inc	r1
   10CE 87 06              3632 	mov	ar6,@r1
   10D0 09                 3633 	inc	r1
   10D1 87 07              3634 	mov	ar7,@r1
   10D3 19                 3635 	dec	r1
   10D4 19                 3636 	dec	r1
   10D5 19                 3637 	dec	r1
   10D6 E5*00              3638 	mov	a,_bp
   10D8 24 A2              3639 	add	a,#0xa2
   10DA F9                 3640 	mov	r1,a
   10DB A7 03              3641 	mov	@r1,ar3
   10DD 09                 3642 	inc	r1
   10DE A7 04              3643 	mov	@r1,ar4
                           3644 ;	../../core/loader/elfloader.c:459: datasize = shdr.sh_size;
   10E0 E5*00              3645 	mov	a,_bp
   10E2 24 D8              3646 	add	a,#0xd8
   10E4 F9                 3647 	mov	r1,a
   10E5 87 01              3648 	mov	ar1,@r1
   10E7 87 03              3649 	mov	ar3,@r1
   10E9 09                 3650 	inc	r1
   10EA 87 04              3651 	mov	ar4,@r1
   10EC 09                 3652 	inc	r1
   10ED 87 06              3653 	mov	ar6,@r1
   10EF 09                 3654 	inc	r1
   10F0 87 07              3655 	mov	ar7,@r1
   10F2 19                 3656 	dec	r1
   10F3 19                 3657 	dec	r1
   10F4 19                 3658 	dec	r1
   10F5 E5*00              3659 	mov	a,_bp
   10F7 24 BE              3660 	add	a,#0xbe
   10F9 F9                 3661 	mov	r1,a
   10FA A7 03              3662 	mov	@r1,ar3
   10FC 09                 3663 	inc	r1
   10FD A7 04              3664 	mov	@r1,ar4
                           3665 ;	../../core/loader/elfloader.c:460: data.number = i;
   10FF E5*00              3666 	mov	a,_bp
   1101 24 97              3667 	add	a,#0x97
   1103 F9                 3668 	mov	r1,a
   1104 87 07              3669 	mov	ar7,@r1
   1106 90s00r27           3670 	mov	dptr,#_data
   1109 EF                 3671 	mov	a,r7
   110A F0                 3672 	movx	@dptr,a
                           3673 ;	../../core/loader/elfloader.c:461: data.offset = dataoff;
   110B 90s00r28           3674 	mov	dptr,#(_data + 0x0001)
   110E E5*00              3675 	mov	a,_bp
   1110 24 A2              3676 	add	a,#0xa2
   1112 F9                 3677 	mov	r1,a
   1113 E7                 3678 	mov	a,@r1
   1114 F0                 3679 	movx	@dptr,a
   1115 A3                 3680 	inc	dptr
   1116 09                 3681 	inc	r1
   1117 E7                 3682 	mov	a,@r1
   1118 F0                 3683 	movx	@dptr,a
   1119 02s14r4E           3684 	ljmp	00149$
   111C                    3685 00133$:
                           3686 ;	../../core/loader/elfloader.c:462: } else if(strncmp(name, ".rodata", 7) == 0) {
   111C E5*00              3687 	mov	a,_bp
   111E 24 C6              3688 	add	a,#0xc6
   1120 F9                 3689 	mov	r1,a
   1121 87 04              3690 	mov	ar4,@r1
   1123 7E 00              3691 	mov	r6,#0x00
   1125 7F 40              3692 	mov	r7,#0x40
   1127 C0 05              3693 	push	ar5
   1129 C0 02              3694 	push	ar2
   112B C0 00              3695 	push	ar0
   112D 74 07              3696 	mov	a,#0x07
   112F C0 E0              3697 	push	acc
   1131 E4                 3698 	clr	a
   1132 C0 E0              3699 	push	acc
   1134 74r3C              3700 	mov	a,#__str_5
   1136 C0 E0              3701 	push	acc
   1138 74s00              3702 	mov	a,#(__str_5 >> 8)
   113A C0 E0              3703 	push	acc
   113C 74 80              3704 	mov	a,#0x80
   113E C0 E0              3705 	push	acc
   1140 8C 82              3706 	mov	dpl,r4
   1142 8E 83              3707 	mov	dph,r6
   1144 8F F0              3708 	mov	b,r7
   1146 12s00r00           3709 	lcall	_strncmp
   1149 AE 82              3710 	mov	r6,dpl
   114B AF 83              3711 	mov	r7,dph
   114D E5 81              3712 	mov	a,sp
   114F 24 FB              3713 	add	a,#0xfb
   1151 F5 81              3714 	mov	sp,a
   1153 D0 00              3715 	pop	ar0
   1155 D0 02              3716 	pop	ar2
   1157 D0 05              3717 	pop	ar5
   1159 EE                 3718 	mov	a,r6
   115A 4F                 3719 	orl	a,r7
   115B 70 5B              3720 	jnz	00130$
                           3721 ;	../../core/loader/elfloader.c:464: rodataoff = shdr.sh_offset;
   115D E5*00              3722 	mov	a,_bp
   115F 24 D5              3723 	add	a,#0xd5
   1161 F9                 3724 	mov	r1,a
   1162 87 01              3725 	mov	ar1,@r1
   1164 87 03              3726 	mov	ar3,@r1
   1166 09                 3727 	inc	r1
   1167 87 04              3728 	mov	ar4,@r1
   1169 09                 3729 	inc	r1
   116A 87 06              3730 	mov	ar6,@r1
   116C 09                 3731 	inc	r1
   116D 87 07              3732 	mov	ar7,@r1
   116F 19                 3733 	dec	r1
   1170 19                 3734 	dec	r1
   1171 19                 3735 	dec	r1
   1172 E5*00              3736 	mov	a,_bp
   1174 24 A4              3737 	add	a,#0xa4
   1176 F9                 3738 	mov	r1,a
   1177 A7 03              3739 	mov	@r1,ar3
   1179 09                 3740 	inc	r1
   117A A7 04              3741 	mov	@r1,ar4
                           3742 ;	../../core/loader/elfloader.c:465: rodatasize = shdr.sh_size;
   117C E5*00              3743 	mov	a,_bp
   117E 24 D6              3744 	add	a,#0xd6
   1180 F9                 3745 	mov	r1,a
   1181 87 01              3746 	mov	ar1,@r1
   1183 87 03              3747 	mov	ar3,@r1
   1185 09                 3748 	inc	r1
   1186 87 04              3749 	mov	ar4,@r1
   1188 09                 3750 	inc	r1
   1189 87 06              3751 	mov	ar6,@r1
   118B 09                 3752 	inc	r1
   118C 87 07              3753 	mov	ar7,@r1
   118E 19                 3754 	dec	r1
   118F 19                 3755 	dec	r1
   1190 19                 3756 	dec	r1
   1191 E5*00              3757 	mov	a,_bp
   1193 24 BA              3758 	add	a,#0xba
   1195 F9                 3759 	mov	r1,a
   1196 A7 03              3760 	mov	@r1,ar3
   1198 09                 3761 	inc	r1
   1199 A7 04              3762 	mov	@r1,ar4
                           3763 ;	../../core/loader/elfloader.c:466: rodata.number = i;
   119B E5*00              3764 	mov	a,_bp
   119D 24 97              3765 	add	a,#0x97
   119F F9                 3766 	mov	r1,a
   11A0 87 07              3767 	mov	ar7,@r1
   11A2 90s00r2D           3768 	mov	dptr,#_rodata
   11A5 EF                 3769 	mov	a,r7
   11A6 F0                 3770 	movx	@dptr,a
                           3771 ;	../../core/loader/elfloader.c:467: rodata.offset = rodataoff;
   11A7 90s00r2E           3772 	mov	dptr,#(_rodata + 0x0001)
   11AA E5*00              3773 	mov	a,_bp
   11AC 24 A4              3774 	add	a,#0xa4
   11AE F9                 3775 	mov	r1,a
   11AF E7                 3776 	mov	a,@r1
   11B0 F0                 3777 	movx	@dptr,a
   11B1 A3                 3778 	inc	dptr
   11B2 09                 3779 	inc	r1
   11B3 E7                 3780 	mov	a,@r1
   11B4 F0                 3781 	movx	@dptr,a
   11B5 02s14r4E           3782 	ljmp	00149$
   11B8                    3783 00130$:
                           3784 ;	../../core/loader/elfloader.c:468: } else if(strncmp(name, ".rel.rodata", 11) == 0) {
   11B8 E5*00              3785 	mov	a,_bp
   11BA 24 C7              3786 	add	a,#0xc7
   11BC F9                 3787 	mov	r1,a
   11BD 87 04              3788 	mov	ar4,@r1
   11BF 7E 00              3789 	mov	r6,#0x00
   11C1 7F 40              3790 	mov	r7,#0x40
   11C3 C0 05              3791 	push	ar5
   11C5 C0 02              3792 	push	ar2
   11C7 C0 00              3793 	push	ar0
   11C9 74 0B              3794 	mov	a,#0x0B
   11CB C0 E0              3795 	push	acc
   11CD E4                 3796 	clr	a
   11CE C0 E0              3797 	push	acc
   11D0 74r44              3798 	mov	a,#__str_6
   11D2 C0 E0              3799 	push	acc
   11D4 74s00              3800 	mov	a,#(__str_6 >> 8)
   11D6 C0 E0              3801 	push	acc
   11D8 74 80              3802 	mov	a,#0x80
   11DA C0 E0              3803 	push	acc
   11DC 8C 82              3804 	mov	dpl,r4
   11DE 8E 83              3805 	mov	dph,r6
   11E0 8F F0              3806 	mov	b,r7
   11E2 12s00r00           3807 	lcall	_strncmp
   11E5 AE 82              3808 	mov	r6,dpl
   11E7 AF 83              3809 	mov	r7,dph
   11E9 E5 81              3810 	mov	a,sp
   11EB 24 FB              3811 	add	a,#0xfb
   11ED F5 81              3812 	mov	sp,a
   11EF D0 00              3813 	pop	ar0
   11F1 D0 02              3814 	pop	ar2
   11F3 D0 05              3815 	pop	ar5
   11F5 EE                 3816 	mov	a,r6
   11F6 4F                 3817 	orl	a,r7
   11F7 70 48              3818 	jnz	00127$
                           3819 ;	../../core/loader/elfloader.c:470: using_relas = 0;
   11F9 E5*00              3820 	mov	a,_bp
   11FB 24 9D              3821 	add	a,#0x9d
   11FD F9                 3822 	mov	r1,a
   11FE 77 00              3823 	mov	@r1,#0x00
                           3824 ;	../../core/loader/elfloader.c:471: rodatarelaoff = shdr.sh_offset;
   1200 E5*00              3825 	mov	a,_bp
   1202 24 D3              3826 	add	a,#0xd3
   1204 F9                 3827 	mov	r1,a
   1205 87 01              3828 	mov	ar1,@r1
   1207 87 03              3829 	mov	ar3,@r1
   1209 09                 3830 	inc	r1
   120A 87 04              3831 	mov	ar4,@r1
   120C 09                 3832 	inc	r1
   120D 87 06              3833 	mov	ar6,@r1
   120F 09                 3834 	inc	r1
   1210 87 07              3835 	mov	ar7,@r1
   1212 19                 3836 	dec	r1
   1213 19                 3837 	dec	r1
   1214 19                 3838 	dec	r1
   1215 E5*00              3839 	mov	a,_bp
   1217 24 AE              3840 	add	a,#0xae
   1219 F9                 3841 	mov	r1,a
   121A A7 03              3842 	mov	@r1,ar3
   121C 09                 3843 	inc	r1
   121D A7 04              3844 	mov	@r1,ar4
                           3845 ;	../../core/loader/elfloader.c:472: rodatarelasize = shdr.sh_size;
   121F E5*00              3846 	mov	a,_bp
   1221 24 D4              3847 	add	a,#0xd4
   1223 F9                 3848 	mov	r1,a
   1224 87 01              3849 	mov	ar1,@r1
   1226 87 03              3850 	mov	ar3,@r1
   1228 09                 3851 	inc	r1
   1229 87 04              3852 	mov	ar4,@r1
   122B 09                 3853 	inc	r1
   122C 87 06              3854 	mov	ar6,@r1
   122E 09                 3855 	inc	r1
   122F 87 07              3856 	mov	ar7,@r1
   1231 19                 3857 	dec	r1
   1232 19                 3858 	dec	r1
   1233 19                 3859 	dec	r1
   1234 E5*00              3860 	mov	a,_bp
   1236 24 B2              3861 	add	a,#0xb2
   1238 F9                 3862 	mov	r1,a
   1239 A7 03              3863 	mov	@r1,ar3
   123B 09                 3864 	inc	r1
   123C A7 04              3865 	mov	@r1,ar4
   123E 02s14r4E           3866 	ljmp	00149$
   1241                    3867 00127$:
                           3868 ;	../../core/loader/elfloader.c:473: } else if(strncmp(name, ".rela.rodata", 12) == 0) {
   1241 E5*00              3869 	mov	a,_bp
   1243 24 C8              3870 	add	a,#0xc8
   1245 F9                 3871 	mov	r1,a
   1246 87 04              3872 	mov	ar4,@r1
   1248 7E 00              3873 	mov	r6,#0x00
   124A 7F 40              3874 	mov	r7,#0x40
   124C C0 05              3875 	push	ar5
   124E C0 02              3876 	push	ar2
   1250 C0 00              3877 	push	ar0
   1252 74 0C              3878 	mov	a,#0x0C
   1254 C0 E0              3879 	push	acc
   1256 E4                 3880 	clr	a
   1257 C0 E0              3881 	push	acc
   1259 74r50              3882 	mov	a,#__str_7
   125B C0 E0              3883 	push	acc
   125D 74s00              3884 	mov	a,#(__str_7 >> 8)
   125F C0 E0              3885 	push	acc
   1261 74 80              3886 	mov	a,#0x80
   1263 C0 E0              3887 	push	acc
   1265 8C 82              3888 	mov	dpl,r4
   1267 8E 83              3889 	mov	dph,r6
   1269 8F F0              3890 	mov	b,r7
   126B 12s00r00           3891 	lcall	_strncmp
   126E AE 82              3892 	mov	r6,dpl
   1270 AF 83              3893 	mov	r7,dph
   1272 E5 81              3894 	mov	a,sp
   1274 24 FB              3895 	add	a,#0xfb
   1276 F5 81              3896 	mov	sp,a
   1278 D0 00              3897 	pop	ar0
   127A D0 02              3898 	pop	ar2
   127C D0 05              3899 	pop	ar5
   127E EE                 3900 	mov	a,r6
   127F 4F                 3901 	orl	a,r7
   1280 70 48              3902 	jnz	00124$
                           3903 ;	../../core/loader/elfloader.c:474: using_relas = 1;
   1282 E5*00              3904 	mov	a,_bp
   1284 24 9D              3905 	add	a,#0x9d
   1286 F9                 3906 	mov	r1,a
   1287 77 01              3907 	mov	@r1,#0x01
                           3908 ;	../../core/loader/elfloader.c:475: rodatarelaoff = shdr.sh_offset;
   1289 E5*00              3909 	mov	a,_bp
   128B 24 D1              3910 	add	a,#0xd1
   128D F9                 3911 	mov	r1,a
   128E 87 01              3912 	mov	ar1,@r1
   1290 87 03              3913 	mov	ar3,@r1
   1292 09                 3914 	inc	r1
   1293 87 04              3915 	mov	ar4,@r1
   1295 09                 3916 	inc	r1
   1296 87 06              3917 	mov	ar6,@r1
   1298 09                 3918 	inc	r1
   1299 87 07              3919 	mov	ar7,@r1
   129B 19                 3920 	dec	r1
   129C 19                 3921 	dec	r1
   129D 19                 3922 	dec	r1
   129E E5*00              3923 	mov	a,_bp
   12A0 24 AE              3924 	add	a,#0xae
   12A2 F9                 3925 	mov	r1,a
   12A3 A7 03              3926 	mov	@r1,ar3
   12A5 09                 3927 	inc	r1
   12A6 A7 04              3928 	mov	@r1,ar4
                           3929 ;	../../core/loader/elfloader.c:476: rodatarelasize = shdr.sh_size;
   12A8 E5*00              3930 	mov	a,_bp
   12AA 24 D2              3931 	add	a,#0xd2
   12AC F9                 3932 	mov	r1,a
   12AD 87 01              3933 	mov	ar1,@r1
   12AF 87 03              3934 	mov	ar3,@r1
   12B1 09                 3935 	inc	r1
   12B2 87 04              3936 	mov	ar4,@r1
   12B4 09                 3937 	inc	r1
   12B5 87 06              3938 	mov	ar6,@r1
   12B7 09                 3939 	inc	r1
   12B8 87 07              3940 	mov	ar7,@r1
   12BA 19                 3941 	dec	r1
   12BB 19                 3942 	dec	r1
   12BC 19                 3943 	dec	r1
   12BD E5*00              3944 	mov	a,_bp
   12BF 24 B2              3945 	add	a,#0xb2
   12C1 F9                 3946 	mov	r1,a
   12C2 A7 03              3947 	mov	@r1,ar3
   12C4 09                 3948 	inc	r1
   12C5 A7 04              3949 	mov	@r1,ar4
   12C7 02s14r4E           3950 	ljmp	00149$
   12CA                    3951 00124$:
                           3952 ;	../../core/loader/elfloader.c:477: } else if(strncmp(name, ".rel.data", 9) == 0) {
   12CA E5*00              3953 	mov	a,_bp
   12CC 24 C9              3954 	add	a,#0xc9
   12CE F9                 3955 	mov	r1,a
   12CF 87 04              3956 	mov	ar4,@r1
   12D1 7E 00              3957 	mov	r6,#0x00
   12D3 7F 40              3958 	mov	r7,#0x40
   12D5 C0 05              3959 	push	ar5
   12D7 C0 02              3960 	push	ar2
   12D9 C0 00              3961 	push	ar0
   12DB 74 09              3962 	mov	a,#0x09
   12DD C0 E0              3963 	push	acc
   12DF E4                 3964 	clr	a
   12E0 C0 E0              3965 	push	acc
   12E2 74r5D              3966 	mov	a,#__str_8
   12E4 C0 E0              3967 	push	acc
   12E6 74s00              3968 	mov	a,#(__str_8 >> 8)
   12E8 C0 E0              3969 	push	acc
   12EA 74 80              3970 	mov	a,#0x80
   12EC C0 E0              3971 	push	acc
   12EE 8C 82              3972 	mov	dpl,r4
   12F0 8E 83              3973 	mov	dph,r6
   12F2 8F F0              3974 	mov	b,r7
   12F4 12s00r00           3975 	lcall	_strncmp
   12F7 AE 82              3976 	mov	r6,dpl
   12F9 AF 83              3977 	mov	r7,dph
   12FB E5 81              3978 	mov	a,sp
   12FD 24 FB              3979 	add	a,#0xfb
   12FF F5 81              3980 	mov	sp,a
   1301 D0 00              3981 	pop	ar0
   1303 D0 02              3982 	pop	ar2
   1305 D0 05              3983 	pop	ar5
   1307 EE                 3984 	mov	a,r6
   1308 4F                 3985 	orl	a,r7
   1309 70 48              3986 	jnz	00121$
                           3987 ;	../../core/loader/elfloader.c:479: using_relas = 0;
   130B E5*00              3988 	mov	a,_bp
   130D 24 9D              3989 	add	a,#0x9d
   130F F9                 3990 	mov	r1,a
   1310 77 00              3991 	mov	@r1,#0x00
                           3992 ;	../../core/loader/elfloader.c:480: datarelaoff = shdr.sh_offset;
   1312 E5*00              3993 	mov	a,_bp
   1314 24 CF              3994 	add	a,#0xcf
   1316 F9                 3995 	mov	r1,a
   1317 87 01              3996 	mov	ar1,@r1
   1319 87 03              3997 	mov	ar3,@r1
   131B 09                 3998 	inc	r1
   131C 87 04              3999 	mov	ar4,@r1
   131E 09                 4000 	inc	r1
   131F 87 06              4001 	mov	ar6,@r1
   1321 09                 4002 	inc	r1
   1322 87 07              4003 	mov	ar7,@r1
   1324 19                 4004 	dec	r1
   1325 19                 4005 	dec	r1
   1326 19                 4006 	dec	r1
   1327 E5*00              4007 	mov	a,_bp
   1329 24 AC              4008 	add	a,#0xac
   132B F9                 4009 	mov	r1,a
   132C A7 03              4010 	mov	@r1,ar3
   132E 09                 4011 	inc	r1
   132F A7 04              4012 	mov	@r1,ar4
                           4013 ;	../../core/loader/elfloader.c:481: datarelasize = shdr.sh_size;
   1331 E5*00              4014 	mov	a,_bp
   1333 24 D0              4015 	add	a,#0xd0
   1335 F9                 4016 	mov	r1,a
   1336 87 01              4017 	mov	ar1,@r1
   1338 87 03              4018 	mov	ar3,@r1
   133A 09                 4019 	inc	r1
   133B 87 04              4020 	mov	ar4,@r1
   133D 09                 4021 	inc	r1
   133E 87 06              4022 	mov	ar6,@r1
   1340 09                 4023 	inc	r1
   1341 87 07              4024 	mov	ar7,@r1
   1343 19                 4025 	dec	r1
   1344 19                 4026 	dec	r1
   1345 19                 4027 	dec	r1
   1346 E5*00              4028 	mov	a,_bp
   1348 24 BC              4029 	add	a,#0xbc
   134A F9                 4030 	mov	r1,a
   134B A7 03              4031 	mov	@r1,ar3
   134D 09                 4032 	inc	r1
   134E A7 04              4033 	mov	@r1,ar4
   1350 02s14r4E           4034 	ljmp	00149$
   1353                    4035 00121$:
                           4036 ;	../../core/loader/elfloader.c:482: } else if(strncmp(name, ".rela.data", 10) == 0) {
   1353 E5*00              4037 	mov	a,_bp
   1355 24 CA              4038 	add	a,#0xca
   1357 F9                 4039 	mov	r1,a
   1358 87 04              4040 	mov	ar4,@r1
   135A 7E 00              4041 	mov	r6,#0x00
   135C 7F 40              4042 	mov	r7,#0x40
   135E C0 05              4043 	push	ar5
   1360 C0 02              4044 	push	ar2
   1362 C0 00              4045 	push	ar0
   1364 74 0A              4046 	mov	a,#0x0A
   1366 C0 E0              4047 	push	acc
   1368 E4                 4048 	clr	a
   1369 C0 E0              4049 	push	acc
   136B 74r67              4050 	mov	a,#__str_9
   136D C0 E0              4051 	push	acc
   136F 74s00              4052 	mov	a,#(__str_9 >> 8)
   1371 C0 E0              4053 	push	acc
   1373 74 80              4054 	mov	a,#0x80
   1375 C0 E0              4055 	push	acc
   1377 8C 82              4056 	mov	dpl,r4
   1379 8E 83              4057 	mov	dph,r6
   137B 8F F0              4058 	mov	b,r7
   137D 12s00r00           4059 	lcall	_strncmp
   1380 AE 82              4060 	mov	r6,dpl
   1382 AF 83              4061 	mov	r7,dph
   1384 E5 81              4062 	mov	a,sp
   1386 24 FB              4063 	add	a,#0xfb
   1388 F5 81              4064 	mov	sp,a
   138A D0 00              4065 	pop	ar0
   138C D0 02              4066 	pop	ar2
   138E D0 05              4067 	pop	ar5
   1390 EE                 4068 	mov	a,r6
   1391 4F                 4069 	orl	a,r7
   1392 70 47              4070 	jnz	00118$
                           4071 ;	../../core/loader/elfloader.c:483: using_relas = 1;
   1394 E5*00              4072 	mov	a,_bp
   1396 24 9D              4073 	add	a,#0x9d
   1398 F9                 4074 	mov	r1,a
   1399 77 01              4075 	mov	@r1,#0x01
                           4076 ;	../../core/loader/elfloader.c:484: datarelaoff = shdr.sh_offset;
   139B E5*00              4077 	mov	a,_bp
   139D 24 CD              4078 	add	a,#0xcd
   139F F9                 4079 	mov	r1,a
   13A0 87 01              4080 	mov	ar1,@r1
   13A2 87 03              4081 	mov	ar3,@r1
   13A4 09                 4082 	inc	r1
   13A5 87 04              4083 	mov	ar4,@r1
   13A7 09                 4084 	inc	r1
   13A8 87 06              4085 	mov	ar6,@r1
   13AA 09                 4086 	inc	r1
   13AB 87 07              4087 	mov	ar7,@r1
   13AD 19                 4088 	dec	r1
   13AE 19                 4089 	dec	r1
   13AF 19                 4090 	dec	r1
   13B0 E5*00              4091 	mov	a,_bp
   13B2 24 AC              4092 	add	a,#0xac
   13B4 F9                 4093 	mov	r1,a
   13B5 A7 03              4094 	mov	@r1,ar3
   13B7 09                 4095 	inc	r1
   13B8 A7 04              4096 	mov	@r1,ar4
                           4097 ;	../../core/loader/elfloader.c:485: datarelasize = shdr.sh_size;
   13BA E5*00              4098 	mov	a,_bp
   13BC 24 CE              4099 	add	a,#0xce
   13BE F9                 4100 	mov	r1,a
   13BF 87 01              4101 	mov	ar1,@r1
   13C1 87 03              4102 	mov	ar3,@r1
   13C3 09                 4103 	inc	r1
   13C4 87 04              4104 	mov	ar4,@r1
   13C6 09                 4105 	inc	r1
   13C7 87 06              4106 	mov	ar6,@r1
   13C9 09                 4107 	inc	r1
   13CA 87 07              4108 	mov	ar7,@r1
   13CC 19                 4109 	dec	r1
   13CD 19                 4110 	dec	r1
   13CE 19                 4111 	dec	r1
   13CF E5*00              4112 	mov	a,_bp
   13D1 24 BC              4113 	add	a,#0xbc
   13D3 F9                 4114 	mov	r1,a
   13D4 A7 03              4115 	mov	@r1,ar3
   13D6 09                 4116 	inc	r1
   13D7 A7 04              4117 	mov	@r1,ar4
   13D9 80 73              4118 	sjmp	00149$
   13DB                    4119 00118$:
                           4120 ;	../../core/loader/elfloader.c:486: } else if(strncmp(name, ".bss", 4) == 0) {
   13DB E5*00              4121 	mov	a,_bp
   13DD 24 CC              4122 	add	a,#0xcc
   13DF F9                 4123 	mov	r1,a
   13E0 87 04              4124 	mov	ar4,@r1
   13E2 7E 00              4125 	mov	r6,#0x00
   13E4 7F 40              4126 	mov	r7,#0x40
   13E6 C0 05              4127 	push	ar5
   13E8 C0 02              4128 	push	ar2
   13EA C0 00              4129 	push	ar0
   13EC 74 04              4130 	mov	a,#0x04
   13EE C0 E0              4131 	push	acc
   13F0 E4                 4132 	clr	a
   13F1 C0 E0              4133 	push	acc
   13F3 74r72              4134 	mov	a,#__str_10
   13F5 C0 E0              4135 	push	acc
   13F7 74s00              4136 	mov	a,#(__str_10 >> 8)
   13F9 C0 E0              4137 	push	acc
   13FB 74 80              4138 	mov	a,#0x80
   13FD C0 E0              4139 	push	acc
   13FF 8C 82              4140 	mov	dpl,r4
   1401 8E 83              4141 	mov	dph,r6
   1403 8F F0              4142 	mov	b,r7
   1405 12s00r00           4143 	lcall	_strncmp
   1408 AE 82              4144 	mov	r6,dpl
   140A AF 83              4145 	mov	r7,dph
   140C E5 81              4146 	mov	a,sp
   140E 24 FB              4147 	add	a,#0xfb
   1410 F5 81              4148 	mov	sp,a
   1412 D0 00              4149 	pop	ar0
   1414 D0 02              4150 	pop	ar2
   1416 D0 05              4151 	pop	ar5
   1418 EE                 4152 	mov	a,r6
   1419 4F                 4153 	orl	a,r7
   141A 70 32              4154 	jnz	00149$
                           4155 ;	../../core/loader/elfloader.c:487: bsssize = shdr.sh_size;
   141C E5*00              4156 	mov	a,_bp
   141E 24 CB              4157 	add	a,#0xcb
   1420 F9                 4158 	mov	r1,a
   1421 87 01              4159 	mov	ar1,@r1
   1423 87 03              4160 	mov	ar3,@r1
   1425 09                 4161 	inc	r1
   1426 87 04              4162 	mov	ar4,@r1
   1428 09                 4163 	inc	r1
   1429 87 06              4164 	mov	ar6,@r1
   142B 09                 4165 	inc	r1
   142C 87 07              4166 	mov	ar7,@r1
   142E 19                 4167 	dec	r1
   142F 19                 4168 	dec	r1
   1430 19                 4169 	dec	r1
   1431 E5*00              4170 	mov	a,_bp
   1433 24 B0              4171 	add	a,#0xb0
   1435 F9                 4172 	mov	r1,a
   1436 A7 03              4173 	mov	@r1,ar3
   1438 09                 4174 	inc	r1
   1439 A7 04              4175 	mov	@r1,ar4
                           4176 ;	../../core/loader/elfloader.c:488: bss.number = i;
   143B E5*00              4177 	mov	a,_bp
   143D 24 97              4178 	add	a,#0x97
   143F F9                 4179 	mov	r1,a
   1440 87 07              4180 	mov	ar7,@r1
   1442 90s00r21           4181 	mov	dptr,#_bss
   1445 EF                 4182 	mov	a,r7
   1446 F0                 4183 	movx	@dptr,a
                           4184 ;	../../core/loader/elfloader.c:489: bss.offset = 0;
   1447 90s00r22           4185 	mov	dptr,#(_bss + 0x0001)
   144A E4                 4186 	clr	a
   144B F0                 4187 	movx	@dptr,a
   144C A3                 4188 	inc	dptr
   144D F0                 4189 	movx	@dptr,a
   144E                    4190 00149$:
                           4191 ;	../../core/loader/elfloader.c:493: shdrptr += shdrsize;
   144E E5*00              4192 	mov	a,_bp
   1450 24 89              4193 	add	a,#0x89
   1452 F9                 4194 	mov	r1,a
   1453 C0 00              4195 	push	ar0
   1455 E5*00              4196 	mov	a,_bp
   1457 24 9B              4197 	add	a,#0x9b
   1459 F8                 4198 	mov	r0,a
   145A E6                 4199 	mov	a,@r0
   145B 27                 4200 	add	a,@r1
   145C F7                 4201 	mov	@r1,a
   145D 08                 4202 	inc	r0
   145E E6                 4203 	mov	a,@r0
   145F 09                 4204 	inc	r1
   1460 37                 4205 	addc	a,@r1
   1461 F7                 4206 	mov	@r1,a
   1462 D0 00              4207 	pop	ar0
                           4208 ;	../../core/loader/elfloader.c:420: for(i = 0; i < shdrnum; ++i) {
   1464 E5*00              4209 	mov	a,_bp
   1466 24 97              4210 	add	a,#0x97
   1468 F9                 4211 	mov	r1,a
   1469 07                 4212 	inc	@r1
   146A B7 00 02           4213 	cjne	@r1,#0x00,00276$
   146D 09                 4214 	inc	r1
   146E 07                 4215 	inc	@r1
   146F                    4216 00276$:
   146F 02s0Dr56           4217 	ljmp	00203$
   1472                    4218 00206$:
                           4219 ;	../../core/loader/elfloader.c:496: if(symtabsize == 0) {
   1472 E5*00              4220 	mov	a,_bp
   1474 24 A8              4221 	add	a,#0xa8
   1476 F8                 4222 	mov	r0,a
   1477 E6                 4223 	mov	a,@r0
   1478 08                 4224 	inc	r0
   1479 46                 4225 	orl	a,@r0
   147A 70 06              4226 	jnz	00151$
                           4227 ;	../../core/loader/elfloader.c:497: return ELFLOADER_NO_SYMTAB;
   147C 90 00 02           4228 	mov	dptr,#0x0002
   147F 02s18r78           4229 	ljmp	00207$
   1482                    4230 00151$:
                           4231 ;	../../core/loader/elfloader.c:499: if(strtabsize == 0) {
   1482 E5*00              4232 	mov	a,_bp
   1484 24 B6              4233 	add	a,#0xb6
   1486 F8                 4234 	mov	r0,a
   1487 E6                 4235 	mov	a,@r0
   1488 08                 4236 	inc	r0
   1489 46                 4237 	orl	a,@r0
   148A 70 06              4238 	jnz	00153$
                           4239 ;	../../core/loader/elfloader.c:500: return ELFLOADER_NO_STRTAB;
   148C 90 00 03           4240 	mov	dptr,#0x0003
   148F 02s18r78           4241 	ljmp	00207$
   1492                    4242 00153$:
                           4243 ;	../../core/loader/elfloader.c:502: if(textsize == 0) {
   1492 E5*00              4244 	mov	a,_bp
   1494 24 A0              4245 	add	a,#0xa0
   1496 F8                 4246 	mov	r0,a
   1497 E6                 4247 	mov	a,@r0
   1498 08                 4248 	inc	r0
   1499 46                 4249 	orl	a,@r0
   149A 70 06              4250 	jnz	00156$
                           4251 ;	../../core/loader/elfloader.c:503: return ELFLOADER_NO_TEXT;
   149C 90 00 04           4252 	mov	dptr,#0x0004
   149F 02s18r78           4253 	ljmp	00207$
                           4254 ;	../../core/loader/elfloader.c:506: PRINTF("before allocate ram\n");
   14A2                    4255 00156$:
                           4256 ;	../../core/loader/elfloader.c:507: bss.address = (char *)elfloader_arch_allocate_ram(bsssize + datasize);
   14A2 C0 02              4257 	push	ar2
   14A4 C0 05              4258 	push	ar5
   14A6 E5*00              4259 	mov	a,_bp
   14A8 24 B0              4260 	add	a,#0xb0
   14AA F8                 4261 	mov	r0,a
   14AB E5*00              4262 	mov	a,_bp
   14AD 24 BE              4263 	add	a,#0xbe
   14AF F9                 4264 	mov	r1,a
   14B0 E7                 4265 	mov	a,@r1
   14B1 26                 4266 	add	a,@r0
   14B2 FE                 4267 	mov	r6,a
   14B3 09                 4268 	inc	r1
   14B4 E7                 4269 	mov	a,@r1
   14B5 08                 4270 	inc	r0
   14B6 36                 4271 	addc	a,@r0
   14B7 FF                 4272 	mov	r7,a
   14B8 8E 82              4273 	mov	dpl,r6
   14BA 8F 83              4274 	mov	dph,r7
   14BC C0 05              4275 	push	ar5
   14BE C0 02              4276 	push	ar2
   14C0 12s00r00           4277 	lcall	_elfloader_arch_allocate_ram
   14C3 AC 82              4278 	mov	r4,dpl
   14C5 AE 83              4279 	mov	r6,dph
   14C7 AF F0              4280 	mov	r7,b
   14C9 90s00r24           4281 	mov	dptr,#(_bss + 0x0003)
   14CC EC                 4282 	mov	a,r4
   14CD F0                 4283 	movx	@dptr,a
   14CE A3                 4284 	inc	dptr
   14CF EE                 4285 	mov	a,r6
   14D0 F0                 4286 	movx	@dptr,a
   14D1 A3                 4287 	inc	dptr
   14D2 EF                 4288 	mov	a,r7
   14D3 F0                 4289 	movx	@dptr,a
                           4290 ;	../../core/loader/elfloader.c:508: data.address = (char *)bss.address + bsssize;
   14D4 90s00r24           4291 	mov	dptr,#(_bss + 0x0003)
   14D7 E0                 4292 	movx	a,@dptr
   14D8 FC                 4293 	mov	r4,a
   14D9 A3                 4294 	inc	dptr
   14DA E0                 4295 	movx	a,@dptr
   14DB FE                 4296 	mov	r6,a
   14DC A3                 4297 	inc	dptr
   14DD E0                 4298 	movx	a,@dptr
   14DE FF                 4299 	mov	r7,a
   14DF E5*00              4300 	mov	a,_bp
   14E1 24 B0              4301 	add	a,#0xb0
   14E3 F8                 4302 	mov	r0,a
   14E4 E6                 4303 	mov	a,@r0
   14E5 2C                 4304 	add	a,r4
   14E6 FC                 4305 	mov	r4,a
   14E7 08                 4306 	inc	r0
   14E8 E6                 4307 	mov	a,@r0
   14E9 3E                 4308 	addc	a,r6
   14EA FE                 4309 	mov	r6,a
   14EB 90s00r2A           4310 	mov	dptr,#(_data + 0x0003)
   14EE EC                 4311 	mov	a,r4
   14EF F0                 4312 	movx	@dptr,a
   14F0 A3                 4313 	inc	dptr
   14F1 EE                 4314 	mov	a,r6
   14F2 F0                 4315 	movx	@dptr,a
   14F3 A3                 4316 	inc	dptr
   14F4 EF                 4317 	mov	a,r7
   14F5 F0                 4318 	movx	@dptr,a
                           4319 ;	../../core/loader/elfloader.c:510: text.address = (char *)elfloader_arch_allocate_rom(textsize + rodatasize);
   14F6 E5*00              4320 	mov	a,_bp
   14F8 24 A0              4321 	add	a,#0xa0
   14FA F8                 4322 	mov	r0,a
   14FB E5*00              4323 	mov	a,_bp
   14FD 24 BA              4324 	add	a,#0xba
   14FF F9                 4325 	mov	r1,a
   1500 E7                 4326 	mov	a,@r1
   1501 26                 4327 	add	a,@r0
   1502 FE                 4328 	mov	r6,a
   1503 09                 4329 	inc	r1
   1504 E7                 4330 	mov	a,@r1
   1505 08                 4331 	inc	r0
   1506 36                 4332 	addc	a,@r0
   1507 FF                 4333 	mov	r7,a
   1508 8E 82              4334 	mov	dpl,r6
   150A 8F 83              4335 	mov	dph,r7
   150C 12s00r00           4336 	lcall	_elfloader_arch_allocate_rom
   150F AC 82              4337 	mov	r4,dpl
   1511 AE 83              4338 	mov	r6,dph
   1513 AF F0              4339 	mov	r7,b
   1515 D0 02              4340 	pop	ar2
   1517 D0 05              4341 	pop	ar5
   1519 90s00r36           4342 	mov	dptr,#(_text + 0x0003)
   151C EC                 4343 	mov	a,r4
   151D F0                 4344 	movx	@dptr,a
   151E A3                 4345 	inc	dptr
   151F EE                 4346 	mov	a,r6
   1520 F0                 4347 	movx	@dptr,a
   1521 A3                 4348 	inc	dptr
   1522 EF                 4349 	mov	a,r7
   1523 F0                 4350 	movx	@dptr,a
                           4351 ;	../../core/loader/elfloader.c:511: rodata.address = (char *)text.address + textsize;
   1524 90s00r36           4352 	mov	dptr,#(_text + 0x0003)
   1527 E0                 4353 	movx	a,@dptr
   1528 FC                 4354 	mov	r4,a
   1529 A3                 4355 	inc	dptr
   152A E0                 4356 	movx	a,@dptr
   152B FE                 4357 	mov	r6,a
   152C A3                 4358 	inc	dptr
   152D E0                 4359 	movx	a,@dptr
   152E FF                 4360 	mov	r7,a
   152F E5*00              4361 	mov	a,_bp
   1531 24 A0              4362 	add	a,#0xa0
   1533 F8                 4363 	mov	r0,a
   1534 E6                 4364 	mov	a,@r0
   1535 2C                 4365 	add	a,r4
   1536 FA                 4366 	mov	r2,a
   1537 08                 4367 	inc	r0
   1538 E6                 4368 	mov	a,@r0
   1539 3E                 4369 	addc	a,r6
   153A FB                 4370 	mov	r3,a
   153B 8F 05              4371 	mov	ar5,r7
   153D 90s00r30           4372 	mov	dptr,#(_rodata + 0x0003)
   1540 EA                 4373 	mov	a,r2
   1541 F0                 4374 	movx	@dptr,a
   1542 A3                 4375 	inc	dptr
   1543 EB                 4376 	mov	a,r3
   1544 F0                 4377 	movx	@dptr,a
   1545 A3                 4378 	inc	dptr
   1546 ED                 4379 	mov	a,r5
   1547 F0                 4380 	movx	@dptr,a
                           4381 ;	../../core/loader/elfloader.c:522: if(textrelasize > 0) {
   1548 D0 05              4382 	pop	ar5
   154A D0 02              4383 	pop	ar2
   154C E5*00              4384 	mov	a,_bp
   154E 24 C0              4385 	add	a,#0xc0
   1550 F8                 4386 	mov	r0,a
   1551 E6                 4387 	mov	a,@r0
   1552 08                 4388 	inc	r0
   1553 46                 4389 	orl	a,@r0
   1554 60 7A              4390 	jz	00174$
                           4391 ;	../../core/loader/elfloader.c:523: ret = relocate_section(fd,
   1556 E5*00              4392 	mov	a,_bp
   1558 24 9D              4393 	add	a,#0x9d
   155A F8                 4394 	mov	r0,a
   155B E6                 4395 	mov	a,@r0
   155C C0 E0              4396 	push	acc
   155E E5*00              4397 	mov	a,_bp
   1560 24 A8              4398 	add	a,#0xa8
   1562 F8                 4399 	mov	r0,a
   1563 E6                 4400 	mov	a,@r0
   1564 C0 E0              4401 	push	acc
   1566 08                 4402 	inc	r0
   1567 E6                 4403 	mov	a,@r0
   1568 C0 E0              4404 	push	acc
   156A E5*00              4405 	mov	a,_bp
   156C 24 A6              4406 	add	a,#0xa6
   156E F8                 4407 	mov	r0,a
   156F E6                 4408 	mov	a,@r0
   1570 C0 E0              4409 	push	acc
   1572 08                 4410 	inc	r0
   1573 E6                 4411 	mov	a,@r0
   1574 C0 E0              4412 	push	acc
   1576 E5*00              4413 	mov	a,_bp
   1578 24 AA              4414 	add	a,#0xaa
   157A F8                 4415 	mov	r0,a
   157B E6                 4416 	mov	a,@r0
   157C C0 E0              4417 	push	acc
   157E 08                 4418 	inc	r0
   157F E6                 4419 	mov	a,@r0
   1580 C0 E0              4420 	push	acc
   1582 E5*00              4421 	mov	a,_bp
   1584 24 87              4422 	add	a,#0x87
   1586 F8                 4423 	mov	r0,a
   1587 E6                 4424 	mov	a,@r0
   1588 C0 E0              4425 	push	acc
   158A 08                 4426 	inc	r0
   158B E6                 4427 	mov	a,@r0
   158C C0 E0              4428 	push	acc
   158E C0 04              4429 	push	ar4
   1590 C0 06              4430 	push	ar6
   1592 C0 07              4431 	push	ar7
   1594 E5*00              4432 	mov	a,_bp
   1596 24 9E              4433 	add	a,#0x9e
   1598 F8                 4434 	mov	r0,a
   1599 E6                 4435 	mov	a,@r0
   159A C0 E0              4436 	push	acc
   159C 08                 4437 	inc	r0
   159D E6                 4438 	mov	a,@r0
   159E C0 E0              4439 	push	acc
   15A0 E5*00              4440 	mov	a,_bp
   15A2 24 C0              4441 	add	a,#0xc0
   15A4 F8                 4442 	mov	r0,a
   15A5 E6                 4443 	mov	a,@r0
   15A6 C0 E0              4444 	push	acc
   15A8 08                 4445 	inc	r0
   15A9 E6                 4446 	mov	a,@r0
   15AA C0 E0              4447 	push	acc
   15AC C0 02              4448 	push	ar2
   15AE C0 05              4449 	push	ar5
   15B0 A8*00              4450 	mov	r0,_bp
   15B2 08                 4451 	inc	r0
   15B3 86 82              4452 	mov	dpl,@r0
   15B5 08                 4453 	inc	r0
   15B6 86 83              4454 	mov	dph,@r0
   15B8 12s02r7B           4455 	lcall	_relocate_section
   15BB AE 82              4456 	mov	r6,dpl
   15BD AF 83              4457 	mov	r7,dph
   15BF E5 81              4458 	mov	a,sp
   15C1 24 EE              4459 	add	a,#0xee
   15C3 F5 81              4460 	mov	sp,a
                           4461 ;	../../core/loader/elfloader.c:530: if(ret != ELFLOADER_OK) {
   15C5 EE                 4462 	mov	a,r6
   15C6 4F                 4463 	orl	a,r7
   15C7 60 07              4464 	jz	00174$
                           4465 ;	../../core/loader/elfloader.c:531: return ret;
   15C9 8E 82              4466 	mov	dpl,r6
   15CB 8F 83              4467 	mov	dph,r7
   15CD 02s18r78           4468 	ljmp	00207$
                           4469 ;	../../core/loader/elfloader.c:536: PRINTF("elfloader: relocate rodata\n");
   15D0                    4470 00174$:
                           4471 ;	../../core/loader/elfloader.c:537: if(rodatarelasize > 0) {
   15D0 E5*00              4472 	mov	a,_bp
   15D2 24 B2              4473 	add	a,#0xb2
   15D4 F8                 4474 	mov	r0,a
   15D5 E6                 4475 	mov	a,@r0
   15D6 08                 4476 	inc	r0
   15D7 46                 4477 	orl	a,@r0
   15D8 70 03              4478 	jnz	00282$
   15DA 02s16r6E           4479 	ljmp	00182$
   15DD                    4480 00282$:
                           4481 ;	../../core/loader/elfloader.c:541: rodata.address,
   15DD 90s00r30           4482 	mov	dptr,#(_rodata + 0x0003)
   15E0 E0                 4483 	movx	a,@dptr
   15E1 FB                 4484 	mov	r3,a
   15E2 A3                 4485 	inc	dptr
   15E3 E0                 4486 	movx	a,@dptr
   15E4 FC                 4487 	mov	r4,a
   15E5 A3                 4488 	inc	dptr
   15E6 E0                 4489 	movx	a,@dptr
   15E7 FD                 4490 	mov	r5,a
                           4491 ;	../../core/loader/elfloader.c:538: ret = relocate_section(fd,
   15E8 E5*00              4492 	mov	a,_bp
   15EA 24 9D              4493 	add	a,#0x9d
   15EC F8                 4494 	mov	r0,a
   15ED E6                 4495 	mov	a,@r0
   15EE C0 E0              4496 	push	acc
   15F0 E5*00              4497 	mov	a,_bp
   15F2 24 A8              4498 	add	a,#0xa8
   15F4 F8                 4499 	mov	r0,a
   15F5 E6                 4500 	mov	a,@r0
   15F6 C0 E0              4501 	push	acc
   15F8 08                 4502 	inc	r0
   15F9 E6                 4503 	mov	a,@r0
   15FA C0 E0              4504 	push	acc
   15FC E5*00              4505 	mov	a,_bp
   15FE 24 A6              4506 	add	a,#0xa6
   1600 F8                 4507 	mov	r0,a
   1601 E6                 4508 	mov	a,@r0
   1602 C0 E0              4509 	push	acc
   1604 08                 4510 	inc	r0
   1605 E6                 4511 	mov	a,@r0
   1606 C0 E0              4512 	push	acc
   1608 E5*00              4513 	mov	a,_bp
   160A 24 AA              4514 	add	a,#0xaa
   160C F8                 4515 	mov	r0,a
   160D E6                 4516 	mov	a,@r0
   160E C0 E0              4517 	push	acc
   1610 08                 4518 	inc	r0
   1611 E6                 4519 	mov	a,@r0
   1612 C0 E0              4520 	push	acc
   1614 E5*00              4521 	mov	a,_bp
   1616 24 87              4522 	add	a,#0x87
   1618 F8                 4523 	mov	r0,a
   1619 E6                 4524 	mov	a,@r0
   161A C0 E0              4525 	push	acc
   161C 08                 4526 	inc	r0
   161D E6                 4527 	mov	a,@r0
   161E C0 E0              4528 	push	acc
   1620 C0 03              4529 	push	ar3
   1622 C0 04              4530 	push	ar4
   1624 C0 05              4531 	push	ar5
   1626 E5*00              4532 	mov	a,_bp
   1628 24 A4              4533 	add	a,#0xa4
   162A F8                 4534 	mov	r0,a
   162B E6                 4535 	mov	a,@r0
   162C C0 E0              4536 	push	acc
   162E 08                 4537 	inc	r0
   162F E6                 4538 	mov	a,@r0
   1630 C0 E0              4539 	push	acc
   1632 E5*00              4540 	mov	a,_bp
   1634 24 B2              4541 	add	a,#0xb2
   1636 F8                 4542 	mov	r0,a
   1637 E6                 4543 	mov	a,@r0
   1638 C0 E0              4544 	push	acc
   163A 08                 4545 	inc	r0
   163B E6                 4546 	mov	a,@r0
   163C C0 E0              4547 	push	acc
   163E E5*00              4548 	mov	a,_bp
   1640 24 AE              4549 	add	a,#0xae
   1642 F8                 4550 	mov	r0,a
   1643 E6                 4551 	mov	a,@r0
   1644 C0 E0              4552 	push	acc
   1646 08                 4553 	inc	r0
   1647 E6                 4554 	mov	a,@r0
   1648 C0 E0              4555 	push	acc
   164A A8*00              4556 	mov	r0,_bp
   164C 08                 4557 	inc	r0
   164D 86 82              4558 	mov	dpl,@r0
   164F 08                 4559 	inc	r0
   1650 86 83              4560 	mov	dph,@r0
   1652 12s02r7B           4561 	lcall	_relocate_section
   1655 AC 82              4562 	mov	r4,dpl
   1657 AD 83              4563 	mov	r5,dph
   1659 E5 81              4564 	mov	a,sp
   165B 24 EE              4565 	add	a,#0xee
   165D F5 81              4566 	mov	sp,a
   165F 8C 06              4567 	mov	ar6,r4
   1661 8D 07              4568 	mov	ar7,r5
                           4569 ;	../../core/loader/elfloader.c:545: if(ret != ELFLOADER_OK) {
   1663 EE                 4570 	mov	a,r6
   1664 4F                 4571 	orl	a,r7
   1665 60 07              4572 	jz	00182$
                           4573 ;	../../core/loader/elfloader.c:547: return ret;
   1667 8E 82              4574 	mov	dpl,r6
   1669 8F 83              4575 	mov	dph,r7
   166B 02s18r78           4576 	ljmp	00207$
                           4577 ;	../../core/loader/elfloader.c:552: PRINTF("elfloader: relocate data\n");
   166E                    4578 00182$:
                           4579 ;	../../core/loader/elfloader.c:553: if(datarelasize > 0) {
   166E E5*00              4580 	mov	a,_bp
   1670 24 BC              4581 	add	a,#0xbc
   1672 F8                 4582 	mov	r0,a
   1673 E6                 4583 	mov	a,@r0
   1674 08                 4584 	inc	r0
   1675 46                 4585 	orl	a,@r0
   1676 70 03              4586 	jnz	00284$
   1678 02s17r0C           4587 	ljmp	00189$
   167B                    4588 00284$:
                           4589 ;	../../core/loader/elfloader.c:557: data.address,
   167B 90s00r2A           4590 	mov	dptr,#(_data + 0x0003)
   167E E0                 4591 	movx	a,@dptr
   167F FB                 4592 	mov	r3,a
   1680 A3                 4593 	inc	dptr
   1681 E0                 4594 	movx	a,@dptr
   1682 FC                 4595 	mov	r4,a
   1683 A3                 4596 	inc	dptr
   1684 E0                 4597 	movx	a,@dptr
   1685 FD                 4598 	mov	r5,a
                           4599 ;	../../core/loader/elfloader.c:554: ret = relocate_section(fd,
   1686 E5*00              4600 	mov	a,_bp
   1688 24 9D              4601 	add	a,#0x9d
   168A F8                 4602 	mov	r0,a
   168B E6                 4603 	mov	a,@r0
   168C C0 E0              4604 	push	acc
   168E E5*00              4605 	mov	a,_bp
   1690 24 A8              4606 	add	a,#0xa8
   1692 F8                 4607 	mov	r0,a
   1693 E6                 4608 	mov	a,@r0
   1694 C0 E0              4609 	push	acc
   1696 08                 4610 	inc	r0
   1697 E6                 4611 	mov	a,@r0
   1698 C0 E0              4612 	push	acc
   169A E5*00              4613 	mov	a,_bp
   169C 24 A6              4614 	add	a,#0xa6
   169E F8                 4615 	mov	r0,a
   169F E6                 4616 	mov	a,@r0
   16A0 C0 E0              4617 	push	acc
   16A2 08                 4618 	inc	r0
   16A3 E6                 4619 	mov	a,@r0
   16A4 C0 E0              4620 	push	acc
   16A6 E5*00              4621 	mov	a,_bp
   16A8 24 AA              4622 	add	a,#0xaa
   16AA F8                 4623 	mov	r0,a
   16AB E6                 4624 	mov	a,@r0
   16AC C0 E0              4625 	push	acc
   16AE 08                 4626 	inc	r0
   16AF E6                 4627 	mov	a,@r0
   16B0 C0 E0              4628 	push	acc
   16B2 E5*00              4629 	mov	a,_bp
   16B4 24 87              4630 	add	a,#0x87
   16B6 F8                 4631 	mov	r0,a
   16B7 E6                 4632 	mov	a,@r0
   16B8 C0 E0              4633 	push	acc
   16BA 08                 4634 	inc	r0
   16BB E6                 4635 	mov	a,@r0
   16BC C0 E0              4636 	push	acc
   16BE C0 03              4637 	push	ar3
   16C0 C0 04              4638 	push	ar4
   16C2 C0 05              4639 	push	ar5
   16C4 E5*00              4640 	mov	a,_bp
   16C6 24 A2              4641 	add	a,#0xa2
   16C8 F8                 4642 	mov	r0,a
   16C9 E6                 4643 	mov	a,@r0
   16CA C0 E0              4644 	push	acc
   16CC 08                 4645 	inc	r0
   16CD E6                 4646 	mov	a,@r0
   16CE C0 E0              4647 	push	acc
   16D0 E5*00              4648 	mov	a,_bp
   16D2 24 BC              4649 	add	a,#0xbc
   16D4 F8                 4650 	mov	r0,a
   16D5 E6                 4651 	mov	a,@r0
   16D6 C0 E0              4652 	push	acc
   16D8 08                 4653 	inc	r0
   16D9 E6                 4654 	mov	a,@r0
   16DA C0 E0              4655 	push	acc
   16DC E5*00              4656 	mov	a,_bp
   16DE 24 AC              4657 	add	a,#0xac
   16E0 F8                 4658 	mov	r0,a
   16E1 E6                 4659 	mov	a,@r0
   16E2 C0 E0              4660 	push	acc
   16E4 08                 4661 	inc	r0
   16E5 E6                 4662 	mov	a,@r0
   16E6 C0 E0              4663 	push	acc
   16E8 A8*00              4664 	mov	r0,_bp
   16EA 08                 4665 	inc	r0
   16EB 86 82              4666 	mov	dpl,@r0
   16ED 08                 4667 	inc	r0
   16EE 86 83              4668 	mov	dph,@r0
   16F0 12s02r7B           4669 	lcall	_relocate_section
   16F3 AC 82              4670 	mov	r4,dpl
   16F5 AD 83              4671 	mov	r5,dph
   16F7 E5 81              4672 	mov	a,sp
   16F9 24 EE              4673 	add	a,#0xee
   16FB F5 81              4674 	mov	sp,a
   16FD 8C 06              4675 	mov	ar6,r4
   16FF 8D 07              4676 	mov	ar7,r5
                           4677 ;	../../core/loader/elfloader.c:561: if(ret != ELFLOADER_OK) {
   1701 EE                 4678 	mov	a,r6
   1702 4F                 4679 	orl	a,r7
   1703 60 07              4680 	jz	00189$
                           4681 ;	../../core/loader/elfloader.c:563: return ret;
   1705 8E 82              4682 	mov	dpl,r6
   1707 8F 83              4683 	mov	dph,r7
   1709 02s18r78           4684 	ljmp	00207$
   170C                    4685 00189$:
                           4686 ;	../../core/loader/elfloader.c:568: elfloader_arch_write_rom(fd, textoff, textsize, text.address);
   170C 90s00r36           4687 	mov	dptr,#(_text + 0x0003)
   170F E0                 4688 	movx	a,@dptr
   1710 FD                 4689 	mov	r5,a
   1711 A3                 4690 	inc	dptr
   1712 E0                 4691 	movx	a,@dptr
   1713 FE                 4692 	mov	r6,a
   1714 A3                 4693 	inc	dptr
   1715 E0                 4694 	movx	a,@dptr
   1716 FF                 4695 	mov	r7,a
   1717 C0 05              4696 	push	ar5
   1719 C0 06              4697 	push	ar6
   171B C0 07              4698 	push	ar7
   171D E5*00              4699 	mov	a,_bp
   171F 24 A0              4700 	add	a,#0xa0
   1721 F8                 4701 	mov	r0,a
   1722 E6                 4702 	mov	a,@r0
   1723 C0 E0              4703 	push	acc
   1725 08                 4704 	inc	r0
   1726 E6                 4705 	mov	a,@r0
   1727 C0 E0              4706 	push	acc
   1729 E5*00              4707 	mov	a,_bp
   172B 24 9E              4708 	add	a,#0x9e
   172D F8                 4709 	mov	r0,a
   172E E6                 4710 	mov	a,@r0
   172F C0 E0              4711 	push	acc
   1731 08                 4712 	inc	r0
   1732 E6                 4713 	mov	a,@r0
   1733 C0 E0              4714 	push	acc
   1735 A8*00              4715 	mov	r0,_bp
   1737 08                 4716 	inc	r0
   1738 86 82              4717 	mov	dpl,@r0
   173A 08                 4718 	inc	r0
   173B 86 83              4719 	mov	dph,@r0
   173D 12s00r00           4720 	lcall	_elfloader_arch_write_rom
   1740 E5 81              4721 	mov	a,sp
   1742 24 F9              4722 	add	a,#0xf9
   1744 F5 81              4723 	mov	sp,a
                           4724 ;	../../core/loader/elfloader.c:569: elfloader_arch_write_rom(fd, rodataoff, rodatasize, rodata.address);
   1746 90s00r30           4725 	mov	dptr,#(_rodata + 0x0003)
   1749 E0                 4726 	movx	a,@dptr
   174A FD                 4727 	mov	r5,a
   174B A3                 4728 	inc	dptr
   174C E0                 4729 	movx	a,@dptr
   174D FE                 4730 	mov	r6,a
   174E A3                 4731 	inc	dptr
   174F E0                 4732 	movx	a,@dptr
   1750 FF                 4733 	mov	r7,a
   1751 C0 05              4734 	push	ar5
   1753 C0 06              4735 	push	ar6
   1755 C0 07              4736 	push	ar7
   1757 E5*00              4737 	mov	a,_bp
   1759 24 BA              4738 	add	a,#0xba
   175B F8                 4739 	mov	r0,a
   175C E6                 4740 	mov	a,@r0
   175D C0 E0              4741 	push	acc
   175F 08                 4742 	inc	r0
   1760 E6                 4743 	mov	a,@r0
   1761 C0 E0              4744 	push	acc
   1763 E5*00              4745 	mov	a,_bp
   1765 24 A4              4746 	add	a,#0xa4
   1767 F8                 4747 	mov	r0,a
   1768 E6                 4748 	mov	a,@r0
   1769 C0 E0              4749 	push	acc
   176B 08                 4750 	inc	r0
   176C E6                 4751 	mov	a,@r0
   176D C0 E0              4752 	push	acc
   176F A8*00              4753 	mov	r0,_bp
   1771 08                 4754 	inc	r0
   1772 86 82              4755 	mov	dpl,@r0
   1774 08                 4756 	inc	r0
   1775 86 83              4757 	mov	dph,@r0
   1777 12s00r00           4758 	lcall	_elfloader_arch_write_rom
   177A E5 81              4759 	mov	a,sp
   177C 24 F9              4760 	add	a,#0xf9
   177E F5 81              4761 	mov	sp,a
                           4762 ;	../../core/loader/elfloader.c:571: memset(bss.address, 0, bsssize);
   1780 90s00r24           4763 	mov	dptr,#(_bss + 0x0003)
   1783 E0                 4764 	movx	a,@dptr
   1784 FD                 4765 	mov	r5,a
   1785 A3                 4766 	inc	dptr
   1786 E0                 4767 	movx	a,@dptr
   1787 FE                 4768 	mov	r6,a
   1788 A3                 4769 	inc	dptr
   1789 E0                 4770 	movx	a,@dptr
   178A FF                 4771 	mov	r7,a
   178B E5*00              4772 	mov	a,_bp
   178D 24 B0              4773 	add	a,#0xb0
   178F F8                 4774 	mov	r0,a
   1790 E6                 4775 	mov	a,@r0
   1791 C0 E0              4776 	push	acc
   1793 08                 4777 	inc	r0
   1794 E6                 4778 	mov	a,@r0
   1795 C0 E0              4779 	push	acc
   1797 E4                 4780 	clr	a
   1798 C0 E0              4781 	push	acc
   179A 8D 82              4782 	mov	dpl,r5
   179C 8E 83              4783 	mov	dph,r6
   179E 8F F0              4784 	mov	b,r7
   17A0 12s00r00           4785 	lcall	_memset
   17A3 15 81              4786 	dec	sp
   17A5 15 81              4787 	dec	sp
   17A7 15 81              4788 	dec	sp
                           4789 ;	../../core/loader/elfloader.c:572: seek_read(fd, dataoff, data.address, datasize);
   17A9 E5*00              4790 	mov	a,_bp
   17AB 24 BE              4791 	add	a,#0xbe
   17AD F8                 4792 	mov	r0,a
   17AE 86 06              4793 	mov	ar6,@r0
   17B0 08                 4794 	inc	r0
   17B1 86 07              4795 	mov	ar7,@r0
   17B3 90s00r2A           4796 	mov	dptr,#(_data + 0x0003)
   17B6 E0                 4797 	movx	a,@dptr
   17B7 FB                 4798 	mov	r3,a
   17B8 A3                 4799 	inc	dptr
   17B9 E0                 4800 	movx	a,@dptr
   17BA FC                 4801 	mov	r4,a
   17BB A3                 4802 	inc	dptr
   17BC E0                 4803 	movx	a,@dptr
   17BD FD                 4804 	mov	r5,a
   17BE C0 06              4805 	push	ar6
   17C0 C0 07              4806 	push	ar7
   17C2 C0 03              4807 	push	ar3
   17C4 C0 04              4808 	push	ar4
   17C6 C0 05              4809 	push	ar5
   17C8 E5*00              4810 	mov	a,_bp
   17CA 24 A2              4811 	add	a,#0xa2
   17CC F8                 4812 	mov	r0,a
   17CD E6                 4813 	mov	a,@r0
   17CE C0 E0              4814 	push	acc
   17D0 08                 4815 	inc	r0
   17D1 E6                 4816 	mov	a,@r0
   17D2 C0 E0              4817 	push	acc
   17D4 A8*00              4818 	mov	r0,_bp
   17D6 08                 4819 	inc	r0
   17D7 86 82              4820 	mov	dpl,@r0
   17D9 08                 4821 	inc	r0
   17DA 86 83              4822 	mov	dph,@r0
   17DC 12s00r00           4823 	lcall	_seek_read
   17DF E5 81              4824 	mov	a,sp
   17E1 24 F9              4825 	add	a,#0xf9
   17E3 F5 81              4826 	mov	sp,a
                           4827 ;	../../core/loader/elfloader.c:575: process = (struct process **) find_local_symbol(fd, "autostart_processes", symtaboff, symtabsize, strtaboff);
   17E5 E5*00              4828 	mov	a,_bp
   17E7 24 AA              4829 	add	a,#0xaa
   17E9 F8                 4830 	mov	r0,a
   17EA E6                 4831 	mov	a,@r0
   17EB C0 E0              4832 	push	acc
   17ED 08                 4833 	inc	r0
   17EE E6                 4834 	mov	a,@r0
   17EF C0 E0              4835 	push	acc
   17F1 E5*00              4836 	mov	a,_bp
   17F3 24 A8              4837 	add	a,#0xa8
   17F5 F8                 4838 	mov	r0,a
   17F6 E6                 4839 	mov	a,@r0
   17F7 C0 E0              4840 	push	acc
   17F9 08                 4841 	inc	r0
   17FA E6                 4842 	mov	a,@r0
   17FB C0 E0              4843 	push	acc
   17FD E5*00              4844 	mov	a,_bp
   17FF 24 A6              4845 	add	a,#0xa6
   1801 F8                 4846 	mov	r0,a
   1802 E6                 4847 	mov	a,@r0
   1803 C0 E0              4848 	push	acc
   1805 08                 4849 	inc	r0
   1806 E6                 4850 	mov	a,@r0
   1807 C0 E0              4851 	push	acc
   1809 74r07              4852 	mov	a,#__str_0
   180B C0 E0              4853 	push	acc
   180D 74s00              4854 	mov	a,#(__str_0 >> 8)
   180F C0 E0              4855 	push	acc
   1811 74 80              4856 	mov	a,#0x80
   1813 C0 E0              4857 	push	acc
   1815 A8*00              4858 	mov	r0,_bp
   1817 08                 4859 	inc	r0
   1818 86 82              4860 	mov	dpl,@r0
   181A 08                 4861 	inc	r0
   181B 86 83              4862 	mov	dph,@r0
   181D 12s00r65           4863 	lcall	_find_local_symbol
   1820 AD 82              4864 	mov	r5,dpl
   1822 AE 83              4865 	mov	r6,dph
   1824 AF F0              4866 	mov	r7,b
   1826 E5 81              4867 	mov	a,sp
   1828 24 F7              4868 	add	a,#0xf7
   182A F5 81              4869 	mov	sp,a
                           4870 ;	../../core/loader/elfloader.c:576: if(process != NULL) {
   182C ED                 4871 	mov	a,r5
   182D 4E                 4872 	orl	a,r6
   182E 60 10              4873 	jz	00194$
                           4874 ;	../../core/loader/elfloader.c:578: elfloader_autostart_processes = process;
   1830 90s00r1E           4875 	mov	dptr,#_elfloader_autostart_processes
   1833 ED                 4876 	mov	a,r5
   1834 F0                 4877 	movx	@dptr,a
   1835 A3                 4878 	inc	dptr
   1836 EE                 4879 	mov	a,r6
   1837 F0                 4880 	movx	@dptr,a
   1838 A3                 4881 	inc	dptr
   1839 EF                 4882 	mov	a,r7
   183A F0                 4883 	movx	@dptr,a
                           4884 ;	../../core/loader/elfloader.c:579: return ELFLOADER_OK;
   183B 90 00 00           4885 	mov	dptr,#0x0000
                           4886 ;	../../core/loader/elfloader.c:581: PRINTF("elfloader: no autostart\n");
   183E 80 38              4887 	sjmp	00207$
   1840                    4888 00194$:
                           4889 ;	../../core/loader/elfloader.c:582: process = (struct process **) find_program_processes(fd, symtaboff, symtabsize, strtaboff);
   1840 E5*00              4890 	mov	a,_bp
   1842 24 AA              4891 	add	a,#0xaa
   1844 F8                 4892 	mov	r0,a
   1845 E6                 4893 	mov	a,@r0
   1846 C0 E0              4894 	push	acc
   1848 08                 4895 	inc	r0
   1849 E6                 4896 	mov	a,@r0
   184A C0 E0              4897 	push	acc
   184C E5*00              4898 	mov	a,_bp
   184E 24 A8              4899 	add	a,#0xa8
   1850 F8                 4900 	mov	r0,a
   1851 E6                 4901 	mov	a,@r0
   1852 C0 E0              4902 	push	acc
   1854 08                 4903 	inc	r0
   1855 E6                 4904 	mov	a,@r0
   1856 C0 E0              4905 	push	acc
   1858 E5*00              4906 	mov	a,_bp
   185A 24 A6              4907 	add	a,#0xa6
   185C F8                 4908 	mov	r0,a
   185D E6                 4909 	mov	a,@r0
   185E C0 E0              4910 	push	acc
   1860 08                 4911 	inc	r0
   1861 E6                 4912 	mov	a,@r0
   1862 C0 E0              4913 	push	acc
   1864 A8*00              4914 	mov	r0,_bp
   1866 08                 4915 	inc	r0
   1867 86 82              4916 	mov	dpl,@r0
   1869 08                 4917 	inc	r0
   186A 86 83              4918 	mov	dph,@r0
   186C 12s07r6D           4919 	lcall	_find_program_processes
   186F E5 81              4920 	mov	a,sp
   1871 24 FA              4921 	add	a,#0xfa
   1873 F5 81              4922 	mov	sp,a
                           4923 ;	../../core/loader/elfloader.c:586: return ELFLOADER_NO_STARTPOINT;
   1875 90 00 07           4924 	mov	dptr,#0x0007
   1878                    4925 00207$:
   1878 85*00 81           4926 	mov	sp,_bp
   187B D0*00              4927 	pop	_bp
   187D 22                 4928 	ret
                           4929 	.area CSEG    (CODE)
                           4930 	.area CONST   (CODE)
   0000                    4931 _elf_magic_header:
   0000 7F                 4932 	.db #0x7F	; 127
   0001 45                 4933 	.db #0x45	; 69	'E'
   0002 4C                 4934 	.db #0x4C	; 76	'L'
   0003 46                 4935 	.db #0x46	; 70	'F'
   0004 01                 4936 	.db #0x01	; 1
   0005 01                 4937 	.db #0x01	; 1
   0006 01                 4938 	.db #0x01	; 1
   0007                    4939 __str_0:
   0007 61 75 74 6F 73 74  4940 	.ascii "autostart_processes"
        61 72 74 5F 70 72
        6F 63 65 73 73 65
        73
   001A 00                 4941 	.db 0x00
   001B                    4942 __str_1:
   001B 2E 74 65 78 74     4943 	.ascii ".text"
   0020 00                 4944 	.db 0x00
   0021                    4945 __str_2:
   0021 2E 72 65 6C 2E 74  4946 	.ascii ".rel.text"
        65 78 74
   002A 00                 4947 	.db 0x00
   002B                    4948 __str_3:
   002B 2E 72 65 6C 61 2E  4949 	.ascii ".rela.text"
        74 65 78 74
   0035 00                 4950 	.db 0x00
   0036                    4951 __str_4:
   0036 2E 64 61 74 61     4952 	.ascii ".data"
   003B 00                 4953 	.db 0x00
   003C                    4954 __str_5:
   003C 2E 72 6F 64 61 74  4955 	.ascii ".rodata"
        61
   0043 00                 4956 	.db 0x00
   0044                    4957 __str_6:
   0044 2E 72 65 6C 2E 72  4958 	.ascii ".rel.rodata"
        6F 64 61 74 61
   004F 00                 4959 	.db 0x00
   0050                    4960 __str_7:
   0050 2E 72 65 6C 61 2E  4961 	.ascii ".rela.rodata"
        72 6F 64 61 74 61
   005C 00                 4962 	.db 0x00
   005D                    4963 __str_8:
   005D 2E 72 65 6C 2E 64  4964 	.ascii ".rel.data"
        61 74 61
   0066 00                 4965 	.db 0x00
   0067                    4966 __str_9:
   0067 2E 72 65 6C 61 2E  4967 	.ascii ".rela.data"
        64 61 74 61
   0071 00                 4968 	.db 0x00
   0072                    4969 __str_10:
   0072 2E 62 73 73        4970 	.ascii ".bss"
   0076 00                 4971 	.db 0x00
                           4972 	.area XINIT   (CODE)
                           4973 	.area CABS    (ABS,CODE)
