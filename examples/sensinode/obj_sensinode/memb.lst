                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.1 #7100 (Apr  1 2013) (Linux)
                              4 ; This file was generated Tue Apr 23 09:41:24 2013
                              5 ;--------------------------------------------------------
                              6 	.module memb
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _memset
                             13 	.globl _IRCON2_P2IF
                             14 	.globl _IRCON2_UTX0IF
                             15 	.globl _IRCON2_UTX1IF
                             16 	.globl _IRCON2_P1IF
                             17 	.globl _IRCON2_WDTIF
                             18 	.globl _CY
                             19 	.globl _AC
                             20 	.globl _F0
                             21 	.globl _RS1
                             22 	.globl _RS0
                             23 	.globl _OV
                             24 	.globl _F1
                             25 	.globl _P
                             26 	.globl _IRCON_DMAIF
                             27 	.globl _IRCON_T1IF
                             28 	.globl _IRCON_T2IF
                             29 	.globl _IRCON_T3IF
                             30 	.globl _IRCON_T4IF
                             31 	.globl _IRCON_P0IF
                             32 	.globl _IRCON_STIF
                             33 	.globl _IEN1_DMAIE
                             34 	.globl _IEN1_T1IE
                             35 	.globl _IEN1_T2IE
                             36 	.globl _IEN1_T3IE
                             37 	.globl _IEN1_T4IE
                             38 	.globl _IEN1_P0IE
                             39 	.globl _IEN0_RFERRIE
                             40 	.globl _IEN0_ADCIE
                             41 	.globl _IEN0_URX0IE
                             42 	.globl _IEN0_URX1IE
                             43 	.globl _IEN0_ENCIE
                             44 	.globl _IEN0_STIE
                             45 	.globl _IEN0_EA
                             46 	.globl _EA
                             47 	.globl _P2_4
                             48 	.globl _P2_3
                             49 	.globl _P2_2
                             50 	.globl _P2_1
                             51 	.globl _P2_0
                             52 	.globl _S0CON_ENCIF_0
                             53 	.globl _S0CON_ENCIF_1
                             54 	.globl _P1_7
                             55 	.globl _P1_6
                             56 	.globl _P1_5
                             57 	.globl _P1_4
                             58 	.globl _P1_3
                             59 	.globl _P1_2
                             60 	.globl _P1_1
                             61 	.globl _P1_0
                             62 	.globl _TCON_IT0
                             63 	.globl _TCON_RFERRIF
                             64 	.globl _TCON_IT1
                             65 	.globl _TCON_URX0IF
                             66 	.globl _TCON_ADCIF
                             67 	.globl _TCON_URX1IF
                             68 	.globl _P0_0
                             69 	.globl _P0_1
                             70 	.globl _P0_2
                             71 	.globl _P0_3
                             72 	.globl _P0_4
                             73 	.globl _P0_5
                             74 	.globl _P0_6
                             75 	.globl _P0_7
                             76 	.globl _P2DIR
                             77 	.globl _P1DIR
                             78 	.globl _P0DIR
                             79 	.globl _U1GCR
                             80 	.globl _U1UCR
                             81 	.globl _U1BAUD
                             82 	.globl _U1BUF
                             83 	.globl _U1CSR
                             84 	.globl _P2INP
                             85 	.globl _P1INP
                             86 	.globl _P2SEL
                             87 	.globl _P1SEL
                             88 	.globl _P0SEL
                             89 	.globl _ADCCFG
                             90 	.globl _PERCFG
                             91 	.globl _B
                             92 	.globl _T4CC1
                             93 	.globl _T4CCTL1
                             94 	.globl _T4CC0
                             95 	.globl _T4CCTL0
                             96 	.globl _T4CTL
                             97 	.globl _T4CNT
                             98 	.globl _RFIF
                             99 	.globl _IRCON2
                            100 	.globl _T1CCTL2
                            101 	.globl _T1CCTL1
                            102 	.globl _T1CCTL0
                            103 	.globl _T1CTL
                            104 	.globl _T1CNTH
                            105 	.globl _T1CNTL
                            106 	.globl _RFST
                            107 	.globl _ACC
                            108 	.globl _T1CC2H
                            109 	.globl _T1CC2L
                            110 	.globl _T1CC1H
                            111 	.globl _T1CC1L
                            112 	.globl _T1CC0H
                            113 	.globl _T1CC0L
                            114 	.globl _RFD
                            115 	.globl _TIMIF
                            116 	.globl _DMAREQ
                            117 	.globl _DMAARM
                            118 	.globl _DMA0CFGH
                            119 	.globl _DMA0CFGL
                            120 	.globl _DMA1CFGH
                            121 	.globl _DMA1CFGL
                            122 	.globl _DMAIRQ
                            123 	.globl _PSW
                            124 	.globl _T3CC1
                            125 	.globl _T3CCTL1
                            126 	.globl _T3CC0
                            127 	.globl _T3CCTL0
                            128 	.globl _T3CTL
                            129 	.globl _T3CNT
                            130 	.globl _WDCTL
                            131 	.globl _T2CON
                            132 	.globl _MEMCTR
                            133 	.globl _CLKCON
                            134 	.globl _U0GCR
                            135 	.globl _U0UCR
                            136 	.globl _T2CNF
                            137 	.globl _U0BAUD
                            138 	.globl _U0BUF
                            139 	.globl _IRCON
                            140 	.globl _SLEEP
                            141 	.globl _RNDH
                            142 	.globl _RNDL
                            143 	.globl _ADCH
                            144 	.globl _ADCL
                            145 	.globl _IP1
                            146 	.globl _IEN1
                            147 	.globl _RCCTL
                            148 	.globl _ADCCON3
                            149 	.globl _ADCCON2
                            150 	.globl _ADCCON1
                            151 	.globl _ENCCS
                            152 	.globl _ENCDO
                            153 	.globl _ENCDI
                            154 	.globl _FWDATA
                            155 	.globl _FCTL
                            156 	.globl _FADDRH
                            157 	.globl _FADDRL
                            158 	.globl _FWT
                            159 	.globl _IP0
                            160 	.globl _IEN0
                            161 	.globl _IE
                            162 	.globl _T2THD
                            163 	.globl _T2TLD
                            164 	.globl _T2CAPHPH
                            165 	.globl _T2CAPLPL
                            166 	.globl _T2OF2
                            167 	.globl _T2OF1
                            168 	.globl _T2OF0
                            169 	.globl _P2
                            170 	.globl _PSBANK
                            171 	.globl _FMAP
                            172 	.globl _T2PEROF2
                            173 	.globl _T2PEROF1
                            174 	.globl _T2PEROF0
                            175 	.globl _S1CON
                            176 	.globl _IEN2
                            177 	.globl _HSRC
                            178 	.globl _S0CON
                            179 	.globl _ST2
                            180 	.globl _ST1
                            181 	.globl _ST0
                            182 	.globl _T2CMP
                            183 	.globl __XPAGE
                            184 	.globl _DPS
                            185 	.globl _RFIM
                            186 	.globl _P1
                            187 	.globl _P0INP
                            188 	.globl _P1IEN
                            189 	.globl _PICTL
                            190 	.globl _P2IFG
                            191 	.globl _P1IFG
                            192 	.globl _P0IFG
                            193 	.globl _TCON
                            194 	.globl _PCON
                            195 	.globl _U0CSR
                            196 	.globl _DPH1
                            197 	.globl _DPL1
                            198 	.globl _DPH0
                            199 	.globl _DPL0
                            200 	.globl _SP
                            201 	.globl _P0
                            202 	.globl _ADC_SHADOW
                            203 	.globl _U1BUF_SHADOW
                            204 	.globl _RFD_SHADOW
                            205 	.globl _U0BUF_SHADOW
                            206 	.globl _RFSTATUS
                            207 	.globl _CHIPID
                            208 	.globl _CHVER
                            209 	.globl _FSMTC1
                            210 	.globl _RXFIFOCNT
                            211 	.globl _IOCFG3
                            212 	.globl _IOCFG2
                            213 	.globl _IOCFG1
                            214 	.globl _IOCFG0
                            215 	.globl _SHORTADDRL
                            216 	.globl _SHORTADDRH
                            217 	.globl _PANIDL
                            218 	.globl _PANIDH
                            219 	.globl _IEEE_ADDR7
                            220 	.globl _IEEE_ADDR6
                            221 	.globl _IEEE_ADDR5
                            222 	.globl _IEEE_ADDR4
                            223 	.globl _IEEE_ADDR3
                            224 	.globl _IEEE_ADDR2
                            225 	.globl _IEEE_ADDR1
                            226 	.globl _IEEE_ADDR0
                            227 	.globl _DACTSTL
                            228 	.globl _DACTSTH
                            229 	.globl _ADCTSTL
                            230 	.globl _ADCTSTH
                            231 	.globl _FSMSTATE
                            232 	.globl _AGCCTRLL
                            233 	.globl _AGCCTRLH
                            234 	.globl _MANORL
                            235 	.globl _MANORH
                            236 	.globl _MANANDL
                            237 	.globl _MANANDH
                            238 	.globl _FSMTCL
                            239 	.globl _FSMTCH
                            240 	.globl _RFPWR
                            241 	.globl _CSPT
                            242 	.globl _CSPCTRL
                            243 	.globl _CSPZ
                            244 	.globl _CSPY
                            245 	.globl _CSPX
                            246 	.globl _FSCTRLL
                            247 	.globl _FSCTRLH
                            248 	.globl _RXCTRL1L
                            249 	.globl _RXCTRL1H
                            250 	.globl _RXCTRL0L
                            251 	.globl _RXCTRL0H
                            252 	.globl _TXCTRLL
                            253 	.globl _TXCTRLH
                            254 	.globl _SYNCWORDL
                            255 	.globl _SYNCWORDH
                            256 	.globl _RSSIL
                            257 	.globl _RSSIH
                            258 	.globl _MDMCTRL1L
                            259 	.globl _MDMCTRL1H
                            260 	.globl _MDMCTRL0L
                            261 	.globl _MDMCTRL0H
                            262 	.globl _memb_init
                            263 	.globl _memb_alloc
                            264 	.globl _memb_free
                            265 	.globl _memb_inmemb
                            266 ;--------------------------------------------------------
                            267 ; special function registers
                            268 ;--------------------------------------------------------
                            269 	.area RSEG    (ABS,DATA)
   0000                     270 	.org 0x0000
                    0080    271 _P0	=	0x0080
                    0081    272 _SP	=	0x0081
                    0082    273 _DPL0	=	0x0082
                    0083    274 _DPH0	=	0x0083
                    0084    275 _DPL1	=	0x0084
                    0085    276 _DPH1	=	0x0085
                    0086    277 _U0CSR	=	0x0086
                    0087    278 _PCON	=	0x0087
                    0088    279 _TCON	=	0x0088
                    0089    280 _P0IFG	=	0x0089
                    008A    281 _P1IFG	=	0x008a
                    008B    282 _P2IFG	=	0x008b
                    008C    283 _PICTL	=	0x008c
                    008D    284 _P1IEN	=	0x008d
                    008F    285 _P0INP	=	0x008f
                    0090    286 _P1	=	0x0090
                    0091    287 _RFIM	=	0x0091
                    0092    288 _DPS	=	0x0092
                    0093    289 __XPAGE	=	0x0093
                    0094    290 _T2CMP	=	0x0094
                    0095    291 _ST0	=	0x0095
                    0096    292 _ST1	=	0x0096
                    0097    293 _ST2	=	0x0097
                    0098    294 _S0CON	=	0x0098
                    0099    295 _HSRC	=	0x0099
                    009A    296 _IEN2	=	0x009a
                    009B    297 _S1CON	=	0x009b
                    009C    298 _T2PEROF0	=	0x009c
                    009D    299 _T2PEROF1	=	0x009d
                    009E    300 _T2PEROF2	=	0x009e
                    009F    301 _FMAP	=	0x009f
                    009F    302 _PSBANK	=	0x009f
                    00A0    303 _P2	=	0x00a0
                    00A1    304 _T2OF0	=	0x00a1
                    00A2    305 _T2OF1	=	0x00a2
                    00A3    306 _T2OF2	=	0x00a3
                    00A4    307 _T2CAPLPL	=	0x00a4
                    00A5    308 _T2CAPHPH	=	0x00a5
                    00A6    309 _T2TLD	=	0x00a6
                    00A7    310 _T2THD	=	0x00a7
                    00A8    311 _IE	=	0x00a8
                    00A8    312 _IEN0	=	0x00a8
                    00A9    313 _IP0	=	0x00a9
                    00AB    314 _FWT	=	0x00ab
                    00AC    315 _FADDRL	=	0x00ac
                    00AD    316 _FADDRH	=	0x00ad
                    00AE    317 _FCTL	=	0x00ae
                    00AF    318 _FWDATA	=	0x00af
                    00B1    319 _ENCDI	=	0x00b1
                    00B2    320 _ENCDO	=	0x00b2
                    00B3    321 _ENCCS	=	0x00b3
                    00B4    322 _ADCCON1	=	0x00b4
                    00B5    323 _ADCCON2	=	0x00b5
                    00B6    324 _ADCCON3	=	0x00b6
                    00B7    325 _RCCTL	=	0x00b7
                    00B8    326 _IEN1	=	0x00b8
                    00B9    327 _IP1	=	0x00b9
                    00BA    328 _ADCL	=	0x00ba
                    00BB    329 _ADCH	=	0x00bb
                    00BC    330 _RNDL	=	0x00bc
                    00BD    331 _RNDH	=	0x00bd
                    00BE    332 _SLEEP	=	0x00be
                    00C0    333 _IRCON	=	0x00c0
                    00C1    334 _U0BUF	=	0x00c1
                    00C2    335 _U0BAUD	=	0x00c2
                    00C3    336 _T2CNF	=	0x00c3
                    00C4    337 _U0UCR	=	0x00c4
                    00C5    338 _U0GCR	=	0x00c5
                    00C6    339 _CLKCON	=	0x00c6
                    00C7    340 _MEMCTR	=	0x00c7
                    00C8    341 _T2CON	=	0x00c8
                    00C9    342 _WDCTL	=	0x00c9
                    00CA    343 _T3CNT	=	0x00ca
                    00CB    344 _T3CTL	=	0x00cb
                    00CC    345 _T3CCTL0	=	0x00cc
                    00CD    346 _T3CC0	=	0x00cd
                    00CE    347 _T3CCTL1	=	0x00ce
                    00CF    348 _T3CC1	=	0x00cf
                    00D0    349 _PSW	=	0x00d0
                    00D1    350 _DMAIRQ	=	0x00d1
                    00D2    351 _DMA1CFGL	=	0x00d2
                    00D3    352 _DMA1CFGH	=	0x00d3
                    00D4    353 _DMA0CFGL	=	0x00d4
                    00D5    354 _DMA0CFGH	=	0x00d5
                    00D6    355 _DMAARM	=	0x00d6
                    00D7    356 _DMAREQ	=	0x00d7
                    00D8    357 _TIMIF	=	0x00d8
                    00D9    358 _RFD	=	0x00d9
                    00DA    359 _T1CC0L	=	0x00da
                    00DB    360 _T1CC0H	=	0x00db
                    00DC    361 _T1CC1L	=	0x00dc
                    00DD    362 _T1CC1H	=	0x00dd
                    00DE    363 _T1CC2L	=	0x00de
                    00DF    364 _T1CC2H	=	0x00df
                    00E0    365 _ACC	=	0x00e0
                    00E1    366 _RFST	=	0x00e1
                    00E2    367 _T1CNTL	=	0x00e2
                    00E3    368 _T1CNTH	=	0x00e3
                    00E4    369 _T1CTL	=	0x00e4
                    00E5    370 _T1CCTL0	=	0x00e5
                    00E6    371 _T1CCTL1	=	0x00e6
                    00E7    372 _T1CCTL2	=	0x00e7
                    00E8    373 _IRCON2	=	0x00e8
                    00E9    374 _RFIF	=	0x00e9
                    00EA    375 _T4CNT	=	0x00ea
                    00EB    376 _T4CTL	=	0x00eb
                    00EC    377 _T4CCTL0	=	0x00ec
                    00ED    378 _T4CC0	=	0x00ed
                    00EE    379 _T4CCTL1	=	0x00ee
                    00EF    380 _T4CC1	=	0x00ef
                    00F0    381 _B	=	0x00f0
                    00F1    382 _PERCFG	=	0x00f1
                    00F2    383 _ADCCFG	=	0x00f2
                    00F3    384 _P0SEL	=	0x00f3
                    00F4    385 _P1SEL	=	0x00f4
                    00F5    386 _P2SEL	=	0x00f5
                    00F6    387 _P1INP	=	0x00f6
                    00F7    388 _P2INP	=	0x00f7
                    00F8    389 _U1CSR	=	0x00f8
                    00F9    390 _U1BUF	=	0x00f9
                    00FA    391 _U1BAUD	=	0x00fa
                    00FB    392 _U1UCR	=	0x00fb
                    00FC    393 _U1GCR	=	0x00fc
                    00FD    394 _P0DIR	=	0x00fd
                    00FE    395 _P1DIR	=	0x00fe
                    00FF    396 _P2DIR	=	0x00ff
                            397 ;--------------------------------------------------------
                            398 ; special function bits
                            399 ;--------------------------------------------------------
                            400 	.area RSEG    (ABS,DATA)
   0000                     401 	.org 0x0000
                    0087    402 _P0_7	=	0x0087
                    0086    403 _P0_6	=	0x0086
                    0085    404 _P0_5	=	0x0085
                    0084    405 _P0_4	=	0x0084
                    0083    406 _P0_3	=	0x0083
                    0082    407 _P0_2	=	0x0082
                    0081    408 _P0_1	=	0x0081
                    0080    409 _P0_0	=	0x0080
                    008F    410 _TCON_URX1IF	=	0x008f
                    008D    411 _TCON_ADCIF	=	0x008d
                    008B    412 _TCON_URX0IF	=	0x008b
                    008A    413 _TCON_IT1	=	0x008a
                    0089    414 _TCON_RFERRIF	=	0x0089
                    0088    415 _TCON_IT0	=	0x0088
                    0090    416 _P1_0	=	0x0090
                    0091    417 _P1_1	=	0x0091
                    0092    418 _P1_2	=	0x0092
                    0093    419 _P1_3	=	0x0093
                    0094    420 _P1_4	=	0x0094
                    0095    421 _P1_5	=	0x0095
                    0096    422 _P1_6	=	0x0096
                    0097    423 _P1_7	=	0x0097
                    0099    424 _S0CON_ENCIF_1	=	0x0099
                    0098    425 _S0CON_ENCIF_0	=	0x0098
                    00A0    426 _P2_0	=	0x00a0
                    00A1    427 _P2_1	=	0x00a1
                    00A2    428 _P2_2	=	0x00a2
                    00A3    429 _P2_3	=	0x00a3
                    00A4    430 _P2_4	=	0x00a4
                    00AF    431 _EA	=	0x00af
                    00AF    432 _IEN0_EA	=	0x00af
                    00AD    433 _IEN0_STIE	=	0x00ad
                    00AC    434 _IEN0_ENCIE	=	0x00ac
                    00AB    435 _IEN0_URX1IE	=	0x00ab
                    00AA    436 _IEN0_URX0IE	=	0x00aa
                    00A9    437 _IEN0_ADCIE	=	0x00a9
                    00A8    438 _IEN0_RFERRIE	=	0x00a8
                    00BD    439 _IEN1_P0IE	=	0x00bd
                    00BC    440 _IEN1_T4IE	=	0x00bc
                    00BB    441 _IEN1_T3IE	=	0x00bb
                    00BA    442 _IEN1_T2IE	=	0x00ba
                    00B9    443 _IEN1_T1IE	=	0x00b9
                    00B8    444 _IEN1_DMAIE	=	0x00b8
                    00C7    445 _IRCON_STIF	=	0x00c7
                    00C5    446 _IRCON_P0IF	=	0x00c5
                    00C4    447 _IRCON_T4IF	=	0x00c4
                    00C3    448 _IRCON_T3IF	=	0x00c3
                    00C2    449 _IRCON_T2IF	=	0x00c2
                    00C1    450 _IRCON_T1IF	=	0x00c1
                    00C0    451 _IRCON_DMAIF	=	0x00c0
                    00D0    452 _P	=	0x00d0
                    00D1    453 _F1	=	0x00d1
                    00D2    454 _OV	=	0x00d2
                    00D3    455 _RS0	=	0x00d3
                    00D4    456 _RS1	=	0x00d4
                    00D5    457 _F0	=	0x00d5
                    00D6    458 _AC	=	0x00d6
                    00D7    459 _CY	=	0x00d7
                    00EC    460 _IRCON2_WDTIF	=	0x00ec
                    00EB    461 _IRCON2_P1IF	=	0x00eb
                    00EA    462 _IRCON2_UTX1IF	=	0x00ea
                    00E9    463 _IRCON2_UTX0IF	=	0x00e9
                    00E8    464 _IRCON2_P2IF	=	0x00e8
                            465 ;--------------------------------------------------------
                            466 ; overlayable register banks
                            467 ;--------------------------------------------------------
                            468 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     469 	.ds 8
                            470 ;--------------------------------------------------------
                            471 ; internal ram data
                            472 ;--------------------------------------------------------
                            473 	.area DSEG    (DATA)
                            474 ;--------------------------------------------------------
                            475 ; overlayable items in internal ram 
                            476 ;--------------------------------------------------------
                            477 	.area OSEG    (OVR,DATA)
                            478 ;--------------------------------------------------------
                            479 ; indirectly addressable internal ram data
                            480 ;--------------------------------------------------------
                            481 	.area ISEG    (DATA)
                            482 ;--------------------------------------------------------
                            483 ; absolute internal ram data
                            484 ;--------------------------------------------------------
                            485 	.area IABS    (ABS,DATA)
                            486 	.area IABS    (ABS,DATA)
                            487 ;--------------------------------------------------------
                            488 ; bit data
                            489 ;--------------------------------------------------------
                            490 	.area BSEG    (BIT)
                            491 ;--------------------------------------------------------
                            492 ; paged external ram data
                            493 ;--------------------------------------------------------
                            494 	.area PSEG    (PAG,XDATA)
                            495 ;--------------------------------------------------------
                            496 ; external ram data
                            497 ;--------------------------------------------------------
                            498 	.area XSEG    (XDATA)
                    DF02    499 _MDMCTRL0H	=	0xdf02
                    DF03    500 _MDMCTRL0L	=	0xdf03
                    DF04    501 _MDMCTRL1H	=	0xdf04
                    DF05    502 _MDMCTRL1L	=	0xdf05
                    DF06    503 _RSSIH	=	0xdf06
                    DF07    504 _RSSIL	=	0xdf07
                    DF08    505 _SYNCWORDH	=	0xdf08
                    DF09    506 _SYNCWORDL	=	0xdf09
                    DF0A    507 _TXCTRLH	=	0xdf0a
                    DF0B    508 _TXCTRLL	=	0xdf0b
                    DF0C    509 _RXCTRL0H	=	0xdf0c
                    DF0D    510 _RXCTRL0L	=	0xdf0d
                    DF0E    511 _RXCTRL1H	=	0xdf0e
                    DF0F    512 _RXCTRL1L	=	0xdf0f
                    DF10    513 _FSCTRLH	=	0xdf10
                    DF11    514 _FSCTRLL	=	0xdf11
                    DF12    515 _CSPX	=	0xdf12
                    DF13    516 _CSPY	=	0xdf13
                    DF14    517 _CSPZ	=	0xdf14
                    DF15    518 _CSPCTRL	=	0xdf15
                    DF16    519 _CSPT	=	0xdf16
                    DF17    520 _RFPWR	=	0xdf17
                    DF20    521 _FSMTCH	=	0xdf20
                    DF21    522 _FSMTCL	=	0xdf21
                    DF22    523 _MANANDH	=	0xdf22
                    DF23    524 _MANANDL	=	0xdf23
                    DF24    525 _MANORH	=	0xdf24
                    DF25    526 _MANORL	=	0xdf25
                    DF26    527 _AGCCTRLH	=	0xdf26
                    DF27    528 _AGCCTRLL	=	0xdf27
                    DF39    529 _FSMSTATE	=	0xdf39
                    DF3A    530 _ADCTSTH	=	0xdf3a
                    DF3B    531 _ADCTSTL	=	0xdf3b
                    DF3C    532 _DACTSTH	=	0xdf3c
                    DF3D    533 _DACTSTL	=	0xdf3d
                    DF43    534 _IEEE_ADDR0	=	0xdf43
                    DF44    535 _IEEE_ADDR1	=	0xdf44
                    DF45    536 _IEEE_ADDR2	=	0xdf45
                    DF46    537 _IEEE_ADDR3	=	0xdf46
                    DF47    538 _IEEE_ADDR4	=	0xdf47
                    DF48    539 _IEEE_ADDR5	=	0xdf48
                    DF49    540 _IEEE_ADDR6	=	0xdf49
                    DF4A    541 _IEEE_ADDR7	=	0xdf4a
                    DF4B    542 _PANIDH	=	0xdf4b
                    DF4C    543 _PANIDL	=	0xdf4c
                    DF4D    544 _SHORTADDRH	=	0xdf4d
                    DF4E    545 _SHORTADDRL	=	0xdf4e
                    DF4F    546 _IOCFG0	=	0xdf4f
                    DF50    547 _IOCFG1	=	0xdf50
                    DF51    548 _IOCFG2	=	0xdf51
                    DF52    549 _IOCFG3	=	0xdf52
                    DF53    550 _RXFIFOCNT	=	0xdf53
                    DF54    551 _FSMTC1	=	0xdf54
                    DF60    552 _CHVER	=	0xdf60
                    DF61    553 _CHIPID	=	0xdf61
                    DF62    554 _RFSTATUS	=	0xdf62
                    DFC1    555 _U0BUF_SHADOW	=	0xdfc1
                    DFD9    556 _RFD_SHADOW	=	0xdfd9
                    DFF9    557 _U1BUF_SHADOW	=	0xdff9
                    DFBA    558 _ADC_SHADOW	=	0xdfba
                            559 ;--------------------------------------------------------
                            560 ; absolute external ram data
                            561 ;--------------------------------------------------------
                            562 	.area XABS    (ABS,XDATA)
                            563 ;--------------------------------------------------------
                            564 ; external initialized ram data
                            565 ;--------------------------------------------------------
                            566 	.area XISEG   (XDATA)
                            567 	.area HOME    (CODE)
                            568 	.area GSINIT0 (CODE)
                            569 	.area GSINIT1 (CODE)
                            570 	.area GSINIT2 (CODE)
                            571 	.area GSINIT3 (CODE)
                            572 	.area GSINIT4 (CODE)
                            573 	.area GSINIT5 (CODE)
                            574 	.area GSINIT  (CODE)
                            575 	.area GSFINAL (CODE)
                            576 	.area CSEG    (CODE)
                            577 ;--------------------------------------------------------
                            578 ; global & static initialisations
                            579 ;--------------------------------------------------------
                            580 	.area HOME    (CODE)
                            581 	.area GSINIT  (CODE)
                            582 	.area GSFINAL (CODE)
                            583 	.area GSINIT  (CODE)
                            584 ;--------------------------------------------------------
                            585 ; Home
                            586 ;--------------------------------------------------------
                            587 	.area HOME    (CODE)
                            588 	.area HOME    (CODE)
                            589 ;--------------------------------------------------------
                            590 ; code
                            591 ;--------------------------------------------------------
                            592 	.area CSEG    (CODE)
                            593 ;------------------------------------------------------------
                            594 ;Allocation info for local variables in function 'memb_init'
                            595 ;------------------------------------------------------------
                            596 ;m                         Allocated to stack - _bp +1
                            597 ;sloc0                     Allocated to stack - _bp +4
                            598 ;------------------------------------------------------------
                            599 ;	../../core/lib/memb.c:53: memb_init(struct memb *m)
                            600 ;	-----------------------------------------
                            601 ;	 function memb_init
                            602 ;	-----------------------------------------
   0000                     603 _memb_init:
                    0007    604 	ar7 = 0x07
                    0006    605 	ar6 = 0x06
                    0005    606 	ar5 = 0x05
                    0004    607 	ar4 = 0x04
                    0003    608 	ar3 = 0x03
                    0002    609 	ar2 = 0x02
                    0001    610 	ar1 = 0x01
                    0000    611 	ar0 = 0x00
   0000 C0*00               612 	push	_bp
   0002 85 81*00            613 	mov	_bp,sp
   0005 C0 82               614 	push	dpl
   0007 C0 83               615 	push	dph
   0009 C0 F0               616 	push	b
   000B 05 81               617 	inc	sp
   000D 05 81               618 	inc	sp
                            619 ;	../../core/lib/memb.c:55: memset(m->count, 0, m->num);
   000F A8*00               620 	mov	r0,_bp
   0011 08                  621 	inc	r0
   0012 74 02               622 	mov	a,#0x02
   0014 26                  623 	add	a,@r0
   0015 FA                  624 	mov	r2,a
   0016 E4                  625 	clr	a
   0017 08                  626 	inc	r0
   0018 36                  627 	addc	a,@r0
   0019 FB                  628 	mov	r3,a
   001A 08                  629 	inc	r0
   001B 86 04               630 	mov	ar4,@r0
   001D 8A 82               631 	mov	dpl,r2
   001F 8B 83               632 	mov	dph,r3
   0021 8C F0               633 	mov	b,r4
   0023 E5*00               634 	mov	a,_bp
   0025 24 04               635 	add	a,#0x04
   0027 F8                  636 	mov	r0,a
   0028 12s00r00            637 	lcall	__gptrget
   002B F6                  638 	mov	@r0,a
   002C A3                  639 	inc	dptr
   002D 12s00r00            640 	lcall	__gptrget
   0030 08                  641 	inc	r0
   0031 F6                  642 	mov	@r0,a
   0032 A8*00               643 	mov	r0,_bp
   0034 08                  644 	inc	r0
   0035 74 04               645 	mov	a,#0x04
   0037 26                  646 	add	a,@r0
   0038 FD                  647 	mov	r5,a
   0039 E4                  648 	clr	a
   003A 08                  649 	inc	r0
   003B 36                  650 	addc	a,@r0
   003C FE                  651 	mov	r6,a
   003D 08                  652 	inc	r0
   003E 86 07               653 	mov	ar7,@r0
   0040 8D 82               654 	mov	dpl,r5
   0042 8E 83               655 	mov	dph,r6
   0044 8F F0               656 	mov	b,r7
   0046 12s00r00            657 	lcall	__gptrget
   0049 FD                  658 	mov	r5,a
   004A A3                  659 	inc	dptr
   004B 12s00r00            660 	lcall	__gptrget
   004E FE                  661 	mov	r6,a
   004F A3                  662 	inc	dptr
   0050 12s00r00            663 	lcall	__gptrget
   0053 FF                  664 	mov	r7,a
   0054 C0 04               665 	push	ar4
   0056 C0 03               666 	push	ar3
   0058 C0 02               667 	push	ar2
   005A E5*00               668 	mov	a,_bp
   005C 24 04               669 	add	a,#0x04
   005E F8                  670 	mov	r0,a
   005F E6                  671 	mov	a,@r0
   0060 C0 E0               672 	push	acc
   0062 08                  673 	inc	r0
   0063 E6                  674 	mov	a,@r0
   0064 C0 E0               675 	push	acc
   0066 E4                  676 	clr	a
   0067 C0 E0               677 	push	acc
   0069 8D 82               678 	mov	dpl,r5
   006B 8E 83               679 	mov	dph,r6
   006D 8F F0               680 	mov	b,r7
   006F 12s00r00            681 	lcall	_memset
   0072 15 81               682 	dec	sp
   0074 15 81               683 	dec	sp
   0076 15 81               684 	dec	sp
   0078 D0 02               685 	pop	ar2
   007A D0 03               686 	pop	ar3
   007C D0 04               687 	pop	ar4
                            688 ;	../../core/lib/memb.c:56: memset(m->mem, 0, m->size * m->num);
   007E A8*00               689 	mov	r0,_bp
   0080 08                  690 	inc	r0
   0081 86 82               691 	mov	dpl,@r0
   0083 08                  692 	inc	r0
   0084 86 83               693 	mov	dph,@r0
   0086 08                  694 	inc	r0
   0087 86 F0               695 	mov	b,@r0
   0089 12s00r00            696 	lcall	__gptrget
   008C FE                  697 	mov	r6,a
   008D A3                  698 	inc	dptr
   008E 12s00r00            699 	lcall	__gptrget
   0091 FF                  700 	mov	r7,a
   0092 8A 82               701 	mov	dpl,r2
   0094 8B 83               702 	mov	dph,r3
   0096 8C F0               703 	mov	b,r4
   0098 12s00r00            704 	lcall	__gptrget
   009B FA                  705 	mov	r2,a
   009C A3                  706 	inc	dptr
   009D 12s00r00            707 	lcall	__gptrget
   00A0 FB                  708 	mov	r3,a
   00A1 C0 02               709 	push	ar2
   00A3 C0 03               710 	push	ar3
   00A5 8E 82               711 	mov	dpl,r6
   00A7 8F 83               712 	mov	dph,r7
   00A9 12s00r00            713 	lcall	__mulint
   00AC AE 82               714 	mov	r6,dpl
   00AE AF 83               715 	mov	r7,dph
   00B0 15 81               716 	dec	sp
   00B2 15 81               717 	dec	sp
   00B4 A8*00               718 	mov	r0,_bp
   00B6 08                  719 	inc	r0
   00B7 74 07               720 	mov	a,#0x07
   00B9 26                  721 	add	a,@r0
   00BA FB                  722 	mov	r3,a
   00BB E4                  723 	clr	a
   00BC 08                  724 	inc	r0
   00BD 36                  725 	addc	a,@r0
   00BE FC                  726 	mov	r4,a
   00BF 08                  727 	inc	r0
   00C0 86 05               728 	mov	ar5,@r0
   00C2 8B 82               729 	mov	dpl,r3
   00C4 8C 83               730 	mov	dph,r4
   00C6 8D F0               731 	mov	b,r5
   00C8 12s00r00            732 	lcall	__gptrget
   00CB FB                  733 	mov	r3,a
   00CC A3                  734 	inc	dptr
   00CD 12s00r00            735 	lcall	__gptrget
   00D0 FC                  736 	mov	r4,a
   00D1 A3                  737 	inc	dptr
   00D2 12s00r00            738 	lcall	__gptrget
   00D5 FD                  739 	mov	r5,a
   00D6 C0 06               740 	push	ar6
   00D8 C0 07               741 	push	ar7
   00DA E4                  742 	clr	a
   00DB C0 E0               743 	push	acc
   00DD 8B 82               744 	mov	dpl,r3
   00DF 8C 83               745 	mov	dph,r4
   00E1 8D F0               746 	mov	b,r5
   00E3 12s00r00            747 	lcall	_memset
   00E6 15 81               748 	dec	sp
   00E8 15 81               749 	dec	sp
   00EA 15 81               750 	dec	sp
   00EC 85*00 81            751 	mov	sp,_bp
   00EF D0*00               752 	pop	_bp
   00F1 22                  753 	ret
                            754 ;------------------------------------------------------------
                            755 ;Allocation info for local variables in function 'memb_alloc'
                            756 ;------------------------------------------------------------
                            757 ;m                         Allocated to stack - _bp +1
                            758 ;i                         Allocated to stack - _bp +4
                            759 ;sloc0                     Allocated to stack - _bp +6
                            760 ;sloc1                     Allocated to stack - _bp +8
                            761 ;sloc2                     Allocated to stack - _bp +11
                            762 ;------------------------------------------------------------
                            763 ;	../../core/lib/memb.c:60: memb_alloc(struct memb *m)
                            764 ;	-----------------------------------------
                            765 ;	 function memb_alloc
                            766 ;	-----------------------------------------
   00F2                     767 _memb_alloc:
   00F2 C0*00               768 	push	_bp
   00F4 85 81*00            769 	mov	_bp,sp
   00F7 C0 82               770 	push	dpl
   00F9 C0 83               771 	push	dph
   00FB C0 F0               772 	push	b
   00FD E5 81               773 	mov	a,sp
   00FF 24 07               774 	add	a,#0x07
   0101 F5 81               775 	mov	sp,a
                            776 ;	../../core/lib/memb.c:64: for(i = 0; i < m->num; ++i) {
   0103 A8*00               777 	mov	r0,_bp
   0105 08                  778 	inc	r0
   0106 74 02               779 	mov	a,#0x02
   0108 26                  780 	add	a,@r0
   0109 FA                  781 	mov	r2,a
   010A E4                  782 	clr	a
   010B 08                  783 	inc	r0
   010C 36                  784 	addc	a,@r0
   010D FB                  785 	mov	r3,a
   010E 08                  786 	inc	r0
   010F 86 04               787 	mov	ar4,@r0
   0111 E5*00               788 	mov	a,_bp
   0113 24 04               789 	add	a,#0x04
   0115 F8                  790 	mov	r0,a
   0116 E4                  791 	clr	a
   0117 F6                  792 	mov	@r0,a
   0118 08                  793 	inc	r0
   0119 F6                  794 	mov	@r0,a
   011A                     795 00103$:
   011A 8A 82               796 	mov	dpl,r2
   011C 8B 83               797 	mov	dph,r3
   011E 8C F0               798 	mov	b,r4
   0120 12s00r00            799 	lcall	__gptrget
   0123 FE                  800 	mov	r6,a
   0124 A3                  801 	inc	dptr
   0125 12s00r00            802 	lcall	__gptrget
   0128 FF                  803 	mov	r7,a
   0129 E5*00               804 	mov	a,_bp
   012B 24 04               805 	add	a,#0x04
   012D F8                  806 	mov	r0,a
   012E E5*00               807 	mov	a,_bp
   0130 24 06               808 	add	a,#0x06
   0132 F9                  809 	mov	r1,a
   0133 E6                  810 	mov	a,@r0
   0134 F7                  811 	mov	@r1,a
   0135 08                  812 	inc	r0
   0136 09                  813 	inc	r1
   0137 E6                  814 	mov	a,@r0
   0138 F7                  815 	mov	@r1,a
   0139 E5*00               816 	mov	a,_bp
   013B 24 06               817 	add	a,#0x06
   013D F8                  818 	mov	r0,a
   013E C3                  819 	clr	c
   013F E6                  820 	mov	a,@r0
   0140 9E                  821 	subb	a,r6
   0141 08                  822 	inc	r0
   0142 E6                  823 	mov	a,@r0
   0143 9F                  824 	subb	a,r7
   0144 40 03               825 	jc	00115$
   0146 02s02r36            826 	ljmp	00106$
   0149                     827 00115$:
                            828 ;	../../core/lib/memb.c:65: if(m->count[i] == 0) {
   0149 C0 02               829 	push	ar2
   014B C0 03               830 	push	ar3
   014D C0 04               831 	push	ar4
   014F A8*00               832 	mov	r0,_bp
   0151 08                  833 	inc	r0
   0152 74 04               834 	mov	a,#0x04
   0154 26                  835 	add	a,@r0
   0155 FA                  836 	mov	r2,a
   0156 E4                  837 	clr	a
   0157 08                  838 	inc	r0
   0158 36                  839 	addc	a,@r0
   0159 FB                  840 	mov	r3,a
   015A 08                  841 	inc	r0
   015B 86 04               842 	mov	ar4,@r0
   015D 8A 82               843 	mov	dpl,r2
   015F 8B 83               844 	mov	dph,r3
   0161 8C F0               845 	mov	b,r4
   0163 12s00r00            846 	lcall	__gptrget
   0166 FA                  847 	mov	r2,a
   0167 A3                  848 	inc	dptr
   0168 12s00r00            849 	lcall	__gptrget
   016B FB                  850 	mov	r3,a
   016C A3                  851 	inc	dptr
   016D 12s00r00            852 	lcall	__gptrget
   0170 FC                  853 	mov	r4,a
   0171 E5*00               854 	mov	a,_bp
   0173 24 04               855 	add	a,#0x04
   0175 F8                  856 	mov	r0,a
   0176 E5*00               857 	mov	a,_bp
   0178 24 08               858 	add	a,#0x08
   017A F9                  859 	mov	r1,a
   017B E6                  860 	mov	a,@r0
   017C 2A                  861 	add	a,r2
   017D F7                  862 	mov	@r1,a
   017E 08                  863 	inc	r0
   017F E6                  864 	mov	a,@r0
   0180 3B                  865 	addc	a,r3
   0181 09                  866 	inc	r1
   0182 F7                  867 	mov	@r1,a
   0183 09                  868 	inc	r1
   0184 A7 04               869 	mov	@r1,ar4
   0186 E5*00               870 	mov	a,_bp
   0188 24 08               871 	add	a,#0x08
   018A F8                  872 	mov	r0,a
   018B 86 82               873 	mov	dpl,@r0
   018D 08                  874 	inc	r0
   018E 86 83               875 	mov	dph,@r0
   0190 08                  876 	inc	r0
   0191 86 F0               877 	mov	b,@r0
   0193 12s00r00            878 	lcall	__gptrget
   0196 FF                  879 	mov	r7,a
   0197 D0 04               880 	pop	ar4
   0199 D0 03               881 	pop	ar3
   019B D0 02               882 	pop	ar2
   019D EF                  883 	mov	a,r7
   019E 60 03               884 	jz	00116$
   01A0 02s02r28            885 	ljmp	00105$
   01A3                     886 00116$:
                            887 ;	../../core/lib/memb.c:69: ++(m->count[i]);
   01A3 0F                  888 	inc	r7
   01A4 E5*00               889 	mov	a,_bp
   01A6 24 08               890 	add	a,#0x08
   01A8 F8                  891 	mov	r0,a
   01A9 86 82               892 	mov	dpl,@r0
   01AB 08                  893 	inc	r0
   01AC 86 83               894 	mov	dph,@r0
   01AE 08                  895 	inc	r0
   01AF 86 F0               896 	mov	b,@r0
   01B1 EF                  897 	mov	a,r7
   01B2 12s00r00            898 	lcall	__gptrput
                            899 ;	../../core/lib/memb.c:70: return (void *)((char *)m->mem + (i * m->size));
   01B5 A8*00               900 	mov	r0,_bp
   01B7 08                  901 	inc	r0
   01B8 74 07               902 	mov	a,#0x07
   01BA 26                  903 	add	a,@r0
   01BB FD                  904 	mov	r5,a
   01BC E4                  905 	clr	a
   01BD 08                  906 	inc	r0
   01BE 36                  907 	addc	a,@r0
   01BF FE                  908 	mov	r6,a
   01C0 08                  909 	inc	r0
   01C1 86 07               910 	mov	ar7,@r0
   01C3 8D 82               911 	mov	dpl,r5
   01C5 8E 83               912 	mov	dph,r6
   01C7 8F F0               913 	mov	b,r7
   01C9 12s00r00            914 	lcall	__gptrget
   01CC FD                  915 	mov	r5,a
   01CD A3                  916 	inc	dptr
   01CE 12s00r00            917 	lcall	__gptrget
   01D1 FE                  918 	mov	r6,a
   01D2 A3                  919 	inc	dptr
   01D3 12s00r00            920 	lcall	__gptrget
   01D6 FF                  921 	mov	r7,a
   01D7 E5*00               922 	mov	a,_bp
   01D9 24 08               923 	add	a,#0x08
   01DB F8                  924 	mov	r0,a
   01DC A6 05               925 	mov	@r0,ar5
   01DE 08                  926 	inc	r0
   01DF A6 06               927 	mov	@r0,ar6
   01E1 08                  928 	inc	r0
   01E2 A6 07               929 	mov	@r0,ar7
   01E4 A8*00               930 	mov	r0,_bp
   01E6 08                  931 	inc	r0
   01E7 86 82               932 	mov	dpl,@r0
   01E9 08                  933 	inc	r0
   01EA 86 83               934 	mov	dph,@r0
   01EC 08                  935 	inc	r0
   01ED 86 F0               936 	mov	b,@r0
   01EF 12s00r00            937 	lcall	__gptrget
   01F2 FE                  938 	mov	r6,a
   01F3 A3                  939 	inc	dptr
   01F4 12s00r00            940 	lcall	__gptrget
   01F7 FF                  941 	mov	r7,a
   01F8 C0 06               942 	push	ar6
   01FA C0 07               943 	push	ar7
   01FC E5*00               944 	mov	a,_bp
   01FE 24 06               945 	add	a,#0x06
   0200 F8                  946 	mov	r0,a
   0201 86 82               947 	mov	dpl,@r0
   0203 08                  948 	inc	r0
   0204 86 83               949 	mov	dph,@r0
   0206 12s00r00            950 	lcall	__mulint
   0209 AE 82               951 	mov	r6,dpl
   020B AF 83               952 	mov	r7,dph
   020D 15 81               953 	dec	sp
   020F 15 81               954 	dec	sp
   0211 E5*00               955 	mov	a,_bp
   0213 24 08               956 	add	a,#0x08
   0215 F8                  957 	mov	r0,a
   0216 EE                  958 	mov	a,r6
   0217 26                  959 	add	a,@r0
   0218 FE                  960 	mov	r6,a
   0219 EF                  961 	mov	a,r7
   021A 08                  962 	inc	r0
   021B 36                  963 	addc	a,@r0
   021C FF                  964 	mov	r7,a
   021D 08                  965 	inc	r0
   021E 86 05               966 	mov	ar5,@r0
   0220 8E 82               967 	mov	dpl,r6
   0222 8F 83               968 	mov	dph,r7
   0224 8D F0               969 	mov	b,r5
   0226 80 14               970 	sjmp	00107$
   0228                     971 00105$:
                            972 ;	../../core/lib/memb.c:64: for(i = 0; i < m->num; ++i) {
   0228 E5*00               973 	mov	a,_bp
   022A 24 04               974 	add	a,#0x04
   022C F8                  975 	mov	r0,a
   022D 06                  976 	inc	@r0
   022E B6 00 02            977 	cjne	@r0,#0x00,00117$
   0231 08                  978 	inc	r0
   0232 06                  979 	inc	@r0
   0233                     980 00117$:
   0233 02s01r1A            981 	ljmp	00103$
   0236                     982 00106$:
                            983 ;	../../core/lib/memb.c:76: return NULL;
   0236 90 00 00            984 	mov	dptr,#0x0000
   0239 75 F0 00            985 	mov	b,#0x00
   023C                     986 00107$:
   023C 85*00 81            987 	mov	sp,_bp
   023F D0*00               988 	pop	_bp
   0241 22                  989 	ret
                            990 ;------------------------------------------------------------
                            991 ;Allocation info for local variables in function 'memb_free'
                            992 ;------------------------------------------------------------
                            993 ;ptr                       Allocated to stack - _bp -5
                            994 ;m                         Allocated to stack - _bp +1
                            995 ;i                         Allocated to stack - _bp +10
                            996 ;ptr2                      Allocated to stack - _bp +4
                            997 ;sloc0                     Allocated to stack - _bp +7
                            998 ;sloc1                     Allocated to stack - _bp +10
                            999 ;------------------------------------------------------------
                           1000 ;	../../core/lib/memb.c:80: memb_free(struct memb *m, void *ptr)
                           1001 ;	-----------------------------------------
                           1002 ;	 function memb_free
                           1003 ;	-----------------------------------------
   0242                    1004 _memb_free:
   0242 C0*00              1005 	push	_bp
   0244 85 81*00           1006 	mov	_bp,sp
   0247 C0 82              1007 	push	dpl
   0249 C0 83              1008 	push	dph
   024B C0 F0              1009 	push	b
   024D E5 81              1010 	mov	a,sp
   024F 24 08              1011 	add	a,#0x08
   0251 F5 81              1012 	mov	sp,a
                           1013 ;	../../core/lib/memb.c:87: ptr2 = (char *)m->mem;
   0253 A8*00              1014 	mov	r0,_bp
   0255 08                 1015 	inc	r0
   0256 74 07              1016 	mov	a,#0x07
   0258 26                 1017 	add	a,@r0
   0259 FA                 1018 	mov	r2,a
   025A E4                 1019 	clr	a
   025B 08                 1020 	inc	r0
   025C 36                 1021 	addc	a,@r0
   025D FB                 1022 	mov	r3,a
   025E 08                 1023 	inc	r0
   025F 86 04              1024 	mov	ar4,@r0
   0261 8A 82              1025 	mov	dpl,r2
   0263 8B 83              1026 	mov	dph,r3
   0265 8C F0              1027 	mov	b,r4
   0267 12s00r00           1028 	lcall	__gptrget
   026A FA                 1029 	mov	r2,a
   026B A3                 1030 	inc	dptr
   026C 12s00r00           1031 	lcall	__gptrget
   026F FB                 1032 	mov	r3,a
   0270 A3                 1033 	inc	dptr
   0271 12s00r00           1034 	lcall	__gptrget
   0274 FC                 1035 	mov	r4,a
   0275 E5*00              1036 	mov	a,_bp
   0277 24 04              1037 	add	a,#0x04
   0279 F8                 1038 	mov	r0,a
   027A A6 02              1039 	mov	@r0,ar2
   027C 08                 1040 	inc	r0
   027D A6 03              1041 	mov	@r0,ar3
   027F 08                 1042 	inc	r0
   0280 A6 04              1043 	mov	@r0,ar4
                           1044 ;	../../core/lib/memb.c:88: for(i = 0; i < m->num; ++i) {
   0282 E5*00              1045 	mov	a,_bp
   0284 24 0A              1046 	add	a,#0x0a
   0286 F8                 1047 	mov	r0,a
   0287 E4                 1048 	clr	a
   0288 F6                 1049 	mov	@r0,a
   0289 08                 1050 	inc	r0
   028A F6                 1051 	mov	@r0,a
   028B A8*00              1052 	mov	r0,_bp
   028D 08                 1053 	inc	r0
   028E E5*00              1054 	mov	a,_bp
   0290 24 07              1055 	add	a,#0x07
   0292 F9                 1056 	mov	r1,a
   0293 74 02              1057 	mov	a,#0x02
   0295 26                 1058 	add	a,@r0
   0296 F7                 1059 	mov	@r1,a
   0297 E4                 1060 	clr	a
   0298 08                 1061 	inc	r0
   0299 36                 1062 	addc	a,@r0
   029A 09                 1063 	inc	r1
   029B F7                 1064 	mov	@r1,a
   029C 08                 1065 	inc	r0
   029D 09                 1066 	inc	r1
   029E E6                 1067 	mov	a,@r0
   029F F7                 1068 	mov	@r1,a
   02A0 7A 00              1069 	mov	r2,#0x00
   02A2 7F 00              1070 	mov	r7,#0x00
   02A4                    1071 00105$:
   02A4 E5*00              1072 	mov	a,_bp
   02A6 24 07              1073 	add	a,#0x07
   02A8 F8                 1074 	mov	r0,a
   02A9 86 82              1075 	mov	dpl,@r0
   02AB 08                 1076 	inc	r0
   02AC 86 83              1077 	mov	dph,@r0
   02AE 08                 1078 	inc	r0
   02AF 86 F0              1079 	mov	b,@r0
   02B1 12s00r00           1080 	lcall	__gptrget
   02B4 FD                 1081 	mov	r5,a
   02B5 A3                 1082 	inc	dptr
   02B6 12s00r00           1083 	lcall	__gptrget
   02B9 FE                 1084 	mov	r6,a
   02BA 8A 03              1085 	mov	ar3,r2
   02BC 8F 04              1086 	mov	ar4,r7
   02BE C3                 1087 	clr	c
   02BF EB                 1088 	mov	a,r3
   02C0 9D                 1089 	subb	a,r5
   02C1 EC                 1090 	mov	a,r4
   02C2 9E                 1091 	subb	a,r6
   02C3 40 03              1092 	jc	00119$
   02C5 02s03r85           1093 	ljmp	00108$
   02C8                    1094 00119$:
                           1095 ;	../../core/lib/memb.c:90: if(ptr2 == (char *)ptr) {
   02C8 E5*00              1096 	mov	a,_bp
   02CA 24 FB              1097 	add	a,#0xfb
   02CC F8                 1098 	mov	r0,a
   02CD 86 04              1099 	mov	ar4,@r0
   02CF 08                 1100 	inc	r0
   02D0 86 05              1101 	mov	ar5,@r0
   02D2 08                 1102 	inc	r0
   02D3 86 06              1103 	mov	ar6,@r0
   02D5 E5*00              1104 	mov	a,_bp
   02D7 24 04              1105 	add	a,#0x04
   02D9 F8                 1106 	mov	r0,a
   02DA C0 04              1107 	push	ar4
   02DC C0 05              1108 	push	ar5
   02DE C0 06              1109 	push	ar6
   02E0 86 82              1110 	mov	dpl,@r0
   02E2 08                 1111 	inc	r0
   02E3 86 83              1112 	mov	dph,@r0
   02E5 08                 1113 	inc	r0
   02E6 86 F0              1114 	mov	b,@r0
   02E8 12s00r00           1115 	lcall	___gptr_cmp
   02EB 15 81              1116 	dec	sp
   02ED 15 81              1117 	dec	sp
   02EF 15 81              1118 	dec	sp
   02F1 60 02              1119 	jz	00121$
   02F3 80 5E              1120 	sjmp	00104$
   02F5                    1121 00121$:
                           1122 ;	../../core/lib/memb.c:93: if(m->count[i] > 0) {
   02F5 A8*00              1123 	mov	r0,_bp
   02F7 08                 1124 	inc	r0
   02F8 74 04              1125 	mov	a,#0x04
   02FA 26                 1126 	add	a,@r0
   02FB FC                 1127 	mov	r4,a
   02FC E4                 1128 	clr	a
   02FD 08                 1129 	inc	r0
   02FE 36                 1130 	addc	a,@r0
   02FF FD                 1131 	mov	r5,a
   0300 08                 1132 	inc	r0
   0301 86 06              1133 	mov	ar6,@r0
   0303 8C 82              1134 	mov	dpl,r4
   0305 8D 83              1135 	mov	dph,r5
   0307 8E F0              1136 	mov	b,r6
   0309 12s00r00           1137 	lcall	__gptrget
   030C FC                 1138 	mov	r4,a
   030D A3                 1139 	inc	dptr
   030E 12s00r00           1140 	lcall	__gptrget
   0311 FD                 1141 	mov	r5,a
   0312 A3                 1142 	inc	dptr
   0313 12s00r00           1143 	lcall	__gptrget
   0316 FE                 1144 	mov	r6,a
   0317 E5*00              1145 	mov	a,_bp
   0319 24 0A              1146 	add	a,#0x0a
   031B F8                 1147 	mov	r0,a
   031C E6                 1148 	mov	a,@r0
   031D 2C                 1149 	add	a,r4
   031E FC                 1150 	mov	r4,a
   031F 08                 1151 	inc	r0
   0320 E6                 1152 	mov	a,@r0
   0321 3D                 1153 	addc	a,r5
   0322 FD                 1154 	mov	r5,a
   0323 8C 82              1155 	mov	dpl,r4
   0325 8D 83              1156 	mov	dph,r5
   0327 8E F0              1157 	mov	b,r6
   0329 12s00r00           1158 	lcall	__gptrget
   032C FB                 1159 	mov	r3,a
   032D C3                 1160 	clr	c
   032E E4                 1161 	clr	a
   032F 64 80              1162 	xrl	a,#0x80
   0331 8B F0              1163 	mov	b,r3
   0333 63 F0 80           1164 	xrl	b,#0x80
   0336 95 F0              1165 	subb	a,b
   0338 50 0B              1166 	jnc	00102$
                           1167 ;	../../core/lib/memb.c:95: --(m->count[i]);
   033A 1B                 1168 	dec	r3
   033B 8C 82              1169 	mov	dpl,r4
   033D 8D 83              1170 	mov	dph,r5
   033F 8E F0              1171 	mov	b,r6
   0341 EB                 1172 	mov	a,r3
   0342 12s00r00           1173 	lcall	__gptrput
   0345                    1174 00102$:
                           1175 ;	../../core/lib/memb.c:97: return m->count[i];
   0345 8C 82              1176 	mov	dpl,r4
   0347 8D 83              1177 	mov	dph,r5
   0349 8E F0              1178 	mov	b,r6
   034B 12s00r00           1179 	lcall	__gptrget
   034E FC                 1180 	mov	r4,a
   034F F5 82              1181 	mov	dpl,a
   0351 80 35              1182 	sjmp	00109$
   0353                    1183 00104$:
                           1184 ;	../../core/lib/memb.c:99: ptr2 += m->size;
   0353 A8*00              1185 	mov	r0,_bp
   0355 08                 1186 	inc	r0
   0356 86 82              1187 	mov	dpl,@r0
   0358 08                 1188 	inc	r0
   0359 86 83              1189 	mov	dph,@r0
   035B 08                 1190 	inc	r0
   035C 86 F0              1191 	mov	b,@r0
   035E 12s00r00           1192 	lcall	__gptrget
   0361 FD                 1193 	mov	r5,a
   0362 A3                 1194 	inc	dptr
   0363 12s00r00           1195 	lcall	__gptrget
   0366 FE                 1196 	mov	r6,a
   0367 E5*00              1197 	mov	a,_bp
   0369 24 04              1198 	add	a,#0x04
   036B F8                 1199 	mov	r0,a
   036C ED                 1200 	mov	a,r5
   036D 26                 1201 	add	a,@r0
   036E F6                 1202 	mov	@r0,a
   036F EE                 1203 	mov	a,r6
   0370 08                 1204 	inc	r0
   0371 36                 1205 	addc	a,@r0
   0372 F6                 1206 	mov	@r0,a
                           1207 ;	../../core/lib/memb.c:88: for(i = 0; i < m->num; ++i) {
   0373 0A                 1208 	inc	r2
   0374 BA 00 01           1209 	cjne	r2,#0x00,00123$
   0377 0F                 1210 	inc	r7
   0378                    1211 00123$:
   0378 E5*00              1212 	mov	a,_bp
   037A 24 0A              1213 	add	a,#0x0a
   037C F8                 1214 	mov	r0,a
   037D A6 02              1215 	mov	@r0,ar2
   037F 08                 1216 	inc	r0
   0380 A6 07              1217 	mov	@r0,ar7
   0382 02s02rA4           1218 	ljmp	00105$
   0385                    1219 00108$:
                           1220 ;	../../core/lib/memb.c:101: return -1;
   0385 75 82 FF           1221 	mov	dpl,#0xFF
   0388                    1222 00109$:
   0388 85*00 81           1223 	mov	sp,_bp
   038B D0*00              1224 	pop	_bp
   038D 22                 1225 	ret
                           1226 ;------------------------------------------------------------
                           1227 ;Allocation info for local variables in function 'memb_inmemb'
                           1228 ;------------------------------------------------------------
                           1229 ;ptr                       Allocated to stack - _bp -5
                           1230 ;m                         Allocated to stack - _bp +1
                           1231 ;sloc0                     Allocated to stack - _bp +4
                           1232 ;sloc1                     Allocated to stack - _bp +7
                           1233 ;------------------------------------------------------------
                           1234 ;	../../core/lib/memb.c:105: memb_inmemb(struct memb *m, void *ptr)
                           1235 ;	-----------------------------------------
                           1236 ;	 function memb_inmemb
                           1237 ;	-----------------------------------------
   038E                    1238 _memb_inmemb:
   038E C0*00              1239 	push	_bp
   0390 85 81*00           1240 	mov	_bp,sp
   0393 C0 82              1241 	push	dpl
   0395 C0 83              1242 	push	dph
   0397 C0 F0              1243 	push	b
   0399 E5 81              1244 	mov	a,sp
   039B 24 05              1245 	add	a,#0x05
   039D F5 81              1246 	mov	sp,a
                           1247 ;	../../core/lib/memb.c:107: return (char *)ptr >= (char *)m->mem &&
   039F E5*00              1248 	mov	a,_bp
   03A1 24 FB              1249 	add	a,#0xfb
   03A3 F8                 1250 	mov	r0,a
   03A4 86 02              1251 	mov	ar2,@r0
   03A6 08                 1252 	inc	r0
   03A7 86 03              1253 	mov	ar3,@r0
   03A9 08                 1254 	inc	r0
   03AA 86 04              1255 	mov	ar4,@r0
   03AC A8*00              1256 	mov	r0,_bp
   03AE 08                 1257 	inc	r0
   03AF 74 07              1258 	mov	a,#0x07
   03B1 26                 1259 	add	a,@r0
   03B2 FD                 1260 	mov	r5,a
   03B3 E4                 1261 	clr	a
   03B4 08                 1262 	inc	r0
   03B5 36                 1263 	addc	a,@r0
   03B6 FE                 1264 	mov	r6,a
   03B7 08                 1265 	inc	r0
   03B8 86 07              1266 	mov	ar7,@r0
   03BA 8D 82              1267 	mov	dpl,r5
   03BC 8E 83              1268 	mov	dph,r6
   03BE 8F F0              1269 	mov	b,r7
   03C0 E5*00              1270 	mov	a,_bp
   03C2 24 04              1271 	add	a,#0x04
   03C4 F8                 1272 	mov	r0,a
   03C5 12s00r00           1273 	lcall	__gptrget
   03C8 F6                 1274 	mov	@r0,a
   03C9 A3                 1275 	inc	dptr
   03CA 12s00r00           1276 	lcall	__gptrget
   03CD 08                 1277 	inc	r0
   03CE F6                 1278 	mov	@r0,a
   03CF A3                 1279 	inc	dptr
   03D0 12s00r00           1280 	lcall	__gptrget
   03D3 08                 1281 	inc	r0
   03D4 F6                 1282 	mov	@r0,a
   03D5 E5*00              1283 	mov	a,_bp
   03D7 24 04              1284 	add	a,#0x04
   03D9 F8                 1285 	mov	r0,a
   03DA 86 05              1286 	mov	ar5,@r0
   03DC 08                 1287 	inc	r0
   03DD 86 06              1288 	mov	ar6,@r0
   03DF 08                 1289 	inc	r0
   03E0 86 07              1290 	mov	ar7,@r0
   03E2 C0 05              1291 	push	ar5
   03E4 C0 06              1292 	push	ar6
   03E6 C0 07              1293 	push	ar7
   03E8 8A 82              1294 	mov	dpl,r2
   03EA 8B 83              1295 	mov	dph,r3
   03EC 8C F0              1296 	mov	b,r4
   03EE 12s00r00           1297 	lcall	___gptr_cmp
   03F1 15 81              1298 	dec	sp
   03F3 15 81              1299 	dec	sp
   03F5 15 81              1300 	dec	sp
   03F7 B3                 1301 	cpl	c
   03F8 E4                 1302 	clr	a
   03F9 33                 1303 	rlc	a
   03FA FD                 1304 	mov	r5,a
   03FB 70 03              1305 	jnz	00109$
   03FD 02s04r9C           1306 	ljmp	00103$
   0400                    1307 00109$:
                           1308 ;	../../core/lib/memb.c:108: (char *)ptr < (char *)m->mem + (m->num * m->size);
   0400 E5*00              1309 	mov	a,_bp
   0402 24 04              1310 	add	a,#0x04
   0404 F8                 1311 	mov	r0,a
   0405 86 05              1312 	mov	ar5,@r0
   0407 08                 1313 	inc	r0
   0408 86 06              1314 	mov	ar6,@r0
   040A 08                 1315 	inc	r0
   040B 86 07              1316 	mov	ar7,@r0
   040D E5*00              1317 	mov	a,_bp
   040F 24 04              1318 	add	a,#0x04
   0411 F8                 1319 	mov	r0,a
   0412 A6 05              1320 	mov	@r0,ar5
   0414 08                 1321 	inc	r0
   0415 A6 06              1322 	mov	@r0,ar6
   0417 08                 1323 	inc	r0
   0418 A6 07              1324 	mov	@r0,ar7
   041A A8*00              1325 	mov	r0,_bp
   041C 08                 1326 	inc	r0
   041D 74 02              1327 	mov	a,#0x02
   041F 26                 1328 	add	a,@r0
   0420 FD                 1329 	mov	r5,a
   0421 E4                 1330 	clr	a
   0422 08                 1331 	inc	r0
   0423 36                 1332 	addc	a,@r0
   0424 FE                 1333 	mov	r6,a
   0425 08                 1334 	inc	r0
   0426 86 07              1335 	mov	ar7,@r0
   0428 8D 82              1336 	mov	dpl,r5
   042A 8E 83              1337 	mov	dph,r6
   042C 8F F0              1338 	mov	b,r7
   042E E5*00              1339 	mov	a,_bp
   0430 24 07              1340 	add	a,#0x07
   0432 F8                 1341 	mov	r0,a
   0433 12s00r00           1342 	lcall	__gptrget
   0436 F6                 1343 	mov	@r0,a
   0437 A3                 1344 	inc	dptr
   0438 12s00r00           1345 	lcall	__gptrget
   043B 08                 1346 	inc	r0
   043C F6                 1347 	mov	@r0,a
   043D A8*00              1348 	mov	r0,_bp
   043F 08                 1349 	inc	r0
   0440 86 82              1350 	mov	dpl,@r0
   0442 08                 1351 	inc	r0
   0443 86 83              1352 	mov	dph,@r0
   0445 08                 1353 	inc	r0
   0446 86 F0              1354 	mov	b,@r0
   0448 12s00r00           1355 	lcall	__gptrget
   044B FE                 1356 	mov	r6,a
   044C A3                 1357 	inc	dptr
   044D 12s00r00           1358 	lcall	__gptrget
   0450 FF                 1359 	mov	r7,a
   0451 C0 04              1360 	push	ar4
   0453 C0 03              1361 	push	ar3
   0455 C0 02              1362 	push	ar2
   0457 C0 06              1363 	push	ar6
   0459 C0 07              1364 	push	ar7
   045B E5*00              1365 	mov	a,_bp
   045D 24 07              1366 	add	a,#0x07
   045F F8                 1367 	mov	r0,a
   0460 86 82              1368 	mov	dpl,@r0
   0462 08                 1369 	inc	r0
   0463 86 83              1370 	mov	dph,@r0
   0465 12s00r00           1371 	lcall	__mulint
   0468 AE 82              1372 	mov	r6,dpl
   046A AF 83              1373 	mov	r7,dph
   046C 15 81              1374 	dec	sp
   046E 15 81              1375 	dec	sp
   0470 D0 02              1376 	pop	ar2
   0472 D0 03              1377 	pop	ar3
   0474 D0 04              1378 	pop	ar4
   0476 E5*00              1379 	mov	a,_bp
   0478 24 04              1380 	add	a,#0x04
   047A F8                 1381 	mov	r0,a
   047B EE                 1382 	mov	a,r6
   047C 26                 1383 	add	a,@r0
   047D FE                 1384 	mov	r6,a
   047E EF                 1385 	mov	a,r7
   047F 08                 1386 	inc	r0
   0480 36                 1387 	addc	a,@r0
   0481 FF                 1388 	mov	r7,a
   0482 08                 1389 	inc	r0
   0483 86 05              1390 	mov	ar5,@r0
   0485 C0 06              1391 	push	ar6
   0487 C0 07              1392 	push	ar7
   0489 C0 05              1393 	push	ar5
   048B 8A 82              1394 	mov	dpl,r2
   048D 8B 83              1395 	mov	dph,r3
   048F 8C F0              1396 	mov	b,r4
   0491 12s00r00           1397 	lcall	___gptr_cmp
   0494 15 81              1398 	dec	sp
   0496 15 81              1399 	dec	sp
   0498 15 81              1400 	dec	sp
   049A 40 04              1401 	jc	00104$
   049C                    1402 00103$:
   049C 7F 00              1403 	mov	r7,#0x00
   049E 80 02              1404 	sjmp	00105$
   04A0                    1405 00104$:
   04A0 7F 01              1406 	mov	r7,#0x01
   04A2                    1407 00105$:
   04A2 EF                 1408 	mov	a,r7
   04A3 33                 1409 	rlc	a
   04A4 95 E0              1410 	subb	a,acc
   04A6 FE                 1411 	mov	r6,a
   04A7 8F 82              1412 	mov	dpl,r7
   04A9 8E 83              1413 	mov	dph,r6
   04AB 85*00 81           1414 	mov	sp,_bp
   04AE D0*00              1415 	pop	_bp
   04B0 22                 1416 	ret
                           1417 	.area CSEG    (CODE)
                           1418 	.area CONST   (CODE)
                           1419 	.area XINIT   (CODE)
                           1420 	.area CABS    (ABS,CODE)
