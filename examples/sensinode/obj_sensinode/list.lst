                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.1 #7100 (Apr  1 2013) (Linux)
                              4 ; This file was generated Tue Apr 23 09:41:24 2013
                              5 ;--------------------------------------------------------
                              6 	.module list
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _list_init
                             13 	.globl _list_head
                             14 	.globl _list_copy
                             15 	.globl _list_tail
                             16 	.globl _list_add
                             17 	.globl _list_push
                             18 	.globl _list_chop
                             19 	.globl _list_pop
                             20 	.globl _list_remove
                             21 	.globl _list_length
                             22 	.globl _list_insert
                             23 	.globl _list_item_next
                             24 ;--------------------------------------------------------
                             25 ; special function registers
                             26 ;--------------------------------------------------------
                             27 	.area RSEG    (ABS,DATA)
   0000                      28 	.org 0x0000
                             29 ;--------------------------------------------------------
                             30 ; special function bits
                             31 ;--------------------------------------------------------
                             32 	.area RSEG    (ABS,DATA)
   0000                      33 	.org 0x0000
                             34 ;--------------------------------------------------------
                             35 ; overlayable register banks
                             36 ;--------------------------------------------------------
                             37 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      38 	.ds 8
                             39 ;--------------------------------------------------------
                             40 ; internal ram data
                             41 ;--------------------------------------------------------
                             42 	.area DSEG    (DATA)
                             43 ;--------------------------------------------------------
                             44 ; overlayable items in internal ram 
                             45 ;--------------------------------------------------------
                             46 	.area OSEG    (OVR,DATA)
                             47 ;--------------------------------------------------------
                             48 ; indirectly addressable internal ram data
                             49 ;--------------------------------------------------------
                             50 	.area ISEG    (DATA)
                             51 ;--------------------------------------------------------
                             52 ; absolute internal ram data
                             53 ;--------------------------------------------------------
                             54 	.area IABS    (ABS,DATA)
                             55 	.area IABS    (ABS,DATA)
                             56 ;--------------------------------------------------------
                             57 ; bit data
                             58 ;--------------------------------------------------------
                             59 	.area BSEG    (BIT)
                             60 ;--------------------------------------------------------
                             61 ; paged external ram data
                             62 ;--------------------------------------------------------
                             63 	.area PSEG    (PAG,XDATA)
                             64 ;--------------------------------------------------------
                             65 ; external ram data
                             66 ;--------------------------------------------------------
                             67 	.area XSEG    (XDATA)
                             68 ;--------------------------------------------------------
                             69 ; absolute external ram data
                             70 ;--------------------------------------------------------
                             71 	.area XABS    (ABS,XDATA)
                             72 ;--------------------------------------------------------
                             73 ; external initialized ram data
                             74 ;--------------------------------------------------------
                             75 	.area XISEG   (XDATA)
                             76 	.area HOME    (CODE)
                             77 	.area GSINIT0 (CODE)
                             78 	.area GSINIT1 (CODE)
                             79 	.area GSINIT2 (CODE)
                             80 	.area GSINIT3 (CODE)
                             81 	.area GSINIT4 (CODE)
                             82 	.area GSINIT5 (CODE)
                             83 	.area GSINIT  (CODE)
                             84 	.area GSFINAL (CODE)
                             85 	.area CSEG    (CODE)
                             86 ;--------------------------------------------------------
                             87 ; global & static initialisations
                             88 ;--------------------------------------------------------
                             89 	.area HOME    (CODE)
                             90 	.area GSINIT  (CODE)
                             91 	.area GSFINAL (CODE)
                             92 	.area GSINIT  (CODE)
                             93 ;--------------------------------------------------------
                             94 ; Home
                             95 ;--------------------------------------------------------
                             96 	.area HOME    (CODE)
                             97 	.area HOME    (CODE)
                             98 ;--------------------------------------------------------
                             99 ; code
                            100 ;--------------------------------------------------------
                            101 	.area CSEG    (CODE)
                            102 ;------------------------------------------------------------
                            103 ;Allocation info for local variables in function 'list_init'
                            104 ;------------------------------------------------------------
                            105 ;list                      Allocated to registers r5 r6 r7 
                            106 ;------------------------------------------------------------
                            107 ;	../../core/lib/list.c:66: list_init(list_t list)
                            108 ;	-----------------------------------------
                            109 ;	 function list_init
                            110 ;	-----------------------------------------
   0000                     111 _list_init:
                    0007    112 	ar7 = 0x07
                    0006    113 	ar6 = 0x06
                    0005    114 	ar5 = 0x05
                    0004    115 	ar4 = 0x04
                    0003    116 	ar3 = 0x03
                    0002    117 	ar2 = 0x02
                    0001    118 	ar1 = 0x01
                    0000    119 	ar0 = 0x00
                            120 ;	../../core/lib/list.c:68: *list = NULL;
   0000 E4                  121 	clr	a
   0001 12s00r00            122 	lcall	__gptrput
   0004 A3                  123 	inc	dptr
   0005 E4                  124 	clr	a
   0006 12s00r00            125 	lcall	__gptrput
   0009 A3                  126 	inc	dptr
   000A E4                  127 	clr	a
   000B 02s00r00            128 	ljmp	__gptrput
                            129 ;------------------------------------------------------------
                            130 ;Allocation info for local variables in function 'list_head'
                            131 ;------------------------------------------------------------
                            132 ;list                      Allocated to registers r5 r6 r7 
                            133 ;------------------------------------------------------------
                            134 ;	../../core/lib/list.c:83: list_head(list_t list)
                            135 ;	-----------------------------------------
                            136 ;	 function list_head
                            137 ;	-----------------------------------------
   000E                     138 _list_head:
                            139 ;	../../core/lib/list.c:85: return *list;
   000E 12s00r00            140 	lcall	__gptrget
   0011 FD                  141 	mov	r5,a
   0012 A3                  142 	inc	dptr
   0013 12s00r00            143 	lcall	__gptrget
   0016 FE                  144 	mov	r6,a
   0017 A3                  145 	inc	dptr
   0018 12s00r00            146 	lcall	__gptrget
   001B FF                  147 	mov	r7,a
   001C 8D 82               148 	mov	dpl,r5
   001E 8E 83               149 	mov	dph,r6
   0020 8F F0               150 	mov	b,r7
   0022 22                  151 	ret
                            152 ;------------------------------------------------------------
                            153 ;Allocation info for local variables in function 'list_copy'
                            154 ;------------------------------------------------------------
                            155 ;src                       Allocated to stack - _bp -5
                            156 ;dest                      Allocated to registers r5 r6 r7 
                            157 ;------------------------------------------------------------
                            158 ;	../../core/lib/list.c:101: list_copy(list_t dest, list_t src)
                            159 ;	-----------------------------------------
                            160 ;	 function list_copy
                            161 ;	-----------------------------------------
   0023                     162 _list_copy:
   0023 C0*00               163 	push	_bp
   0025 85 81*00            164 	mov	_bp,sp
   0028 AD 82               165 	mov	r5,dpl
   002A AE 83               166 	mov	r6,dph
   002C AF F0               167 	mov	r7,b
                            168 ;	../../core/lib/list.c:103: *dest = *src;
   002E E5*00               169 	mov	a,_bp
   0030 24 FB               170 	add	a,#0xfb
   0032 F8                  171 	mov	r0,a
   0033 86 02               172 	mov	ar2,@r0
   0035 08                  173 	inc	r0
   0036 86 03               174 	mov	ar3,@r0
   0038 08                  175 	inc	r0
   0039 86 04               176 	mov	ar4,@r0
   003B 8A 82               177 	mov	dpl,r2
   003D 8B 83               178 	mov	dph,r3
   003F 8C F0               179 	mov	b,r4
   0041 12s00r00            180 	lcall	__gptrget
   0044 FA                  181 	mov	r2,a
   0045 A3                  182 	inc	dptr
   0046 12s00r00            183 	lcall	__gptrget
   0049 FB                  184 	mov	r3,a
   004A A3                  185 	inc	dptr
   004B 12s00r00            186 	lcall	__gptrget
   004E FC                  187 	mov	r4,a
   004F 8D 82               188 	mov	dpl,r5
   0051 8E 83               189 	mov	dph,r6
   0053 8F F0               190 	mov	b,r7
   0055 EA                  191 	mov	a,r2
   0056 12s00r00            192 	lcall	__gptrput
   0059 A3                  193 	inc	dptr
   005A EB                  194 	mov	a,r3
   005B 12s00r00            195 	lcall	__gptrput
   005E A3                  196 	inc	dptr
   005F EC                  197 	mov	a,r4
   0060 12s00r00            198 	lcall	__gptrput
   0063 D0*00               199 	pop	_bp
   0065 22                  200 	ret
                            201 ;------------------------------------------------------------
                            202 ;Allocation info for local variables in function 'list_tail'
                            203 ;------------------------------------------------------------
                            204 ;list                      Allocated to registers r5 r6 r7 
                            205 ;l                         Allocated to registers r5 r6 r7 
                            206 ;------------------------------------------------------------
                            207 ;	../../core/lib/list.c:118: list_tail(list_t list)
                            208 ;	-----------------------------------------
                            209 ;	 function list_tail
                            210 ;	-----------------------------------------
   0066                     211 _list_tail:
                            212 ;	../../core/lib/list.c:122: if(*list == NULL) {
   0066 12s00r00            213 	lcall	__gptrget
   0069 FD                  214 	mov	r5,a
   006A A3                  215 	inc	dptr
   006B 12s00r00            216 	lcall	__gptrget
   006E FE                  217 	mov	r6,a
   006F A3                  218 	inc	dptr
   0070 12s00r00            219 	lcall	__gptrget
   0073 FF                  220 	mov	r7,a
   0074 ED                  221 	mov	a,r5
   0075 4E                  222 	orl	a,r6
                            223 ;	../../core/lib/list.c:123: return NULL;
   0076 70 06               224 	jnz	00102$
   0078 90 00 00            225 	mov	dptr,#0x0000
   007B F5 F0               226 	mov	b,a
   007D 22                  227 	ret
   007E                     228 00102$:
                            229 ;	../../core/lib/list.c:126: for(l = *list; l->next != NULL; l = l->next);
   007E                     230 00103$:
   007E 8D 82               231 	mov	dpl,r5
   0080 8E 83               232 	mov	dph,r6
   0082 8F F0               233 	mov	b,r7
   0084 12s00r00            234 	lcall	__gptrget
   0087 FA                  235 	mov	r2,a
   0088 A3                  236 	inc	dptr
   0089 12s00r00            237 	lcall	__gptrget
   008C FB                  238 	mov	r3,a
   008D A3                  239 	inc	dptr
   008E 12s00r00            240 	lcall	__gptrget
   0091 FC                  241 	mov	r4,a
   0092 E4                  242 	clr	a
   0093 C0 E0               243 	push	acc
   0095 E4                  244 	clr	a
   0096 C0 E0               245 	push	acc
   0098 E4                  246 	clr	a
   0099 C0 E0               247 	push	acc
   009B 8A 82               248 	mov	dpl,r2
   009D 8B 83               249 	mov	dph,r3
   009F 8C F0               250 	mov	b,r4
   00A1 12s00r00            251 	lcall	___gptr_cmp
   00A4 15 81               252 	dec	sp
   00A6 15 81               253 	dec	sp
   00A8 15 81               254 	dec	sp
   00AA 60 08               255 	jz	00106$
   00AC 8A 05               256 	mov	ar5,r2
   00AE 8B 06               257 	mov	ar6,r3
   00B0 8C 07               258 	mov	ar7,r4
   00B2 80 CA               259 	sjmp	00103$
   00B4                     260 00106$:
                            261 ;	../../core/lib/list.c:128: return l;
   00B4 8D 82               262 	mov	dpl,r5
   00B6 8E 83               263 	mov	dph,r6
   00B8 8F F0               264 	mov	b,r7
   00BA 22                  265 	ret
                            266 ;------------------------------------------------------------
                            267 ;Allocation info for local variables in function 'list_add'
                            268 ;------------------------------------------------------------
                            269 ;item                      Allocated to stack - _bp -5
                            270 ;list                      Allocated to registers r5 r6 r7 
                            271 ;l                         Allocated to registers r2 r3 r4 
                            272 ;------------------------------------------------------------
                            273 ;	../../core/lib/list.c:143: list_add(list_t list, void *item)
                            274 ;	-----------------------------------------
                            275 ;	 function list_add
                            276 ;	-----------------------------------------
   00BB                     277 _list_add:
   00BB C0*00               278 	push	_bp
   00BD 85 81*00            279 	mov	_bp,sp
   00C0 AD 82               280 	mov	r5,dpl
   00C2 AE 83               281 	mov	r6,dph
   00C4 AF F0               282 	mov	r7,b
                            283 ;	../../core/lib/list.c:148: list_remove(list, item);
   00C6 C0 07               284 	push	ar7
   00C8 C0 06               285 	push	ar6
   00CA C0 05               286 	push	ar5
   00CC E5*00               287 	mov	a,_bp
   00CE 24 FB               288 	add	a,#0xfb
   00D0 F8                  289 	mov	r0,a
   00D1 E6                  290 	mov	a,@r0
   00D2 C0 E0               291 	push	acc
   00D4 08                  292 	inc	r0
   00D5 E6                  293 	mov	a,@r0
   00D6 C0 E0               294 	push	acc
   00D8 08                  295 	inc	r0
   00D9 E6                  296 	mov	a,@r0
   00DA C0 E0               297 	push	acc
   00DC 8D 82               298 	mov	dpl,r5
   00DE 8E 83               299 	mov	dph,r6
   00E0 8F F0               300 	mov	b,r7
   00E2 12s03rBD            301 	lcall	_list_remove
   00E5 15 81               302 	dec	sp
   00E7 15 81               303 	dec	sp
   00E9 15 81               304 	dec	sp
   00EB D0 05               305 	pop	ar5
   00ED D0 06               306 	pop	ar6
   00EF D0 07               307 	pop	ar7
                            308 ;	../../core/lib/list.c:150: ((struct list *)item)->next = NULL;
   00F1 E5*00               309 	mov	a,_bp
   00F3 24 FB               310 	add	a,#0xfb
   00F5 F8                  311 	mov	r0,a
   00F6 86 02               312 	mov	ar2,@r0
   00F8 08                  313 	inc	r0
   00F9 86 03               314 	mov	ar3,@r0
   00FB 08                  315 	inc	r0
   00FC 86 04               316 	mov	ar4,@r0
   00FE 8A 82               317 	mov	dpl,r2
   0100 8B 83               318 	mov	dph,r3
   0102 8C F0               319 	mov	b,r4
   0104 E4                  320 	clr	a
   0105 12s00r00            321 	lcall	__gptrput
   0108 A3                  322 	inc	dptr
   0109 E4                  323 	clr	a
   010A 12s00r00            324 	lcall	__gptrput
   010D A3                  325 	inc	dptr
   010E E4                  326 	clr	a
   010F 12s00r00            327 	lcall	__gptrput
                            328 ;	../../core/lib/list.c:152: l = list_tail(list);
   0112 8D 82               329 	mov	dpl,r5
   0114 8E 83               330 	mov	dph,r6
   0116 8F F0               331 	mov	b,r7
   0118 C0 07               332 	push	ar7
   011A C0 06               333 	push	ar6
   011C C0 05               334 	push	ar5
   011E 12s00r66            335 	lcall	_list_tail
   0121 AA 82               336 	mov	r2,dpl
   0123 AB 83               337 	mov	r3,dph
   0125 AC F0               338 	mov	r4,b
   0127 D0 05               339 	pop	ar5
   0129 D0 06               340 	pop	ar6
   012B D0 07               341 	pop	ar7
                            342 ;	../../core/lib/list.c:154: if(l == NULL) {
   012D EA                  343 	mov	a,r2
   012E 4B                  344 	orl	a,r3
   012F 70 1D               345 	jnz	00102$
                            346 ;	../../core/lib/list.c:155: *list = item;
   0131 8D 82               347 	mov	dpl,r5
   0133 8E 83               348 	mov	dph,r6
   0135 8F F0               349 	mov	b,r7
   0137 E5*00               350 	mov	a,_bp
   0139 24 FB               351 	add	a,#0xfb
   013B F8                  352 	mov	r0,a
   013C E6                  353 	mov	a,@r0
   013D 12s00r00            354 	lcall	__gptrput
   0140 A3                  355 	inc	dptr
   0141 08                  356 	inc	r0
   0142 E6                  357 	mov	a,@r0
   0143 12s00r00            358 	lcall	__gptrput
   0146 A3                  359 	inc	dptr
   0147 08                  360 	inc	r0
   0148 E6                  361 	mov	a,@r0
   0149 12s00r00            362 	lcall	__gptrput
   014C 80 21               363 	sjmp	00104$
   014E                     364 00102$:
                            365 ;	../../core/lib/list.c:157: l->next = item;
   014E E5*00               366 	mov	a,_bp
   0150 24 FB               367 	add	a,#0xfb
   0152 F8                  368 	mov	r0,a
   0153 86 05               369 	mov	ar5,@r0
   0155 08                  370 	inc	r0
   0156 86 06               371 	mov	ar6,@r0
   0158 08                  372 	inc	r0
   0159 86 07               373 	mov	ar7,@r0
   015B 8A 82               374 	mov	dpl,r2
   015D 8B 83               375 	mov	dph,r3
   015F 8C F0               376 	mov	b,r4
   0161 ED                  377 	mov	a,r5
   0162 12s00r00            378 	lcall	__gptrput
   0165 A3                  379 	inc	dptr
   0166 EE                  380 	mov	a,r6
   0167 12s00r00            381 	lcall	__gptrput
   016A A3                  382 	inc	dptr
   016B EF                  383 	mov	a,r7
   016C 12s00r00            384 	lcall	__gptrput
   016F                     385 00104$:
   016F D0*00               386 	pop	_bp
   0171 22                  387 	ret
                            388 ;------------------------------------------------------------
                            389 ;Allocation info for local variables in function 'list_push'
                            390 ;------------------------------------------------------------
                            391 ;item                      Allocated to stack - _bp -5
                            392 ;list                      Allocated to stack - _bp +1
                            393 ;------------------------------------------------------------
                            394 ;	../../core/lib/list.c:165: list_push(list_t list, void *item)
                            395 ;	-----------------------------------------
                            396 ;	 function list_push
                            397 ;	-----------------------------------------
   0172                     398 _list_push:
   0172 C0*00               399 	push	_bp
   0174 85 81*00            400 	mov	_bp,sp
   0177 C0 82               401 	push	dpl
   0179 C0 83               402 	push	dph
   017B C0 F0               403 	push	b
                            404 ;	../../core/lib/list.c:170: list_remove(list, item);
   017D E5*00               405 	mov	a,_bp
   017F 24 FB               406 	add	a,#0xfb
   0181 F8                  407 	mov	r0,a
   0182 E6                  408 	mov	a,@r0
   0183 C0 E0               409 	push	acc
   0185 08                  410 	inc	r0
   0186 E6                  411 	mov	a,@r0
   0187 C0 E0               412 	push	acc
   0189 08                  413 	inc	r0
   018A E6                  414 	mov	a,@r0
   018B C0 E0               415 	push	acc
   018D A8*00               416 	mov	r0,_bp
   018F 08                  417 	inc	r0
   0190 86 82               418 	mov	dpl,@r0
   0192 08                  419 	inc	r0
   0193 86 83               420 	mov	dph,@r0
   0195 08                  421 	inc	r0
   0196 86 F0               422 	mov	b,@r0
   0198 12s03rBD            423 	lcall	_list_remove
   019B 15 81               424 	dec	sp
   019D 15 81               425 	dec	sp
   019F 15 81               426 	dec	sp
                            427 ;	../../core/lib/list.c:172: ((struct list *)item)->next = *list;
   01A1 E5*00               428 	mov	a,_bp
   01A3 24 FB               429 	add	a,#0xfb
   01A5 F8                  430 	mov	r0,a
   01A6 86 02               431 	mov	ar2,@r0
   01A8 08                  432 	inc	r0
   01A9 86 03               433 	mov	ar3,@r0
   01AB 08                  434 	inc	r0
   01AC 86 04               435 	mov	ar4,@r0
   01AE A8*00               436 	mov	r0,_bp
   01B0 08                  437 	inc	r0
   01B1 86 82               438 	mov	dpl,@r0
   01B3 08                  439 	inc	r0
   01B4 86 83               440 	mov	dph,@r0
   01B6 08                  441 	inc	r0
   01B7 86 F0               442 	mov	b,@r0
   01B9 12s00r00            443 	lcall	__gptrget
   01BC FD                  444 	mov	r5,a
   01BD A3                  445 	inc	dptr
   01BE 12s00r00            446 	lcall	__gptrget
   01C1 FE                  447 	mov	r6,a
   01C2 A3                  448 	inc	dptr
   01C3 12s00r00            449 	lcall	__gptrget
   01C6 FF                  450 	mov	r7,a
   01C7 8A 82               451 	mov	dpl,r2
   01C9 8B 83               452 	mov	dph,r3
   01CB 8C F0               453 	mov	b,r4
   01CD ED                  454 	mov	a,r5
   01CE 12s00r00            455 	lcall	__gptrput
   01D1 A3                  456 	inc	dptr
   01D2 EE                  457 	mov	a,r6
   01D3 12s00r00            458 	lcall	__gptrput
   01D6 A3                  459 	inc	dptr
   01D7 EF                  460 	mov	a,r7
   01D8 12s00r00            461 	lcall	__gptrput
                            462 ;	../../core/lib/list.c:173: *list = item;
   01DB A8*00               463 	mov	r0,_bp
   01DD 08                  464 	inc	r0
   01DE 86 82               465 	mov	dpl,@r0
   01E0 08                  466 	inc	r0
   01E1 86 83               467 	mov	dph,@r0
   01E3 08                  468 	inc	r0
   01E4 86 F0               469 	mov	b,@r0
   01E6 E5*00               470 	mov	a,_bp
   01E8 24 FB               471 	add	a,#0xfb
   01EA F9                  472 	mov	r1,a
   01EB E7                  473 	mov	a,@r1
   01EC 12s00r00            474 	lcall	__gptrput
   01EF A3                  475 	inc	dptr
   01F0 09                  476 	inc	r1
   01F1 E7                  477 	mov	a,@r1
   01F2 12s00r00            478 	lcall	__gptrput
   01F5 A3                  479 	inc	dptr
   01F6 09                  480 	inc	r1
   01F7 E7                  481 	mov	a,@r1
   01F8 12s00r00            482 	lcall	__gptrput
   01FB 85*00 81            483 	mov	sp,_bp
   01FE D0*00               484 	pop	_bp
   0200 22                  485 	ret
                            486 ;------------------------------------------------------------
                            487 ;Allocation info for local variables in function 'list_chop'
                            488 ;------------------------------------------------------------
                            489 ;list                      Allocated to stack - _bp +1
                            490 ;l                         Allocated to stack - _bp +4
                            491 ;r                         Allocated to registers r5 r6 r7 
                            492 ;------------------------------------------------------------
                            493 ;	../../core/lib/list.c:186: list_chop(list_t list)
                            494 ;	-----------------------------------------
                            495 ;	 function list_chop
                            496 ;	-----------------------------------------
   0201                     497 _list_chop:
   0201 C0*00               498 	push	_bp
   0203 85 81*00            499 	mov	_bp,sp
   0206 C0 82               500 	push	dpl
   0208 C0 83               501 	push	dph
   020A C0 F0               502 	push	b
   020C 05 81               503 	inc	sp
   020E 05 81               504 	inc	sp
   0210 05 81               505 	inc	sp
                            506 ;	../../core/lib/list.c:190: if(*list == NULL) {
   0212 A8*00               507 	mov	r0,_bp
   0214 08                  508 	inc	r0
   0215 86 82               509 	mov	dpl,@r0
   0217 08                  510 	inc	r0
   0218 86 83               511 	mov	dph,@r0
   021A 08                  512 	inc	r0
   021B 86 F0               513 	mov	b,@r0
   021D 12s00r00            514 	lcall	__gptrget
   0220 FA                  515 	mov	r2,a
   0221 A3                  516 	inc	dptr
   0222 12s00r00            517 	lcall	__gptrget
   0225 FB                  518 	mov	r3,a
   0226 A3                  519 	inc	dptr
   0227 12s00r00            520 	lcall	__gptrget
   022A FC                  521 	mov	r4,a
   022B EA                  522 	mov	a,r2
   022C 4B                  523 	orl	a,r3
                            524 ;	../../core/lib/list.c:191: return NULL;
   022D 70 08               525 	jnz	00102$
   022F 90 00 00            526 	mov	dptr,#0x0000
   0232 F5 F0               527 	mov	b,a
   0234 02s03r4A            528 	ljmp	00109$
   0237                     529 00102$:
                            530 ;	../../core/lib/list.c:193: if(((struct list *)*list)->next == NULL) {
   0237 8A 05               531 	mov	ar5,r2
   0239 8B 06               532 	mov	ar6,r3
   023B 8C 07               533 	mov	ar7,r4
   023D 8D 82               534 	mov	dpl,r5
   023F 8E 83               535 	mov	dph,r6
   0241 8F F0               536 	mov	b,r7
   0243 12s00r00            537 	lcall	__gptrget
   0246 FD                  538 	mov	r5,a
   0247 A3                  539 	inc	dptr
   0248 12s00r00            540 	lcall	__gptrget
   024B FE                  541 	mov	r6,a
   024C A3                  542 	inc	dptr
   024D 12s00r00            543 	lcall	__gptrget
   0250 FF                  544 	mov	r7,a
   0251 ED                  545 	mov	a,r5
   0252 4E                  546 	orl	a,r6
   0253 70 42               547 	jnz	00104$
                            548 ;	../../core/lib/list.c:194: l = *list;
   0255 8A 05               549 	mov	ar5,r2
   0257 8B 06               550 	mov	ar6,r3
   0259 8C 07               551 	mov	ar7,r4
   025B E5*00               552 	mov	a,_bp
   025D 24 04               553 	add	a,#0x04
   025F F8                  554 	mov	r0,a
   0260 A6 05               555 	mov	@r0,ar5
   0262 08                  556 	inc	r0
   0263 A6 06               557 	mov	@r0,ar6
   0265 08                  558 	inc	r0
   0266 A6 07               559 	mov	@r0,ar7
                            560 ;	../../core/lib/list.c:195: *list = NULL;
   0268 A8*00               561 	mov	r0,_bp
   026A 08                  562 	inc	r0
   026B 86 82               563 	mov	dpl,@r0
   026D 08                  564 	inc	r0
   026E 86 83               565 	mov	dph,@r0
   0270 08                  566 	inc	r0
   0271 86 F0               567 	mov	b,@r0
   0273 E4                  568 	clr	a
   0274 12s00r00            569 	lcall	__gptrput
   0277 A3                  570 	inc	dptr
   0278 E4                  571 	clr	a
   0279 12s00r00            572 	lcall	__gptrput
   027C A3                  573 	inc	dptr
   027D E4                  574 	clr	a
   027E 12s00r00            575 	lcall	__gptrput
                            576 ;	../../core/lib/list.c:196: return l;
   0281 E5*00               577 	mov	a,_bp
   0283 24 04               578 	add	a,#0x04
   0285 F8                  579 	mov	r0,a
   0286 86 05               580 	mov	ar5,@r0
   0288 08                  581 	inc	r0
   0289 86 06               582 	mov	ar6,@r0
   028B 08                  583 	inc	r0
   028C 86 07               584 	mov	ar7,@r0
   028E 8D 82               585 	mov	dpl,r5
   0290 8E 83               586 	mov	dph,r6
   0292 8F F0               587 	mov	b,r7
   0294 02s03r4A            588 	ljmp	00109$
   0297                     589 00104$:
                            590 ;	../../core/lib/list.c:199: for(l = *list; l->next->next != NULL; l = l->next);
   0297 E5*00               591 	mov	a,_bp
   0299 24 04               592 	add	a,#0x04
   029B F8                  593 	mov	r0,a
   029C A6 02               594 	mov	@r0,ar2
   029E 08                  595 	inc	r0
   029F A6 03               596 	mov	@r0,ar3
   02A1 08                  597 	inc	r0
   02A2 A6 04               598 	mov	@r0,ar4
   02A4                     599 00105$:
   02A4 E5*00               600 	mov	a,_bp
   02A6 24 04               601 	add	a,#0x04
   02A8 F8                  602 	mov	r0,a
   02A9 86 82               603 	mov	dpl,@r0
   02AB 08                  604 	inc	r0
   02AC 86 83               605 	mov	dph,@r0
   02AE 08                  606 	inc	r0
   02AF 86 F0               607 	mov	b,@r0
   02B1 12s00r00            608 	lcall	__gptrget
   02B4 FD                  609 	mov	r5,a
   02B5 A3                  610 	inc	dptr
   02B6 12s00r00            611 	lcall	__gptrget
   02B9 FE                  612 	mov	r6,a
   02BA A3                  613 	inc	dptr
   02BB 12s00r00            614 	lcall	__gptrget
   02BE FF                  615 	mov	r7,a
   02BF 8D 82               616 	mov	dpl,r5
   02C1 8E 83               617 	mov	dph,r6
   02C3 8F F0               618 	mov	b,r7
   02C5 12s00r00            619 	lcall	__gptrget
   02C8 FD                  620 	mov	r5,a
   02C9 A3                  621 	inc	dptr
   02CA 12s00r00            622 	lcall	__gptrget
   02CD FE                  623 	mov	r6,a
   02CE A3                  624 	inc	dptr
   02CF 12s00r00            625 	lcall	__gptrget
   02D2 FF                  626 	mov	r7,a
   02D3 E4                  627 	clr	a
   02D4 C0 E0               628 	push	acc
   02D6 E4                  629 	clr	a
   02D7 C0 E0               630 	push	acc
   02D9 E4                  631 	clr	a
   02DA C0 E0               632 	push	acc
   02DC 8D 82               633 	mov	dpl,r5
   02DE 8E 83               634 	mov	dph,r6
   02E0 8F F0               635 	mov	b,r7
   02E2 12s00r00            636 	lcall	___gptr_cmp
   02E5 15 81               637 	dec	sp
   02E7 15 81               638 	dec	sp
   02E9 15 81               639 	dec	sp
   02EB 60 21               640 	jz	00108$
   02ED E5*00               641 	mov	a,_bp
   02EF 24 04               642 	add	a,#0x04
   02F1 F8                  643 	mov	r0,a
   02F2 86 82               644 	mov	dpl,@r0
   02F4 08                  645 	inc	r0
   02F5 86 83               646 	mov	dph,@r0
   02F7 08                  647 	inc	r0
   02F8 86 F0               648 	mov	b,@r0
   02FA 12s00r00            649 	lcall	__gptrget
   02FD 18                  650 	dec	r0
   02FE 18                  651 	dec	r0
   02FF F6                  652 	mov	@r0,a
   0300 A3                  653 	inc	dptr
   0301 12s00r00            654 	lcall	__gptrget
   0304 08                  655 	inc	r0
   0305 F6                  656 	mov	@r0,a
   0306 A3                  657 	inc	dptr
   0307 12s00r00            658 	lcall	__gptrget
   030A 08                  659 	inc	r0
   030B F6                  660 	mov	@r0,a
   030C 80 96               661 	sjmp	00105$
   030E                     662 00108$:
                            663 ;	../../core/lib/list.c:201: r = l->next;
   030E E5*00               664 	mov	a,_bp
   0310 24 04               665 	add	a,#0x04
   0312 F8                  666 	mov	r0,a
   0313 86 82               667 	mov	dpl,@r0
   0315 08                  668 	inc	r0
   0316 86 83               669 	mov	dph,@r0
   0318 08                  670 	inc	r0
   0319 86 F0               671 	mov	b,@r0
   031B 12s00r00            672 	lcall	__gptrget
   031E FD                  673 	mov	r5,a
   031F A3                  674 	inc	dptr
   0320 12s00r00            675 	lcall	__gptrget
   0323 FE                  676 	mov	r6,a
   0324 A3                  677 	inc	dptr
   0325 12s00r00            678 	lcall	__gptrget
   0328 FF                  679 	mov	r7,a
                            680 ;	../../core/lib/list.c:202: l->next = NULL;
   0329 E5*00               681 	mov	a,_bp
   032B 24 04               682 	add	a,#0x04
   032D F8                  683 	mov	r0,a
   032E 86 82               684 	mov	dpl,@r0
   0330 08                  685 	inc	r0
   0331 86 83               686 	mov	dph,@r0
   0333 08                  687 	inc	r0
   0334 86 F0               688 	mov	b,@r0
   0336 E4                  689 	clr	a
   0337 12s00r00            690 	lcall	__gptrput
   033A A3                  691 	inc	dptr
   033B E4                  692 	clr	a
   033C 12s00r00            693 	lcall	__gptrput
   033F A3                  694 	inc	dptr
   0340 E4                  695 	clr	a
   0341 12s00r00            696 	lcall	__gptrput
                            697 ;	../../core/lib/list.c:204: return r;
   0344 8D 82               698 	mov	dpl,r5
   0346 8E 83               699 	mov	dph,r6
   0348 8F F0               700 	mov	b,r7
   034A                     701 00109$:
   034A 85*00 81            702 	mov	sp,_bp
   034D D0*00               703 	pop	_bp
   034F 22                  704 	ret
                            705 ;------------------------------------------------------------
                            706 ;Allocation info for local variables in function 'list_pop'
                            707 ;------------------------------------------------------------
                            708 ;list                      Allocated to registers r5 r6 r7 
                            709 ;l                         Allocated to stack - _bp +1
                            710 ;------------------------------------------------------------
                            711 ;	../../core/lib/list.c:218: list_pop(list_t list)
                            712 ;	-----------------------------------------
                            713 ;	 function list_pop
                            714 ;	-----------------------------------------
   0350                     715 _list_pop:
   0350 C0*00               716 	push	_bp
   0352 85 81*00            717 	mov	_bp,sp
   0355 05 81               718 	inc	sp
   0357 05 81               719 	inc	sp
   0359 05 81               720 	inc	sp
                            721 ;	../../core/lib/list.c:221: l = *list;
   035B AD 82               722 	mov	r5,dpl
   035D AE 83               723 	mov	r6,dph
   035F AF F0               724 	mov	r7,b
   0361 12s00r00            725 	lcall	__gptrget
   0364 FA                  726 	mov	r2,a
   0365 A3                  727 	inc	dptr
   0366 12s00r00            728 	lcall	__gptrget
   0369 FB                  729 	mov	r3,a
   036A A3                  730 	inc	dptr
   036B 12s00r00            731 	lcall	__gptrget
   036E FC                  732 	mov	r4,a
   036F A8*00               733 	mov	r0,_bp
   0371 08                  734 	inc	r0
   0372 A6 02               735 	mov	@r0,ar2
   0374 08                  736 	inc	r0
   0375 A6 03               737 	mov	@r0,ar3
   0377 08                  738 	inc	r0
   0378 A6 04               739 	mov	@r0,ar4
                            740 ;	../../core/lib/list.c:222: if(*list != NULL) {
   037A EA                  741 	mov	a,r2
   037B 4B                  742 	orl	a,r3
   037C 60 28               743 	jz	00102$
                            744 ;	../../core/lib/list.c:223: *list = ((struct list *)*list)->next;
   037E 8A 82               745 	mov	dpl,r2
   0380 8B 83               746 	mov	dph,r3
   0382 8C F0               747 	mov	b,r4
   0384 12s00r00            748 	lcall	__gptrget
   0387 FA                  749 	mov	r2,a
   0388 A3                  750 	inc	dptr
   0389 12s00r00            751 	lcall	__gptrget
   038C FB                  752 	mov	r3,a
   038D A3                  753 	inc	dptr
   038E 12s00r00            754 	lcall	__gptrget
   0391 FC                  755 	mov	r4,a
   0392 8D 82               756 	mov	dpl,r5
   0394 8E 83               757 	mov	dph,r6
   0396 8F F0               758 	mov	b,r7
   0398 EA                  759 	mov	a,r2
   0399 12s00r00            760 	lcall	__gptrput
   039C A3                  761 	inc	dptr
   039D EB                  762 	mov	a,r3
   039E 12s00r00            763 	lcall	__gptrput
   03A1 A3                  764 	inc	dptr
   03A2 EC                  765 	mov	a,r4
   03A3 12s00r00            766 	lcall	__gptrput
   03A6                     767 00102$:
                            768 ;	../../core/lib/list.c:226: return l;
   03A6 A8*00               769 	mov	r0,_bp
   03A8 08                  770 	inc	r0
   03A9 86 05               771 	mov	ar5,@r0
   03AB 08                  772 	inc	r0
   03AC 86 06               773 	mov	ar6,@r0
   03AE 08                  774 	inc	r0
   03AF 86 07               775 	mov	ar7,@r0
   03B1 8D 82               776 	mov	dpl,r5
   03B3 8E 83               777 	mov	dph,r6
   03B5 8F F0               778 	mov	b,r7
   03B7 85*00 81            779 	mov	sp,_bp
   03BA D0*00               780 	pop	_bp
   03BC 22                  781 	ret
                            782 ;------------------------------------------------------------
                            783 ;Allocation info for local variables in function 'list_remove'
                            784 ;------------------------------------------------------------
                            785 ;item                      Allocated to stack - _bp -5
                            786 ;list                      Allocated to stack - _bp +1
                            787 ;l                         Allocated to stack - _bp +4
                            788 ;r                         Allocated to registers r5 r6 r7 
                            789 ;------------------------------------------------------------
                            790 ;	../../core/lib/list.c:240: list_remove(list_t list, void *item)
                            791 ;	-----------------------------------------
                            792 ;	 function list_remove
                            793 ;	-----------------------------------------
   03BD                     794 _list_remove:
   03BD C0*00               795 	push	_bp
   03BF 85 81*00            796 	mov	_bp,sp
   03C2 C0 82               797 	push	dpl
   03C4 C0 83               798 	push	dph
   03C6 C0 F0               799 	push	b
   03C8 05 81               800 	inc	sp
   03CA 05 81               801 	inc	sp
   03CC 05 81               802 	inc	sp
                            803 ;	../../core/lib/list.c:244: if(*list == NULL) {
   03CE A8*00               804 	mov	r0,_bp
   03D0 08                  805 	inc	r0
   03D1 86 82               806 	mov	dpl,@r0
   03D3 08                  807 	inc	r0
   03D4 86 83               808 	mov	dph,@r0
   03D6 08                  809 	inc	r0
   03D7 86 F0               810 	mov	b,@r0
   03D9 12s00r00            811 	lcall	__gptrget
   03DC FA                  812 	mov	r2,a
   03DD A3                  813 	inc	dptr
   03DE 12s00r00            814 	lcall	__gptrget
   03E1 FB                  815 	mov	r3,a
   03E2 A3                  816 	inc	dptr
   03E3 12s00r00            817 	lcall	__gptrget
   03E6 FC                  818 	mov	r4,a
   03E7 EA                  819 	mov	a,r2
   03E8 4B                  820 	orl	a,r3
   03E9 70 03               821 	jnz	00102$
                            822 ;	../../core/lib/list.c:245: return;
   03EB 02s05r18            823 	ljmp	00112$
   03EE                     824 00102$:
                            825 ;	../../core/lib/list.c:248: r = NULL;
                            826 ;	../../core/lib/list.c:249: for(l = *list; l != NULL; l = l->next) {
   03EE E4                  827 	clr	a
   03EF FD                  828 	mov	r5,a
   03F0 FE                  829 	mov	r6,a
   03F1 FF                  830 	mov	r7,a
   03F2 E5*00               831 	mov	a,_bp
   03F4 24 04               832 	add	a,#0x04
   03F6 F8                  833 	mov	r0,a
   03F7 A6 02               834 	mov	@r0,ar2
   03F9 08                  835 	inc	r0
   03FA A6 03               836 	mov	@r0,ar3
   03FC 08                  837 	inc	r0
   03FD A6 04               838 	mov	@r0,ar4
   03FF                     839 00108$:
   03FF E5*00               840 	mov	a,_bp
   0401 24 04               841 	add	a,#0x04
   0403 F8                  842 	mov	r0,a
   0404 E4                  843 	clr	a
   0405 C0 E0               844 	push	acc
   0407 E4                  845 	clr	a
   0408 C0 E0               846 	push	acc
   040A E4                  847 	clr	a
   040B C0 E0               848 	push	acc
   040D 86 82               849 	mov	dpl,@r0
   040F 08                  850 	inc	r0
   0410 86 83               851 	mov	dph,@r0
   0412 08                  852 	inc	r0
   0413 86 F0               853 	mov	b,@r0
   0415 12s00r00            854 	lcall	___gptr_cmp
   0418 15 81               855 	dec	sp
   041A 15 81               856 	dec	sp
   041C 15 81               857 	dec	sp
   041E 70 03               858 	jnz	00125$
   0420 02s05r18            859 	ljmp	00112$
   0423                     860 00125$:
                            861 ;	../../core/lib/list.c:250: if(l == item) {
   0423 C0 05               862 	push	ar5
   0425 C0 06               863 	push	ar6
   0427 C0 07               864 	push	ar7
   0429 E5*00               865 	mov	a,_bp
   042B 24 FB               866 	add	a,#0xfb
   042D F8                  867 	mov	r0,a
   042E 86 05               868 	mov	ar5,@r0
   0430 08                  869 	inc	r0
   0431 86 06               870 	mov	ar6,@r0
   0433 08                  871 	inc	r0
   0434 86 07               872 	mov	ar7,@r0
   0436 E5*00               873 	mov	a,_bp
   0438 24 04               874 	add	a,#0x04
   043A F8                  875 	mov	r0,a
   043B C0 05               876 	push	ar5
   043D C0 06               877 	push	ar6
   043F C0 07               878 	push	ar7
   0441 86 82               879 	mov	dpl,@r0
   0443 08                  880 	inc	r0
   0444 86 83               881 	mov	dph,@r0
   0446 08                  882 	inc	r0
   0447 86 F0               883 	mov	b,@r0
   0449 12s00r00            884 	lcall	___gptr_cmp
   044C 15 81               885 	dec	sp
   044E 15 81               886 	dec	sp
   0450 15 81               887 	dec	sp
   0452 60 09               888 	jz	00127$
   0454 D0 07               889 	pop	ar7
   0456 D0 06               890 	pop	ar6
   0458 D0 05               891 	pop	ar5
   045A 02s04rE9            892 	ljmp	00107$
   045D                     893 00127$:
   045D D0 07               894 	pop	ar7
   045F D0 06               895 	pop	ar6
   0461 D0 05               896 	pop	ar5
                            897 ;	../../core/lib/list.c:251: if(r == NULL) {
   0463 ED                  898 	mov	a,r5
   0464 4E                  899 	orl	a,r6
   0465 70 36               900 	jnz	00104$
                            901 ;	../../core/lib/list.c:253: *list = l->next;
   0467 E5*00               902 	mov	a,_bp
   0469 24 04               903 	add	a,#0x04
   046B F8                  904 	mov	r0,a
   046C 86 82               905 	mov	dpl,@r0
   046E 08                  906 	inc	r0
   046F 86 83               907 	mov	dph,@r0
   0471 08                  908 	inc	r0
   0472 86 F0               909 	mov	b,@r0
   0474 12s00r00            910 	lcall	__gptrget
   0477 FA                  911 	mov	r2,a
   0478 A3                  912 	inc	dptr
   0479 12s00r00            913 	lcall	__gptrget
   047C FB                  914 	mov	r3,a
   047D A3                  915 	inc	dptr
   047E 12s00r00            916 	lcall	__gptrget
   0481 FC                  917 	mov	r4,a
   0482 A8*00               918 	mov	r0,_bp
   0484 08                  919 	inc	r0
   0485 86 82               920 	mov	dpl,@r0
   0487 08                  921 	inc	r0
   0488 86 83               922 	mov	dph,@r0
   048A 08                  923 	inc	r0
   048B 86 F0               924 	mov	b,@r0
   048D EA                  925 	mov	a,r2
   048E 12s00r00            926 	lcall	__gptrput
   0491 A3                  927 	inc	dptr
   0492 EB                  928 	mov	a,r3
   0493 12s00r00            929 	lcall	__gptrput
   0496 A3                  930 	inc	dptr
   0497 EC                  931 	mov	a,r4
   0498 12s00r00            932 	lcall	__gptrput
   049B 80 2F               933 	sjmp	00105$
   049D                     934 00104$:
                            935 ;	../../core/lib/list.c:256: r->next = l->next;
   049D E5*00               936 	mov	a,_bp
   049F 24 04               937 	add	a,#0x04
   04A1 F8                  938 	mov	r0,a
   04A2 86 82               939 	mov	dpl,@r0
   04A4 08                  940 	inc	r0
   04A5 86 83               941 	mov	dph,@r0
   04A7 08                  942 	inc	r0
   04A8 86 F0               943 	mov	b,@r0
   04AA 12s00r00            944 	lcall	__gptrget
   04AD FA                  945 	mov	r2,a
   04AE A3                  946 	inc	dptr
   04AF 12s00r00            947 	lcall	__gptrget
   04B2 FB                  948 	mov	r3,a
   04B3 A3                  949 	inc	dptr
   04B4 12s00r00            950 	lcall	__gptrget
   04B7 FC                  951 	mov	r4,a
   04B8 8D 82               952 	mov	dpl,r5
   04BA 8E 83               953 	mov	dph,r6
   04BC 8F F0               954 	mov	b,r7
   04BE EA                  955 	mov	a,r2
   04BF 12s00r00            956 	lcall	__gptrput
   04C2 A3                  957 	inc	dptr
   04C3 EB                  958 	mov	a,r3
   04C4 12s00r00            959 	lcall	__gptrput
   04C7 A3                  960 	inc	dptr
   04C8 EC                  961 	mov	a,r4
   04C9 12s00r00            962 	lcall	__gptrput
   04CC                     963 00105$:
                            964 ;	../../core/lib/list.c:258: l->next = NULL;
   04CC E5*00               965 	mov	a,_bp
   04CE 24 04               966 	add	a,#0x04
   04D0 F8                  967 	mov	r0,a
   04D1 86 82               968 	mov	dpl,@r0
   04D3 08                  969 	inc	r0
   04D4 86 83               970 	mov	dph,@r0
   04D6 08                  971 	inc	r0
   04D7 86 F0               972 	mov	b,@r0
   04D9 E4                  973 	clr	a
   04DA 12s00r00            974 	lcall	__gptrput
   04DD A3                  975 	inc	dptr
   04DE E4                  976 	clr	a
   04DF 12s00r00            977 	lcall	__gptrput
   04E2 A3                  978 	inc	dptr
   04E3 E4                  979 	clr	a
   04E4 12s00r00            980 	lcall	__gptrput
                            981 ;	../../core/lib/list.c:259: return;
   04E7 80 2F               982 	sjmp	00112$
   04E9                     983 00107$:
                            984 ;	../../core/lib/list.c:261: r = l;
   04E9 E5*00               985 	mov	a,_bp
   04EB 24 04               986 	add	a,#0x04
   04ED F8                  987 	mov	r0,a
   04EE 86 05               988 	mov	ar5,@r0
   04F0 08                  989 	inc	r0
   04F1 86 06               990 	mov	ar6,@r0
   04F3 08                  991 	inc	r0
   04F4 86 07               992 	mov	ar7,@r0
                            993 ;	../../core/lib/list.c:249: for(l = *list; l != NULL; l = l->next) {
   04F6 E5*00               994 	mov	a,_bp
   04F8 24 04               995 	add	a,#0x04
   04FA F8                  996 	mov	r0,a
   04FB 86 82               997 	mov	dpl,@r0
   04FD 08                  998 	inc	r0
   04FE 86 83               999 	mov	dph,@r0
   0500 08                 1000 	inc	r0
   0501 86 F0              1001 	mov	b,@r0
   0503 12s00r00           1002 	lcall	__gptrget
   0506 18                 1003 	dec	r0
   0507 18                 1004 	dec	r0
   0508 F6                 1005 	mov	@r0,a
   0509 A3                 1006 	inc	dptr
   050A 12s00r00           1007 	lcall	__gptrget
   050D 08                 1008 	inc	r0
   050E F6                 1009 	mov	@r0,a
   050F A3                 1010 	inc	dptr
   0510 12s00r00           1011 	lcall	__gptrget
   0513 08                 1012 	inc	r0
   0514 F6                 1013 	mov	@r0,a
   0515 02s03rFF           1014 	ljmp	00108$
   0518                    1015 00112$:
   0518 85*00 81           1016 	mov	sp,_bp
   051B D0*00              1017 	pop	_bp
   051D 22                 1018 	ret
                           1019 ;------------------------------------------------------------
                           1020 ;Allocation info for local variables in function 'list_length'
                           1021 ;------------------------------------------------------------
                           1022 ;list                      Allocated to registers r5 r6 r7 
                           1023 ;l                         Allocated to registers r5 r6 r7 
                           1024 ;n                         Allocated to registers r3 r4 
                           1025 ;------------------------------------------------------------
                           1026 ;	../../core/lib/list.c:275: list_length(list_t list)
                           1027 ;	-----------------------------------------
                           1028 ;	 function list_length
                           1029 ;	-----------------------------------------
   051E                    1030 _list_length:
                           1031 ;	../../core/lib/list.c:280: for(l = *list; l != NULL; l = l->next) {
   051E 12s00r00           1032 	lcall	__gptrget
   0521 FD                 1033 	mov	r5,a
   0522 A3                 1034 	inc	dptr
   0523 12s00r00           1035 	lcall	__gptrget
   0526 FE                 1036 	mov	r6,a
   0527 A3                 1037 	inc	dptr
   0528 12s00r00           1038 	lcall	__gptrget
   052B FF                 1039 	mov	r7,a
   052C 7B 00              1040 	mov	r3,#0x00
   052E 7C 00              1041 	mov	r4,#0x00
   0530                    1042 00101$:
   0530 E4                 1043 	clr	a
   0531 C0 E0              1044 	push	acc
   0533 E4                 1045 	clr	a
   0534 C0 E0              1046 	push	acc
   0536 E4                 1047 	clr	a
   0537 C0 E0              1048 	push	acc
   0539 8D 82              1049 	mov	dpl,r5
   053B 8E 83              1050 	mov	dph,r6
   053D 8F F0              1051 	mov	b,r7
   053F 12s00r00           1052 	lcall	___gptr_cmp
   0542 15 81              1053 	dec	sp
   0544 15 81              1054 	dec	sp
   0546 15 81              1055 	dec	sp
   0548 60 1B              1056 	jz	00104$
                           1057 ;	../../core/lib/list.c:281: ++n;
   054A 0B                 1058 	inc	r3
   054B BB 00 01           1059 	cjne	r3,#0x00,00113$
   054E 0C                 1060 	inc	r4
   054F                    1061 00113$:
                           1062 ;	../../core/lib/list.c:280: for(l = *list; l != NULL; l = l->next) {
   054F 8D 82              1063 	mov	dpl,r5
   0551 8E 83              1064 	mov	dph,r6
   0553 8F F0              1065 	mov	b,r7
   0555 12s00r00           1066 	lcall	__gptrget
   0558 FD                 1067 	mov	r5,a
   0559 A3                 1068 	inc	dptr
   055A 12s00r00           1069 	lcall	__gptrget
   055D FE                 1070 	mov	r6,a
   055E A3                 1071 	inc	dptr
   055F 12s00r00           1072 	lcall	__gptrget
   0562 FF                 1073 	mov	r7,a
   0563 80 CB              1074 	sjmp	00101$
   0565                    1075 00104$:
                           1076 ;	../../core/lib/list.c:284: return n;
   0565 8B 82              1077 	mov	dpl,r3
   0567 8C 83              1078 	mov	dph,r4
   0569 22                 1079 	ret
                           1080 ;------------------------------------------------------------
                           1081 ;Allocation info for local variables in function 'list_insert'
                           1082 ;------------------------------------------------------------
                           1083 ;previtem                  Allocated to stack - _bp -5
                           1084 ;newitem                   Allocated to stack - _bp -8
                           1085 ;list                      Allocated to registers r5 r6 r7 
                           1086 ;sloc0                     Allocated to stack - _bp +1
                           1087 ;------------------------------------------------------------
                           1088 ;	../../core/lib/list.c:303: list_insert(list_t list, void *previtem, void *newitem)
                           1089 ;	-----------------------------------------
                           1090 ;	 function list_insert
                           1091 ;	-----------------------------------------
   056A                    1092 _list_insert:
   056A C0*00              1093 	push	_bp
   056C 85 81*00           1094 	mov	_bp,sp
   056F 05 81              1095 	inc	sp
   0571 05 81              1096 	inc	sp
   0573 05 81              1097 	inc	sp
   0575 AD 82              1098 	mov	r5,dpl
   0577 AE 83              1099 	mov	r6,dph
   0579 AF F0              1100 	mov	r7,b
                           1101 ;	../../core/lib/list.c:305: if(previtem == NULL) {
   057B E5*00              1102 	mov	a,_bp
   057D 24 FB              1103 	add	a,#0xfb
   057F F8                 1104 	mov	r0,a
   0580 E6                 1105 	mov	a,@r0
   0581 08                 1106 	inc	r0
   0582 46                 1107 	orl	a,@r0
   0583 70 21              1108 	jnz	00102$
                           1109 ;	../../core/lib/list.c:306: list_push(list, newitem);
   0585 E5*00              1110 	mov	a,_bp
   0587 24 F8              1111 	add	a,#0xf8
   0589 F8                 1112 	mov	r0,a
   058A E6                 1113 	mov	a,@r0
   058B C0 E0              1114 	push	acc
   058D 08                 1115 	inc	r0
   058E E6                 1116 	mov	a,@r0
   058F C0 E0              1117 	push	acc
   0591 08                 1118 	inc	r0
   0592 E6                 1119 	mov	a,@r0
   0593 C0 E0              1120 	push	acc
   0595 8D 82              1121 	mov	dpl,r5
   0597 8E 83              1122 	mov	dph,r6
   0599 8F F0              1123 	mov	b,r7
   059B 12s01r72           1124 	lcall	_list_push
   059E 15 81              1125 	dec	sp
   05A0 15 81              1126 	dec	sp
   05A2 15 81              1127 	dec	sp
   05A4 80 6D              1128 	sjmp	00104$
   05A6                    1129 00102$:
                           1130 ;	../../core/lib/list.c:309: ((struct list *)newitem)->next = ((struct list *)previtem)->next;
   05A6 E5*00              1131 	mov	a,_bp
   05A8 24 F8              1132 	add	a,#0xf8
   05AA F8                 1133 	mov	r0,a
   05AB A9*00              1134 	mov	r1,_bp
   05AD 09                 1135 	inc	r1
   05AE E6                 1136 	mov	a,@r0
   05AF F7                 1137 	mov	@r1,a
   05B0 08                 1138 	inc	r0
   05B1 09                 1139 	inc	r1
   05B2 E6                 1140 	mov	a,@r0
   05B3 F7                 1141 	mov	@r1,a
   05B4 08                 1142 	inc	r0
   05B5 09                 1143 	inc	r1
   05B6 E6                 1144 	mov	a,@r0
   05B7 F7                 1145 	mov	@r1,a
   05B8 E5*00              1146 	mov	a,_bp
   05BA 24 FB              1147 	add	a,#0xfb
   05BC F8                 1148 	mov	r0,a
   05BD 86 02              1149 	mov	ar2,@r0
   05BF 08                 1150 	inc	r0
   05C0 86 03              1151 	mov	ar3,@r0
   05C2 08                 1152 	inc	r0
   05C3 86 04              1153 	mov	ar4,@r0
   05C5 8A 82              1154 	mov	dpl,r2
   05C7 8B 83              1155 	mov	dph,r3
   05C9 8C F0              1156 	mov	b,r4
   05CB 12s00r00           1157 	lcall	__gptrget
   05CE FD                 1158 	mov	r5,a
   05CF A3                 1159 	inc	dptr
   05D0 12s00r00           1160 	lcall	__gptrget
   05D3 FE                 1161 	mov	r6,a
   05D4 A3                 1162 	inc	dptr
   05D5 12s00r00           1163 	lcall	__gptrget
   05D8 FF                 1164 	mov	r7,a
   05D9 A8*00              1165 	mov	r0,_bp
   05DB 08                 1166 	inc	r0
   05DC 86 82              1167 	mov	dpl,@r0
   05DE 08                 1168 	inc	r0
   05DF 86 83              1169 	mov	dph,@r0
   05E1 08                 1170 	inc	r0
   05E2 86 F0              1171 	mov	b,@r0
   05E4 ED                 1172 	mov	a,r5
   05E5 12s00r00           1173 	lcall	__gptrput
   05E8 A3                 1174 	inc	dptr
   05E9 EE                 1175 	mov	a,r6
   05EA 12s00r00           1176 	lcall	__gptrput
   05ED A3                 1177 	inc	dptr
   05EE EF                 1178 	mov	a,r7
   05EF 12s00r00           1179 	lcall	__gptrput
                           1180 ;	../../core/lib/list.c:310: ((struct list *)previtem)->next = newitem;
   05F2 E5*00              1181 	mov	a,_bp
   05F4 24 F8              1182 	add	a,#0xf8
   05F6 F8                 1183 	mov	r0,a
   05F7 86 05              1184 	mov	ar5,@r0
   05F9 08                 1185 	inc	r0
   05FA 86 06              1186 	mov	ar6,@r0
   05FC 08                 1187 	inc	r0
   05FD 86 07              1188 	mov	ar7,@r0
   05FF 8A 82              1189 	mov	dpl,r2
   0601 8B 83              1190 	mov	dph,r3
   0603 8C F0              1191 	mov	b,r4
   0605 ED                 1192 	mov	a,r5
   0606 12s00r00           1193 	lcall	__gptrput
   0609 A3                 1194 	inc	dptr
   060A EE                 1195 	mov	a,r6
   060B 12s00r00           1196 	lcall	__gptrput
   060E A3                 1197 	inc	dptr
   060F EF                 1198 	mov	a,r7
   0610 12s00r00           1199 	lcall	__gptrput
   0613                    1200 00104$:
   0613 85*00 81           1201 	mov	sp,_bp
   0616 D0*00              1202 	pop	_bp
   0618 22                 1203 	ret
                           1204 ;------------------------------------------------------------
                           1205 ;Allocation info for local variables in function 'list_item_next'
                           1206 ;------------------------------------------------------------
                           1207 ;item                      Allocated to registers r5 r6 r7 
                           1208 ;------------------------------------------------------------
                           1209 ;	../../core/lib/list.c:325: list_item_next(void *item)
                           1210 ;	-----------------------------------------
                           1211 ;	 function list_item_next
                           1212 ;	-----------------------------------------
   0619                    1213 _list_item_next:
   0619 AD 82              1214 	mov	r5,dpl
   061B AE 83              1215 	mov	r6,dph
   061D AF F0              1216 	mov	r7,b
                           1217 ;	../../core/lib/list.c:327: return item == NULL? NULL: ((struct list *)item)->next;
   061F ED                 1218 	mov	a,r5
   0620 4E                 1219 	orl	a,r6
   0621 B4 01 00           1220 	cjne	a,#0x01,00107$
   0624                    1221 00107$:
   0624 E4                 1222 	clr	a
   0625 33                 1223 	rlc	a
   0626 FC                 1224 	mov	r4,a
   0627 60 08              1225 	jz	00103$
   0629 7A 00              1226 	mov	r2,#0x00
   062B 7B 00              1227 	mov	r3,#0x00
   062D 7C 00              1228 	mov	r4,#0x00
   062F 80 14              1229 	sjmp	00104$
   0631                    1230 00103$:
   0631 8D 82              1231 	mov	dpl,r5
   0633 8E 83              1232 	mov	dph,r6
   0635 8F F0              1233 	mov	b,r7
   0637 12s00r00           1234 	lcall	__gptrget
   063A FA                 1235 	mov	r2,a
   063B A3                 1236 	inc	dptr
   063C 12s00r00           1237 	lcall	__gptrget
   063F FB                 1238 	mov	r3,a
   0640 A3                 1239 	inc	dptr
   0641 12s00r00           1240 	lcall	__gptrget
   0644 FC                 1241 	mov	r4,a
   0645                    1242 00104$:
   0645 8A 82              1243 	mov	dpl,r2
   0647 8B 83              1244 	mov	dph,r3
   0649 8C F0              1245 	mov	b,r4
   064B 22                 1246 	ret
                           1247 	.area CSEG    (CODE)
                           1248 	.area CONST   (CODE)
                           1249 	.area XINIT   (CODE)
                           1250 	.area CABS    (ABS,CODE)
