                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.1 #7100 (Apr  1 2013) (Linux)
                              4 ; This file was generated Tue Apr 23 09:41:32 2013
                              5 ;--------------------------------------------------------
                              6 	.module slip
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _slip_arch_writeb
                             13 	.globl _uip_ipchksum
                             14 	.globl _uip_htons
                             15 	.globl _tcpip_input
                             16 	.globl _process_poll
                             17 	.globl _memset
                             18 	.globl _strncmp
                             19 	.globl _memcmp
                             20 	.globl _memcpy
                             21 	.globl _IRCON2_P2IF
                             22 	.globl _IRCON2_UTX0IF
                             23 	.globl _IRCON2_UTX1IF
                             24 	.globl _IRCON2_P1IF
                             25 	.globl _IRCON2_WDTIF
                             26 	.globl _CY
                             27 	.globl _AC
                             28 	.globl _F0
                             29 	.globl _RS1
                             30 	.globl _RS0
                             31 	.globl _OV
                             32 	.globl _F1
                             33 	.globl _P
                             34 	.globl _IRCON_DMAIF
                             35 	.globl _IRCON_T1IF
                             36 	.globl _IRCON_T2IF
                             37 	.globl _IRCON_T3IF
                             38 	.globl _IRCON_T4IF
                             39 	.globl _IRCON_P0IF
                             40 	.globl _IRCON_STIF
                             41 	.globl _IEN1_DMAIE
                             42 	.globl _IEN1_T1IE
                             43 	.globl _IEN1_T2IE
                             44 	.globl _IEN1_T3IE
                             45 	.globl _IEN1_T4IE
                             46 	.globl _IEN1_P0IE
                             47 	.globl _IEN0_RFERRIE
                             48 	.globl _IEN0_ADCIE
                             49 	.globl _IEN0_URX0IE
                             50 	.globl _IEN0_URX1IE
                             51 	.globl _IEN0_ENCIE
                             52 	.globl _IEN0_STIE
                             53 	.globl _IEN0_EA
                             54 	.globl _EA
                             55 	.globl _P2_4
                             56 	.globl _P2_3
                             57 	.globl _P2_2
                             58 	.globl _P2_1
                             59 	.globl _P2_0
                             60 	.globl _S0CON_ENCIF_0
                             61 	.globl _S0CON_ENCIF_1
                             62 	.globl _P1_7
                             63 	.globl _P1_6
                             64 	.globl _P1_5
                             65 	.globl _P1_4
                             66 	.globl _P1_3
                             67 	.globl _P1_2
                             68 	.globl _P1_1
                             69 	.globl _P1_0
                             70 	.globl _TCON_IT0
                             71 	.globl _TCON_RFERRIF
                             72 	.globl _TCON_IT1
                             73 	.globl _TCON_URX0IF
                             74 	.globl _TCON_ADCIF
                             75 	.globl _TCON_URX1IF
                             76 	.globl _P0_0
                             77 	.globl _P0_1
                             78 	.globl _P0_2
                             79 	.globl _P0_3
                             80 	.globl _P0_4
                             81 	.globl _P0_5
                             82 	.globl _P0_6
                             83 	.globl _P0_7
                             84 	.globl _P2DIR
                             85 	.globl _P1DIR
                             86 	.globl _P0DIR
                             87 	.globl _U1GCR
                             88 	.globl _U1UCR
                             89 	.globl _U1BAUD
                             90 	.globl _U1BUF
                             91 	.globl _U1CSR
                             92 	.globl _P2INP
                             93 	.globl _P1INP
                             94 	.globl _P2SEL
                             95 	.globl _P1SEL
                             96 	.globl _P0SEL
                             97 	.globl _ADCCFG
                             98 	.globl _PERCFG
                             99 	.globl _B
                            100 	.globl _T4CC1
                            101 	.globl _T4CCTL1
                            102 	.globl _T4CC0
                            103 	.globl _T4CCTL0
                            104 	.globl _T4CTL
                            105 	.globl _T4CNT
                            106 	.globl _RFIF
                            107 	.globl _IRCON2
                            108 	.globl _T1CCTL2
                            109 	.globl _T1CCTL1
                            110 	.globl _T1CCTL0
                            111 	.globl _T1CTL
                            112 	.globl _T1CNTH
                            113 	.globl _T1CNTL
                            114 	.globl _RFST
                            115 	.globl _ACC
                            116 	.globl _T1CC2H
                            117 	.globl _T1CC2L
                            118 	.globl _T1CC1H
                            119 	.globl _T1CC1L
                            120 	.globl _T1CC0H
                            121 	.globl _T1CC0L
                            122 	.globl _RFD
                            123 	.globl _TIMIF
                            124 	.globl _DMAREQ
                            125 	.globl _DMAARM
                            126 	.globl _DMA0CFGH
                            127 	.globl _DMA0CFGL
                            128 	.globl _DMA1CFGH
                            129 	.globl _DMA1CFGL
                            130 	.globl _DMAIRQ
                            131 	.globl _PSW
                            132 	.globl _T3CC1
                            133 	.globl _T3CCTL1
                            134 	.globl _T3CC0
                            135 	.globl _T3CCTL0
                            136 	.globl _T3CTL
                            137 	.globl _T3CNT
                            138 	.globl _WDCTL
                            139 	.globl _T2CON
                            140 	.globl _MEMCTR
                            141 	.globl _CLKCON
                            142 	.globl _U0GCR
                            143 	.globl _U0UCR
                            144 	.globl _T2CNF
                            145 	.globl _U0BAUD
                            146 	.globl _U0BUF
                            147 	.globl _IRCON
                            148 	.globl _SLEEP
                            149 	.globl _RNDH
                            150 	.globl _RNDL
                            151 	.globl _ADCH
                            152 	.globl _ADCL
                            153 	.globl _IP1
                            154 	.globl _IEN1
                            155 	.globl _RCCTL
                            156 	.globl _ADCCON3
                            157 	.globl _ADCCON2
                            158 	.globl _ADCCON1
                            159 	.globl _ENCCS
                            160 	.globl _ENCDO
                            161 	.globl _ENCDI
                            162 	.globl _FWDATA
                            163 	.globl _FCTL
                            164 	.globl _FADDRH
                            165 	.globl _FADDRL
                            166 	.globl _FWT
                            167 	.globl _IP0
                            168 	.globl _IEN0
                            169 	.globl _IE
                            170 	.globl _T2THD
                            171 	.globl _T2TLD
                            172 	.globl _T2CAPHPH
                            173 	.globl _T2CAPLPL
                            174 	.globl _T2OF2
                            175 	.globl _T2OF1
                            176 	.globl _T2OF0
                            177 	.globl _P2
                            178 	.globl _PSBANK
                            179 	.globl _FMAP
                            180 	.globl _T2PEROF2
                            181 	.globl _T2PEROF1
                            182 	.globl _T2PEROF0
                            183 	.globl _S1CON
                            184 	.globl _IEN2
                            185 	.globl _HSRC
                            186 	.globl _S0CON
                            187 	.globl _ST2
                            188 	.globl _ST1
                            189 	.globl _ST0
                            190 	.globl _T2CMP
                            191 	.globl __XPAGE
                            192 	.globl _DPS
                            193 	.globl _RFIM
                            194 	.globl _P1
                            195 	.globl _P0INP
                            196 	.globl _P1IEN
                            197 	.globl _PICTL
                            198 	.globl _P2IFG
                            199 	.globl _P1IFG
                            200 	.globl _P0IFG
                            201 	.globl _TCON
                            202 	.globl _PCON
                            203 	.globl _U0CSR
                            204 	.globl _DPH1
                            205 	.globl _DPL1
                            206 	.globl _DPH0
                            207 	.globl _DPL0
                            208 	.globl _SP
                            209 	.globl _P0
                            210 	.globl _slip_process
                            211 	.globl _slip_active
                            212 	.globl _ADC_SHADOW
                            213 	.globl _U1BUF_SHADOW
                            214 	.globl _RFD_SHADOW
                            215 	.globl _U0BUF_SHADOW
                            216 	.globl _RFSTATUS
                            217 	.globl _CHIPID
                            218 	.globl _CHVER
                            219 	.globl _FSMTC1
                            220 	.globl _RXFIFOCNT
                            221 	.globl _IOCFG3
                            222 	.globl _IOCFG2
                            223 	.globl _IOCFG1
                            224 	.globl _IOCFG0
                            225 	.globl _SHORTADDRL
                            226 	.globl _SHORTADDRH
                            227 	.globl _PANIDL
                            228 	.globl _PANIDH
                            229 	.globl _IEEE_ADDR7
                            230 	.globl _IEEE_ADDR6
                            231 	.globl _IEEE_ADDR5
                            232 	.globl _IEEE_ADDR4
                            233 	.globl _IEEE_ADDR3
                            234 	.globl _IEEE_ADDR2
                            235 	.globl _IEEE_ADDR1
                            236 	.globl _IEEE_ADDR0
                            237 	.globl _DACTSTL
                            238 	.globl _DACTSTH
                            239 	.globl _ADCTSTL
                            240 	.globl _ADCTSTH
                            241 	.globl _FSMSTATE
                            242 	.globl _AGCCTRLL
                            243 	.globl _AGCCTRLH
                            244 	.globl _MANORL
                            245 	.globl _MANORH
                            246 	.globl _MANANDL
                            247 	.globl _MANANDH
                            248 	.globl _FSMTCL
                            249 	.globl _FSMTCH
                            250 	.globl _RFPWR
                            251 	.globl _CSPT
                            252 	.globl _CSPCTRL
                            253 	.globl _CSPZ
                            254 	.globl _CSPY
                            255 	.globl _CSPX
                            256 	.globl _FSCTRLL
                            257 	.globl _FSCTRLH
                            258 	.globl _RXCTRL1L
                            259 	.globl _RXCTRL1H
                            260 	.globl _RXCTRL0L
                            261 	.globl _RXCTRL0H
                            262 	.globl _TXCTRLL
                            263 	.globl _TXCTRLH
                            264 	.globl _SYNCWORDL
                            265 	.globl _SYNCWORDH
                            266 	.globl _RSSIL
                            267 	.globl _RSSIH
                            268 	.globl _MDMCTRL1L
                            269 	.globl _MDMCTRL1H
                            270 	.globl _MDMCTRL0L
                            271 	.globl _MDMCTRL0H
                            272 	.globl _slip_set_input_callback
                            273 	.globl _slip_send
                            274 	.globl _slip_write
                            275 	.globl _slip_input_byte
                            276 ;--------------------------------------------------------
                            277 ; special function registers
                            278 ;--------------------------------------------------------
                            279 	.area RSEG    (ABS,DATA)
   0000                     280 	.org 0x0000
                    0080    281 _P0	=	0x0080
                    0081    282 _SP	=	0x0081
                    0082    283 _DPL0	=	0x0082
                    0083    284 _DPH0	=	0x0083
                    0084    285 _DPL1	=	0x0084
                    0085    286 _DPH1	=	0x0085
                    0086    287 _U0CSR	=	0x0086
                    0087    288 _PCON	=	0x0087
                    0088    289 _TCON	=	0x0088
                    0089    290 _P0IFG	=	0x0089
                    008A    291 _P1IFG	=	0x008a
                    008B    292 _P2IFG	=	0x008b
                    008C    293 _PICTL	=	0x008c
                    008D    294 _P1IEN	=	0x008d
                    008F    295 _P0INP	=	0x008f
                    0090    296 _P1	=	0x0090
                    0091    297 _RFIM	=	0x0091
                    0092    298 _DPS	=	0x0092
                    0093    299 __XPAGE	=	0x0093
                    0094    300 _T2CMP	=	0x0094
                    0095    301 _ST0	=	0x0095
                    0096    302 _ST1	=	0x0096
                    0097    303 _ST2	=	0x0097
                    0098    304 _S0CON	=	0x0098
                    0099    305 _HSRC	=	0x0099
                    009A    306 _IEN2	=	0x009a
                    009B    307 _S1CON	=	0x009b
                    009C    308 _T2PEROF0	=	0x009c
                    009D    309 _T2PEROF1	=	0x009d
                    009E    310 _T2PEROF2	=	0x009e
                    009F    311 _FMAP	=	0x009f
                    009F    312 _PSBANK	=	0x009f
                    00A0    313 _P2	=	0x00a0
                    00A1    314 _T2OF0	=	0x00a1
                    00A2    315 _T2OF1	=	0x00a2
                    00A3    316 _T2OF2	=	0x00a3
                    00A4    317 _T2CAPLPL	=	0x00a4
                    00A5    318 _T2CAPHPH	=	0x00a5
                    00A6    319 _T2TLD	=	0x00a6
                    00A7    320 _T2THD	=	0x00a7
                    00A8    321 _IE	=	0x00a8
                    00A8    322 _IEN0	=	0x00a8
                    00A9    323 _IP0	=	0x00a9
                    00AB    324 _FWT	=	0x00ab
                    00AC    325 _FADDRL	=	0x00ac
                    00AD    326 _FADDRH	=	0x00ad
                    00AE    327 _FCTL	=	0x00ae
                    00AF    328 _FWDATA	=	0x00af
                    00B1    329 _ENCDI	=	0x00b1
                    00B2    330 _ENCDO	=	0x00b2
                    00B3    331 _ENCCS	=	0x00b3
                    00B4    332 _ADCCON1	=	0x00b4
                    00B5    333 _ADCCON2	=	0x00b5
                    00B6    334 _ADCCON3	=	0x00b6
                    00B7    335 _RCCTL	=	0x00b7
                    00B8    336 _IEN1	=	0x00b8
                    00B9    337 _IP1	=	0x00b9
                    00BA    338 _ADCL	=	0x00ba
                    00BB    339 _ADCH	=	0x00bb
                    00BC    340 _RNDL	=	0x00bc
                    00BD    341 _RNDH	=	0x00bd
                    00BE    342 _SLEEP	=	0x00be
                    00C0    343 _IRCON	=	0x00c0
                    00C1    344 _U0BUF	=	0x00c1
                    00C2    345 _U0BAUD	=	0x00c2
                    00C3    346 _T2CNF	=	0x00c3
                    00C4    347 _U0UCR	=	0x00c4
                    00C5    348 _U0GCR	=	0x00c5
                    00C6    349 _CLKCON	=	0x00c6
                    00C7    350 _MEMCTR	=	0x00c7
                    00C8    351 _T2CON	=	0x00c8
                    00C9    352 _WDCTL	=	0x00c9
                    00CA    353 _T3CNT	=	0x00ca
                    00CB    354 _T3CTL	=	0x00cb
                    00CC    355 _T3CCTL0	=	0x00cc
                    00CD    356 _T3CC0	=	0x00cd
                    00CE    357 _T3CCTL1	=	0x00ce
                    00CF    358 _T3CC1	=	0x00cf
                    00D0    359 _PSW	=	0x00d0
                    00D1    360 _DMAIRQ	=	0x00d1
                    00D2    361 _DMA1CFGL	=	0x00d2
                    00D3    362 _DMA1CFGH	=	0x00d3
                    00D4    363 _DMA0CFGL	=	0x00d4
                    00D5    364 _DMA0CFGH	=	0x00d5
                    00D6    365 _DMAARM	=	0x00d6
                    00D7    366 _DMAREQ	=	0x00d7
                    00D8    367 _TIMIF	=	0x00d8
                    00D9    368 _RFD	=	0x00d9
                    00DA    369 _T1CC0L	=	0x00da
                    00DB    370 _T1CC0H	=	0x00db
                    00DC    371 _T1CC1L	=	0x00dc
                    00DD    372 _T1CC1H	=	0x00dd
                    00DE    373 _T1CC2L	=	0x00de
                    00DF    374 _T1CC2H	=	0x00df
                    00E0    375 _ACC	=	0x00e0
                    00E1    376 _RFST	=	0x00e1
                    00E2    377 _T1CNTL	=	0x00e2
                    00E3    378 _T1CNTH	=	0x00e3
                    00E4    379 _T1CTL	=	0x00e4
                    00E5    380 _T1CCTL0	=	0x00e5
                    00E6    381 _T1CCTL1	=	0x00e6
                    00E7    382 _T1CCTL2	=	0x00e7
                    00E8    383 _IRCON2	=	0x00e8
                    00E9    384 _RFIF	=	0x00e9
                    00EA    385 _T4CNT	=	0x00ea
                    00EB    386 _T4CTL	=	0x00eb
                    00EC    387 _T4CCTL0	=	0x00ec
                    00ED    388 _T4CC0	=	0x00ed
                    00EE    389 _T4CCTL1	=	0x00ee
                    00EF    390 _T4CC1	=	0x00ef
                    00F0    391 _B	=	0x00f0
                    00F1    392 _PERCFG	=	0x00f1
                    00F2    393 _ADCCFG	=	0x00f2
                    00F3    394 _P0SEL	=	0x00f3
                    00F4    395 _P1SEL	=	0x00f4
                    00F5    396 _P2SEL	=	0x00f5
                    00F6    397 _P1INP	=	0x00f6
                    00F7    398 _P2INP	=	0x00f7
                    00F8    399 _U1CSR	=	0x00f8
                    00F9    400 _U1BUF	=	0x00f9
                    00FA    401 _U1BAUD	=	0x00fa
                    00FB    402 _U1UCR	=	0x00fb
                    00FC    403 _U1GCR	=	0x00fc
                    00FD    404 _P0DIR	=	0x00fd
                    00FE    405 _P1DIR	=	0x00fe
                    00FF    406 _P2DIR	=	0x00ff
                            407 ;--------------------------------------------------------
                            408 ; special function bits
                            409 ;--------------------------------------------------------
                            410 	.area RSEG    (ABS,DATA)
   0000                     411 	.org 0x0000
                    0087    412 _P0_7	=	0x0087
                    0086    413 _P0_6	=	0x0086
                    0085    414 _P0_5	=	0x0085
                    0084    415 _P0_4	=	0x0084
                    0083    416 _P0_3	=	0x0083
                    0082    417 _P0_2	=	0x0082
                    0081    418 _P0_1	=	0x0081
                    0080    419 _P0_0	=	0x0080
                    008F    420 _TCON_URX1IF	=	0x008f
                    008D    421 _TCON_ADCIF	=	0x008d
                    008B    422 _TCON_URX0IF	=	0x008b
                    008A    423 _TCON_IT1	=	0x008a
                    0089    424 _TCON_RFERRIF	=	0x0089
                    0088    425 _TCON_IT0	=	0x0088
                    0090    426 _P1_0	=	0x0090
                    0091    427 _P1_1	=	0x0091
                    0092    428 _P1_2	=	0x0092
                    0093    429 _P1_3	=	0x0093
                    0094    430 _P1_4	=	0x0094
                    0095    431 _P1_5	=	0x0095
                    0096    432 _P1_6	=	0x0096
                    0097    433 _P1_7	=	0x0097
                    0099    434 _S0CON_ENCIF_1	=	0x0099
                    0098    435 _S0CON_ENCIF_0	=	0x0098
                    00A0    436 _P2_0	=	0x00a0
                    00A1    437 _P2_1	=	0x00a1
                    00A2    438 _P2_2	=	0x00a2
                    00A3    439 _P2_3	=	0x00a3
                    00A4    440 _P2_4	=	0x00a4
                    00AF    441 _EA	=	0x00af
                    00AF    442 _IEN0_EA	=	0x00af
                    00AD    443 _IEN0_STIE	=	0x00ad
                    00AC    444 _IEN0_ENCIE	=	0x00ac
                    00AB    445 _IEN0_URX1IE	=	0x00ab
                    00AA    446 _IEN0_URX0IE	=	0x00aa
                    00A9    447 _IEN0_ADCIE	=	0x00a9
                    00A8    448 _IEN0_RFERRIE	=	0x00a8
                    00BD    449 _IEN1_P0IE	=	0x00bd
                    00BC    450 _IEN1_T4IE	=	0x00bc
                    00BB    451 _IEN1_T3IE	=	0x00bb
                    00BA    452 _IEN1_T2IE	=	0x00ba
                    00B9    453 _IEN1_T1IE	=	0x00b9
                    00B8    454 _IEN1_DMAIE	=	0x00b8
                    00C7    455 _IRCON_STIF	=	0x00c7
                    00C5    456 _IRCON_P0IF	=	0x00c5
                    00C4    457 _IRCON_T4IF	=	0x00c4
                    00C3    458 _IRCON_T3IF	=	0x00c3
                    00C2    459 _IRCON_T2IF	=	0x00c2
                    00C1    460 _IRCON_T1IF	=	0x00c1
                    00C0    461 _IRCON_DMAIF	=	0x00c0
                    00D0    462 _P	=	0x00d0
                    00D1    463 _F1	=	0x00d1
                    00D2    464 _OV	=	0x00d2
                    00D3    465 _RS0	=	0x00d3
                    00D4    466 _RS1	=	0x00d4
                    00D5    467 _F0	=	0x00d5
                    00D6    468 _AC	=	0x00d6
                    00D7    469 _CY	=	0x00d7
                    00EC    470 _IRCON2_WDTIF	=	0x00ec
                    00EB    471 _IRCON2_P1IF	=	0x00eb
                    00EA    472 _IRCON2_UTX1IF	=	0x00ea
                    00E9    473 _IRCON2_UTX0IF	=	0x00e9
                    00E8    474 _IRCON2_P2IF	=	0x00e8
                            475 ;--------------------------------------------------------
                            476 ; overlayable register banks
                            477 ;--------------------------------------------------------
                            478 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     479 	.ds 8
                            480 ;--------------------------------------------------------
                            481 ; internal ram data
                            482 ;--------------------------------------------------------
                            483 	.area DSEG    (DATA)
                            484 ;--------------------------------------------------------
                            485 ; overlayable items in internal ram 
                            486 ;--------------------------------------------------------
                            487 	.area OSEG    (OVR,DATA)
                            488 ;--------------------------------------------------------
                            489 ; indirectly addressable internal ram data
                            490 ;--------------------------------------------------------
                            491 	.area ISEG    (DATA)
                            492 ;--------------------------------------------------------
                            493 ; absolute internal ram data
                            494 ;--------------------------------------------------------
                            495 	.area IABS    (ABS,DATA)
                            496 	.area IABS    (ABS,DATA)
                            497 ;--------------------------------------------------------
                            498 ; bit data
                            499 ;--------------------------------------------------------
                            500 	.area BSEG    (BIT)
                            501 ;--------------------------------------------------------
                            502 ; paged external ram data
                            503 ;--------------------------------------------------------
                            504 	.area PSEG    (PAG,XDATA)
                            505 ;--------------------------------------------------------
                            506 ; external ram data
                            507 ;--------------------------------------------------------
                            508 	.area XSEG    (XDATA)
                    DF02    509 _MDMCTRL0H	=	0xdf02
                    DF03    510 _MDMCTRL0L	=	0xdf03
                    DF04    511 _MDMCTRL1H	=	0xdf04
                    DF05    512 _MDMCTRL1L	=	0xdf05
                    DF06    513 _RSSIH	=	0xdf06
                    DF07    514 _RSSIL	=	0xdf07
                    DF08    515 _SYNCWORDH	=	0xdf08
                    DF09    516 _SYNCWORDL	=	0xdf09
                    DF0A    517 _TXCTRLH	=	0xdf0a
                    DF0B    518 _TXCTRLL	=	0xdf0b
                    DF0C    519 _RXCTRL0H	=	0xdf0c
                    DF0D    520 _RXCTRL0L	=	0xdf0d
                    DF0E    521 _RXCTRL1H	=	0xdf0e
                    DF0F    522 _RXCTRL1L	=	0xdf0f
                    DF10    523 _FSCTRLH	=	0xdf10
                    DF11    524 _FSCTRLL	=	0xdf11
                    DF12    525 _CSPX	=	0xdf12
                    DF13    526 _CSPY	=	0xdf13
                    DF14    527 _CSPZ	=	0xdf14
                    DF15    528 _CSPCTRL	=	0xdf15
                    DF16    529 _CSPT	=	0xdf16
                    DF17    530 _RFPWR	=	0xdf17
                    DF20    531 _FSMTCH	=	0xdf20
                    DF21    532 _FSMTCL	=	0xdf21
                    DF22    533 _MANANDH	=	0xdf22
                    DF23    534 _MANANDL	=	0xdf23
                    DF24    535 _MANORH	=	0xdf24
                    DF25    536 _MANORL	=	0xdf25
                    DF26    537 _AGCCTRLH	=	0xdf26
                    DF27    538 _AGCCTRLL	=	0xdf27
                    DF39    539 _FSMSTATE	=	0xdf39
                    DF3A    540 _ADCTSTH	=	0xdf3a
                    DF3B    541 _ADCTSTL	=	0xdf3b
                    DF3C    542 _DACTSTH	=	0xdf3c
                    DF3D    543 _DACTSTL	=	0xdf3d
                    DF43    544 _IEEE_ADDR0	=	0xdf43
                    DF44    545 _IEEE_ADDR1	=	0xdf44
                    DF45    546 _IEEE_ADDR2	=	0xdf45
                    DF46    547 _IEEE_ADDR3	=	0xdf46
                    DF47    548 _IEEE_ADDR4	=	0xdf47
                    DF48    549 _IEEE_ADDR5	=	0xdf48
                    DF49    550 _IEEE_ADDR6	=	0xdf49
                    DF4A    551 _IEEE_ADDR7	=	0xdf4a
                    DF4B    552 _PANIDH	=	0xdf4b
                    DF4C    553 _PANIDL	=	0xdf4c
                    DF4D    554 _SHORTADDRH	=	0xdf4d
                    DF4E    555 _SHORTADDRL	=	0xdf4e
                    DF4F    556 _IOCFG0	=	0xdf4f
                    DF50    557 _IOCFG1	=	0xdf50
                    DF51    558 _IOCFG2	=	0xdf51
                    DF52    559 _IOCFG3	=	0xdf52
                    DF53    560 _RXFIFOCNT	=	0xdf53
                    DF54    561 _FSMTC1	=	0xdf54
                    DF60    562 _CHVER	=	0xdf60
                    DF61    563 _CHIPID	=	0xdf61
                    DF62    564 _RFSTATUS	=	0xdf62
                    DFC1    565 _U0BUF_SHADOW	=	0xdfc1
                    DFD9    566 _RFD_SHADOW	=	0xdfd9
                    DFF9    567 _U1BUF_SHADOW	=	0xdff9
                    DFBA    568 _ADC_SHADOW	=	0xdfba
   0000                     569 _slip_active::
   0000                     570 	.ds 1
   0001                     571 _begin:
   0001                     572 	.ds 2
   0003                     573 _end:
   0003                     574 	.ds 2
   0005                     575 _rxbuf:
   0005                     576 	.ds 110
   0073                     577 _pkt_end:
   0073                     578 	.ds 2
   0075                     579 _process_thread_slip_process_ip_id_6_11:
   0075                     580 	.ds 2
                            581 ;--------------------------------------------------------
                            582 ; absolute external ram data
                            583 ;--------------------------------------------------------
                            584 	.area XABS    (ABS,XDATA)
                            585 ;--------------------------------------------------------
                            586 ; external initialized ram data
                            587 ;--------------------------------------------------------
                            588 	.area XISEG   (XDATA)
   0000                     589 _slip_process::
   0000                     590 	.ds 9
   0009                     591 _state:
   0009                     592 	.ds 1
   000A                     593 _input_callback:
   000A                     594 	.ds 2
                            595 	.area HOME    (CODE)
                            596 	.area GSINIT0 (CODE)
                            597 	.area GSINIT1 (CODE)
                            598 	.area GSINIT2 (CODE)
                            599 	.area GSINIT3 (CODE)
                            600 	.area GSINIT4 (CODE)
                            601 	.area GSINIT5 (CODE)
                            602 	.area GSINIT  (CODE)
                            603 	.area GSFINAL (CODE)
                            604 	.area CSEG    (CODE)
                            605 ;--------------------------------------------------------
                            606 ; global & static initialisations
                            607 ;--------------------------------------------------------
                            608 	.area HOME    (CODE)
                            609 	.area GSINIT  (CODE)
                            610 	.area GSFINAL (CODE)
                            611 	.area GSINIT  (CODE)
                            612 ;--------------------------------------------------------
                            613 ; Home
                            614 ;--------------------------------------------------------
                            615 	.area HOME    (CODE)
                            616 	.area HOME    (CODE)
                            617 ;--------------------------------------------------------
                            618 ; code
                            619 ;--------------------------------------------------------
                            620 	.area CSEG    (CODE)
                            621 ;------------------------------------------------------------
                            622 ;Allocation info for local variables in function 'slip_set_input_callback'
                            623 ;------------------------------------------------------------
                            624 ;c                         Allocated to registers 
                            625 ;------------------------------------------------------------
                            626 ;	../../core/dev/slip.c:92: slip_set_input_callback(void (*c)(void))
                            627 ;	-----------------------------------------
                            628 ;	 function slip_set_input_callback
                            629 ;	-----------------------------------------
   0000                     630 _slip_set_input_callback:
                    0007    631 	ar7 = 0x07
                    0006    632 	ar6 = 0x06
                    0005    633 	ar5 = 0x05
                    0004    634 	ar4 = 0x04
                    0003    635 	ar3 = 0x03
                    0002    636 	ar2 = 0x02
                    0001    637 	ar1 = 0x01
                    0000    638 	ar0 = 0x00
   0000 AF 83               639 	mov	r7,dph
   0002 E5 82               640 	mov	a,dpl
   0004 90s00r0A            641 	mov	dptr,#_input_callback
   0007 F0                  642 	movx	@dptr,a
   0008 A3                  643 	inc	dptr
   0009 EF                  644 	mov	a,r7
   000A F0                  645 	movx	@dptr,a
                            646 ;	../../core/dev/slip.c:94: input_callback = c;
   000B 22                  647 	ret
                            648 ;------------------------------------------------------------
                            649 ;Allocation info for local variables in function 'slip_send'
                            650 ;------------------------------------------------------------
                            651 ;i                         Allocated to stack - _bp +1
                            652 ;ptr                       Allocated to registers r5 r6 r7 
                            653 ;c                         Allocated to registers r4 
                            654 ;------------------------------------------------------------
                            655 ;	../../core/dev/slip.c:102: slip_send(void)
                            656 ;	-----------------------------------------
                            657 ;	 function slip_send
                            658 ;	-----------------------------------------
   000C                     659 _slip_send:
   000C C0*00               660 	push	_bp
   000E 85 81*00            661 	mov	_bp,sp
   0011 05 81               662 	inc	sp
   0013 05 81               663 	inc	sp
                            664 ;	../../core/dev/slip.c:108: slip_arch_writeb(SLIP_END);
   0015 75 82 C0            665 	mov	dpl,#0xC0
   0018 12s00r00            666 	lcall	_slip_arch_writeb
                            667 ;	../../core/dev/slip.c:110: ptr = &uip_buf[UIP_LLH_LEN];
   001B 7Dr0E               668 	mov	r5,#(_uip_aligned_buf + 0x000e)
   001D 7Es00               669 	mov	r6,#((_uip_aligned_buf + 0x000e) >> 8)
   001F 7F 00               670 	mov	r7,#0x00
                            671 ;	../../core/dev/slip.c:111: for(i = 0; i < uip_len; ++i) {
   0021 A8*00               672 	mov	r0,_bp
   0023 08                  673 	inc	r0
   0024 E4                  674 	clr	a
   0025 F6                  675 	mov	@r0,a
   0026 08                  676 	inc	r0
   0027 F6                  677 	mov	@r0,a
   0028                     678 00108$:
   0028 C0 05               679 	push	ar5
   002A C0 06               680 	push	ar6
   002C C0 07               681 	push	ar7
   002E 90s00r00            682 	mov	dptr,#_uip_len
   0031 E0                  683 	movx	a,@dptr
   0032 FA                  684 	mov	r2,a
   0033 A3                  685 	inc	dptr
   0034 E0                  686 	movx	a,@dptr
   0035 FF                  687 	mov	r7,a
   0036 A8*00               688 	mov	r0,_bp
   0038 08                  689 	inc	r0
   0039 C3                  690 	clr	c
   003A E6                  691 	mov	a,@r0
   003B 9A                  692 	subb	a,r2
   003C 08                  693 	inc	r0
   003D E6                  694 	mov	a,@r0
   003E 9F                  695 	subb	a,r7
   003F D0 07               696 	pop	ar7
   0041 D0 06               697 	pop	ar6
   0043 D0 05               698 	pop	ar5
   0045 40 03               699 	jc	00125$
   0047 02s00rC1            700 	ljmp	00111$
   004A                     701 00125$:
                            702 ;	../../core/dev/slip.c:112: if(i == UIP_TCPIP_HLEN) {
   004A A8*00               703 	mov	r0,_bp
   004C 08                  704 	inc	r0
   004D B6 28 15            705 	cjne	@r0,#0x28,00102$
   0050 08                  706 	inc	r0
   0051 B6 00 11            707 	cjne	@r0,#0x00,00102$
                            708 ;	../../core/dev/slip.c:113: ptr = (uint8_t *)uip_appdata;
   0054 90s00r00            709 	mov	dptr,#_uip_appdata
   0057 E0                  710 	movx	a,@dptr
   0058 FA                  711 	mov	r2,a
   0059 A3                  712 	inc	dptr
   005A E0                  713 	movx	a,@dptr
   005B FB                  714 	mov	r3,a
   005C A3                  715 	inc	dptr
   005D E0                  716 	movx	a,@dptr
   005E FC                  717 	mov	r4,a
   005F 8A 05               718 	mov	ar5,r2
   0061 8B 06               719 	mov	ar6,r3
   0063 8C 07               720 	mov	ar7,r4
   0065                     721 00102$:
                            722 ;	../../core/dev/slip.c:115: c = *ptr++;
   0065 8D 82               723 	mov	dpl,r5
   0067 8E 83               724 	mov	dph,r6
   0069 8F F0               725 	mov	b,r7
   006B 12s00r00            726 	lcall	__gptrget
   006E FC                  727 	mov	r4,a
   006F A3                  728 	inc	dptr
   0070 AD 82               729 	mov	r5,dpl
   0072 AE 83               730 	mov	r6,dph
                            731 ;	../../core/dev/slip.c:116: if(c == SLIP_END) {
   0074 BC C0 16            732 	cjne	r4,#0xC0,00106$
                            733 ;	../../core/dev/slip.c:117: slip_arch_writeb(SLIP_ESC);
   0077 75 82 DB            734 	mov	dpl,#0xDB
   007A C0 07               735 	push	ar7
   007C C0 06               736 	push	ar6
   007E C0 05               737 	push	ar5
   0080 12s00r00            738 	lcall	_slip_arch_writeb
   0083 D0 05               739 	pop	ar5
   0085 D0 06               740 	pop	ar6
   0087 D0 07               741 	pop	ar7
                            742 ;	../../core/dev/slip.c:118: c = SLIP_ESC_END;
   0089 7C DC               743 	mov	r4,#0xDC
   008B 80 17               744 	sjmp	00107$
   008D                     745 00106$:
                            746 ;	../../core/dev/slip.c:119: } else if(c == SLIP_ESC) {
   008D BC DB 14            747 	cjne	r4,#0xDB,00107$
                            748 ;	../../core/dev/slip.c:120: slip_arch_writeb(SLIP_ESC);
   0090 75 82 DB            749 	mov	dpl,#0xDB
   0093 C0 07               750 	push	ar7
   0095 C0 06               751 	push	ar6
   0097 C0 05               752 	push	ar5
   0099 12s00r00            753 	lcall	_slip_arch_writeb
   009C D0 05               754 	pop	ar5
   009E D0 06               755 	pop	ar6
   00A0 D0 07               756 	pop	ar7
                            757 ;	../../core/dev/slip.c:121: c = SLIP_ESC_ESC;
   00A2 7C DD               758 	mov	r4,#0xDD
   00A4                     759 00107$:
                            760 ;	../../core/dev/slip.c:123: slip_arch_writeb(c);
   00A4 8C 82               761 	mov	dpl,r4
   00A6 C0 07               762 	push	ar7
   00A8 C0 06               763 	push	ar6
   00AA C0 05               764 	push	ar5
   00AC 12s00r00            765 	lcall	_slip_arch_writeb
   00AF D0 05               766 	pop	ar5
   00B1 D0 06               767 	pop	ar6
   00B3 D0 07               768 	pop	ar7
                            769 ;	../../core/dev/slip.c:111: for(i = 0; i < uip_len; ++i) {
   00B5 A8*00               770 	mov	r0,_bp
   00B7 08                  771 	inc	r0
   00B8 06                  772 	inc	@r0
   00B9 B6 00 02            773 	cjne	@r0,#0x00,00132$
   00BC 08                  774 	inc	r0
   00BD 06                  775 	inc	@r0
   00BE                     776 00132$:
   00BE 02s00r28            777 	ljmp	00108$
   00C1                     778 00111$:
                            779 ;	../../core/dev/slip.c:125: slip_arch_writeb(SLIP_END);
   00C1 75 82 C0            780 	mov	dpl,#0xC0
   00C4 12s00r00            781 	lcall	_slip_arch_writeb
                            782 ;	../../core/dev/slip.c:127: return UIP_FW_OK;
   00C7 75 82 00            783 	mov	dpl,#0x00
   00CA 85*00 81            784 	mov	sp,_bp
   00CD D0*00               785 	pop	_bp
   00CF 22                  786 	ret
                            787 ;------------------------------------------------------------
                            788 ;Allocation info for local variables in function 'slip_write'
                            789 ;------------------------------------------------------------
                            790 ;len                       Allocated to stack - _bp -4
                            791 ;_ptr                      Allocated to registers r5 r6 r7 
                            792 ;ptr                       Allocated to registers r5 r6 r7 
                            793 ;i                         Allocated to registers r3 r4 
                            794 ;c                         Allocated to registers r2 
                            795 ;------------------------------------------------------------
                            796 ;	../../core/dev/slip.c:132: slip_write(const void *_ptr, int len)
                            797 ;	-----------------------------------------
                            798 ;	 function slip_write
                            799 ;	-----------------------------------------
   00D0                     800 _slip_write:
   00D0 C0*00               801 	push	_bp
   00D2 85 81*00            802 	mov	_bp,sp
   00D5 AD 82               803 	mov	r5,dpl
   00D7 AE 83               804 	mov	r6,dph
   00D9 AF F0               805 	mov	r7,b
                            806 ;	../../core/dev/slip.c:134: const uint8_t *ptr = _ptr;
                            807 ;	../../core/dev/slip.c:138: slip_arch_writeb(SLIP_END);
   00DB 75 82 C0            808 	mov	dpl,#0xC0
   00DE C0 07               809 	push	ar7
   00E0 C0 06               810 	push	ar6
   00E2 C0 05               811 	push	ar5
   00E4 12s00r00            812 	lcall	_slip_arch_writeb
   00E7 D0 05               813 	pop	ar5
   00E9 D0 06               814 	pop	ar6
   00EB D0 07               815 	pop	ar7
                            816 ;	../../core/dev/slip.c:140: for(i = 0; i < len; ++i) {
   00ED 7B 00               817 	mov	r3,#0x00
   00EF 7C 00               818 	mov	r4,#0x00
   00F1                     819 00106$:
   00F1 C0 05               820 	push	ar5
   00F3 C0 06               821 	push	ar6
   00F5 C0 07               822 	push	ar7
   00F7 E5*00               823 	mov	a,_bp
   00F9 24 FC               824 	add	a,#0xfc
   00FB F8                  825 	mov	r0,a
   00FC 86 02               826 	mov	ar2,@r0
   00FE 08                  827 	inc	r0
   00FF 86 07               828 	mov	ar7,@r0
   0101 C3                  829 	clr	c
   0102 EB                  830 	mov	a,r3
   0103 9A                  831 	subb	a,r2
   0104 EC                  832 	mov	a,r4
   0105 9F                  833 	subb	a,r7
   0106 D0 07               834 	pop	ar7
   0108 D0 06               835 	pop	ar6
   010A D0 05               836 	pop	ar5
   010C 50 70               837 	jnc	00109$
                            838 ;	../../core/dev/slip.c:141: c = *ptr++;
   010E 8D 82               839 	mov	dpl,r5
   0110 8E 83               840 	mov	dph,r6
   0112 8F F0               841 	mov	b,r7
   0114 12s00r00            842 	lcall	__gptrget
   0117 FA                  843 	mov	r2,a
   0118 A3                  844 	inc	dptr
   0119 AD 82               845 	mov	r5,dpl
   011B AE 83               846 	mov	r6,dph
                            847 ;	../../core/dev/slip.c:142: if(c == SLIP_END) {
   011D BA C0 1E            848 	cjne	r2,#0xC0,00104$
                            849 ;	../../core/dev/slip.c:143: slip_arch_writeb(SLIP_ESC);
   0120 75 82 DB            850 	mov	dpl,#0xDB
   0123 C0 07               851 	push	ar7
   0125 C0 06               852 	push	ar6
   0127 C0 05               853 	push	ar5
   0129 C0 04               854 	push	ar4
   012B C0 03               855 	push	ar3
   012D 12s00r00            856 	lcall	_slip_arch_writeb
   0130 D0 03               857 	pop	ar3
   0132 D0 04               858 	pop	ar4
   0134 D0 05               859 	pop	ar5
   0136 D0 06               860 	pop	ar6
   0138 D0 07               861 	pop	ar7
                            862 ;	../../core/dev/slip.c:144: c = SLIP_ESC_END;
   013A 7A DC               863 	mov	r2,#0xDC
   013C 80 1F               864 	sjmp	00105$
   013E                     865 00104$:
                            866 ;	../../core/dev/slip.c:145: } else if(c == SLIP_ESC) {
   013E BA DB 1C            867 	cjne	r2,#0xDB,00105$
                            868 ;	../../core/dev/slip.c:146: slip_arch_writeb(SLIP_ESC);
   0141 75 82 DB            869 	mov	dpl,#0xDB
   0144 C0 07               870 	push	ar7
   0146 C0 06               871 	push	ar6
   0148 C0 05               872 	push	ar5
   014A C0 04               873 	push	ar4
   014C C0 03               874 	push	ar3
   014E 12s00r00            875 	lcall	_slip_arch_writeb
   0151 D0 03               876 	pop	ar3
   0153 D0 04               877 	pop	ar4
   0155 D0 05               878 	pop	ar5
   0157 D0 06               879 	pop	ar6
   0159 D0 07               880 	pop	ar7
                            881 ;	../../core/dev/slip.c:147: c = SLIP_ESC_ESC;
   015B 7A DD               882 	mov	r2,#0xDD
   015D                     883 00105$:
                            884 ;	../../core/dev/slip.c:149: slip_arch_writeb(c);
   015D 8A 82               885 	mov	dpl,r2
   015F C0 07               886 	push	ar7
   0161 C0 06               887 	push	ar6
   0163 C0 05               888 	push	ar5
   0165 C0 04               889 	push	ar4
   0167 C0 03               890 	push	ar3
   0169 12s00r00            891 	lcall	_slip_arch_writeb
   016C D0 03               892 	pop	ar3
   016E D0 04               893 	pop	ar4
   0170 D0 05               894 	pop	ar5
   0172 D0 06               895 	pop	ar6
   0174 D0 07               896 	pop	ar7
                            897 ;	../../core/dev/slip.c:140: for(i = 0; i < len; ++i) {
   0176 0B                  898 	inc	r3
   0177 BB 00 01            899 	cjne	r3,#0x00,00126$
   017A 0C                  900 	inc	r4
   017B                     901 00126$:
   017B 02s00rF1            902 	ljmp	00106$
   017E                     903 00109$:
                            904 ;	../../core/dev/slip.c:151: slip_arch_writeb(SLIP_END);
   017E 75 82 C0            905 	mov	dpl,#0xC0
   0181 12s00r00            906 	lcall	_slip_arch_writeb
                            907 ;	../../core/dev/slip.c:153: return len;
   0184 E5*00               908 	mov	a,_bp
   0186 24 FC               909 	add	a,#0xfc
   0188 F8                  910 	mov	r0,a
   0189 86 07               911 	mov	ar7,@r0
   018B 8F 82               912 	mov	dpl,r7
   018D D0*00               913 	pop	_bp
   018F 22                  914 	ret
                            915 ;------------------------------------------------------------
                            916 ;Allocation info for local variables in function 'rxbuf_init'
                            917 ;------------------------------------------------------------
                            918 ;	../../core/dev/slip.c:157: rxbuf_init(void)
                            919 ;	-----------------------------------------
                            920 ;	 function rxbuf_init
                            921 ;	-----------------------------------------
   0190                     922 _rxbuf_init:
                            923 ;	../../core/dev/slip.c:159: begin = end = pkt_end = 0;
   0190 90s00r73            924 	mov	dptr,#_pkt_end
   0193 E4                  925 	clr	a
   0194 F0                  926 	movx	@dptr,a
   0195 A3                  927 	inc	dptr
   0196 F0                  928 	movx	@dptr,a
   0197 90s00r03            929 	mov	dptr,#_end
   019A F0                  930 	movx	@dptr,a
   019B A3                  931 	inc	dptr
   019C E4                  932 	clr	a
   019D F0                  933 	movx	@dptr,a
   019E 90s00r01            934 	mov	dptr,#_begin
   01A1 F0                  935 	movx	@dptr,a
   01A2 A3                  936 	inc	dptr
   01A3 E4                  937 	clr	a
   01A4 F0                  938 	movx	@dptr,a
                            939 ;	../../core/dev/slip.c:160: state = STATE_OK;
   01A5 90s00r09            940 	mov	dptr,#_state
   01A8 74 01               941 	mov	a,#0x01
   01AA F0                  942 	movx	@dptr,a
   01AB 22                  943 	ret
                            944 ;------------------------------------------------------------
                            945 ;Allocation info for local variables in function 'slip_poll_handler'
                            946 ;------------------------------------------------------------
                            947 ;blen                      Allocated to stack - _bp -4
                            948 ;outbuf                    Allocated to stack - _bp +1
                            949 ;i                         Allocated to registers r3 r4 
                            950 ;len                       Allocated to stack - _bp +4
                            951 ;i                         Allocated to registers 
                            952 ;sloc0                     Allocated to stack - _bp +10
                            953 ;sloc1                     Allocated to stack - _bp +6
                            954 ;sloc2                     Allocated to stack - _bp +14
                            955 ;------------------------------------------------------------
                            956 ;	../../core/dev/slip.c:165: slip_poll_handler(uint8_t *outbuf, uint16_t blen)
                            957 ;	-----------------------------------------
                            958 ;	 function slip_poll_handler
                            959 ;	-----------------------------------------
   01AC                     960 _slip_poll_handler:
   01AC C0*00               961 	push	_bp
   01AE 85 81*00            962 	mov	_bp,sp
   01B1 C0 82               963 	push	dpl
   01B3 C0 83               964 	push	dph
   01B5 C0 F0               965 	push	b
   01B7 E5 81               966 	mov	a,sp
   01B9 24 04               967 	add	a,#0x04
   01BB F5 81               968 	mov	sp,a
                            969 ;	../../core/dev/slip.c:168: if(rxbuf[begin] == 'C') {
   01BD 90s00r01            970 	mov	dptr,#_begin
   01C0 E0                  971 	movx	a,@dptr
   01C1 FB                  972 	mov	r3,a
   01C2 A3                  973 	inc	dptr
   01C3 E0                  974 	movx	a,@dptr
   01C4 FC                  975 	mov	r4,a
   01C5 EB                  976 	mov	a,r3
   01C6 24r05               977 	add	a,#_rxbuf
   01C8 FF                  978 	mov	r7,a
   01C9 EC                  979 	mov	a,r4
   01CA 34s00               980 	addc	a,#(_rxbuf >> 8)
   01CC FE                  981 	mov	r6,a
   01CD 8F 82               982 	mov	dpl,r7
   01CF 8E 83               983 	mov	dph,r6
   01D1 E0                  984 	movx	a,@dptr
   01D2 FA                  985 	mov	r2,a
   01D3 BA 43 02            986 	cjne	r2,#0x43,00167$
   01D6 80 03               987 	sjmp	00168$
   01D8                     988 00167$:
   01D8 02s02r98            989 	ljmp	00106$
   01DB                     990 00168$:
                            991 ;	../../core/dev/slip.c:170: if(begin < end && (end - begin) >= 6
   01DB 90s00r03            992 	mov	dptr,#_end
   01DE E0                  993 	movx	a,@dptr
   01DF FD                  994 	mov	r5,a
   01E0 A3                  995 	inc	dptr
   01E1 E0                  996 	movx	a,@dptr
   01E2 FA                  997 	mov	r2,a
   01E3 C3                  998 	clr	c
   01E4 EB                  999 	mov	a,r3
   01E5 9D                 1000 	subb	a,r5
   01E6 EC                 1001 	mov	a,r4
   01E7 9A                 1002 	subb	a,r2
   01E8 40 03              1003 	jc	00169$
   01EA 02s02r98           1004 	ljmp	00106$
   01ED                    1005 00169$:
   01ED ED                 1006 	mov	a,r5
   01EE C3                 1007 	clr	c
   01EF 9B                 1008 	subb	a,r3
   01F0 FB                 1009 	mov	r3,a
   01F1 EA                 1010 	mov	a,r2
   01F2 9C                 1011 	subb	a,r4
   01F3 FC                 1012 	mov	r4,a
   01F4 C3                 1013 	clr	c
   01F5 EB                 1014 	mov	a,r3
   01F6 94 06              1015 	subb	a,#0x06
   01F8 EC                 1016 	mov	a,r4
   01F9 94 00              1017 	subb	a,#0x00
   01FB 50 03              1018 	jnc	00170$
   01FD 02s02r98           1019 	ljmp	00106$
   0200                    1020 00170$:
                           1021 ;	../../core/dev/slip.c:171: && memcmp(&rxbuf[begin], "CLIENT", 6) == 0) {
   0200 8F 03              1022 	mov	ar3,r7
   0202 8E 04              1023 	mov	ar4,r6
   0204 7A 00              1024 	mov	r2,#0x00
   0206 74 06              1025 	mov	a,#0x06
   0208 C0 E0              1026 	push	acc
   020A E4                 1027 	clr	a
   020B C0 E0              1028 	push	acc
   020D 74r00              1029 	mov	a,#__str_0
   020F C0 E0              1030 	push	acc
   0211 74s00              1031 	mov	a,#(__str_0 >> 8)
   0213 C0 E0              1032 	push	acc
   0215 74 80              1033 	mov	a,#0x80
   0217 C0 E0              1034 	push	acc
   0219 8B 82              1035 	mov	dpl,r3
   021B 8C 83              1036 	mov	dph,r4
   021D 8A F0              1037 	mov	b,r2
   021F 12s00r00           1038 	lcall	_memcmp
   0222 AB 82              1039 	mov	r3,dpl
   0224 AC 83              1040 	mov	r4,dph
   0226 E5 81              1041 	mov	a,sp
   0228 24 FB              1042 	add	a,#0xfb
   022A F5 81              1043 	mov	sp,a
   022C EB                 1044 	mov	a,r3
   022D 4C                 1045 	orl	a,r4
   022E 70 68              1046 	jnz	00106$
                           1047 ;	../../core/dev/slip.c:172: state = STATE_TWOPACKETS;	/* Interrupts do nothing. */
   0230 90s00r09           1048 	mov	dptr,#_state
   0233 E4                 1049 	clr	a
   0234 F0                 1050 	movx	@dptr,a
                           1051 ;	../../core/dev/slip.c:173: memset(&rxbuf[begin], 0x0, 6);
   0235 90s00r01           1052 	mov	dptr,#_begin
   0238 E0                 1053 	movx	a,@dptr
   0239 FB                 1054 	mov	r3,a
   023A A3                 1055 	inc	dptr
   023B E0                 1056 	movx	a,@dptr
   023C FC                 1057 	mov	r4,a
   023D EB                 1058 	mov	a,r3
   023E 24r05              1059 	add	a,#_rxbuf
   0240 FB                 1060 	mov	r3,a
   0241 EC                 1061 	mov	a,r4
   0242 34s00              1062 	addc	a,#(_rxbuf >> 8)
   0244 FC                 1063 	mov	r4,a
   0245 7A 00              1064 	mov	r2,#0x00
   0247 74 06              1065 	mov	a,#0x06
   0249 C0 E0              1066 	push	acc
   024B E4                 1067 	clr	a
   024C C0 E0              1068 	push	acc
   024E E4                 1069 	clr	a
   024F C0 E0              1070 	push	acc
   0251 8B 82              1071 	mov	dpl,r3
   0253 8C 83              1072 	mov	dph,r4
   0255 8A F0              1073 	mov	b,r2
   0257 12s00r00           1074 	lcall	_memset
   025A 15 81              1075 	dec	sp
   025C 15 81              1076 	dec	sp
   025E 15 81              1077 	dec	sp
                           1078 ;	../../core/dev/slip.c:175: rxbuf_init();
   0260 12s01r90           1079 	lcall	_rxbuf_init
                           1080 ;	../../core/dev/slip.c:177: for(i = 0; i < 13; i++) {
   0263 7B 00              1081 	mov	r3,#0x00
   0265 7C 00              1082 	mov	r4,#0x00
   0267                    1083 00120$:
   0267 C3                 1084 	clr	c
   0268 EB                 1085 	mov	a,r3
   0269 94 0D              1086 	subb	a,#0x0D
   026B EC                 1087 	mov	a,r4
   026C 64 80              1088 	xrl	a,#0x80
   026E 94 80              1089 	subb	a,#0x80
   0270 50 20              1090 	jnc	00123$
                           1091 ;	../../core/dev/slip.c:178: slip_arch_writeb("CLIENTSERVER\300"[i]);
   0272 EB                 1092 	mov	a,r3
   0273 24r07              1093 	add	a,#__str_1
   0275 F5 82              1094 	mov	dpl,a
   0277 EC                 1095 	mov	a,r4
   0278 34s00              1096 	addc	a,#(__str_1 >> 8)
   027A F5 83              1097 	mov	dph,a
   027C E4                 1098 	clr	a
   027D 93                 1099 	movc	a,@a+dptr
   027E F5 82              1100 	mov	dpl,a
   0280 C0 04              1101 	push	ar4
   0282 C0 03              1102 	push	ar3
   0284 12s00r00           1103 	lcall	_slip_arch_writeb
   0287 D0 03              1104 	pop	ar3
   0289 D0 04              1105 	pop	ar4
                           1106 ;	../../core/dev/slip.c:177: for(i = 0; i < 13; i++) {
   028B 0B                 1107 	inc	r3
   028C BB 00 D8           1108 	cjne	r3,#0x00,00120$
   028F 0C                 1109 	inc	r4
   0290 80 D5              1110 	sjmp	00120$
   0292                    1111 00123$:
                           1112 ;	../../core/dev/slip.c:180: return 0;
   0292 90 00 00           1113 	mov	dptr,#0x0000
   0295 02s04r2B           1114 	ljmp	00132$
   0298                    1115 00106$:
                           1116 ;	../../core/dev/slip.c:214: if(begin != pkt_end) {
   0298 90s00r01           1117 	mov	dptr,#_begin
   029B E0                 1118 	movx	a,@dptr
   029C FB                 1119 	mov	r3,a
   029D A3                 1120 	inc	dptr
   029E E0                 1121 	movx	a,@dptr
   029F FC                 1122 	mov	r4,a
   02A0 90s00r73           1123 	mov	dptr,#_pkt_end
   02A3 E5*00              1124 	mov	a,_bp
   02A5 24 06              1125 	add	a,#0x06
   02A7 F8                 1126 	mov	r0,a
   02A8 E0                 1127 	movx	a,@dptr
   02A9 F6                 1128 	mov	@r0,a
   02AA A3                 1129 	inc	dptr
   02AB E0                 1130 	movx	a,@dptr
   02AC 08                 1131 	inc	r0
   02AD F6                 1132 	mov	@r0,a
   02AE E5*00              1133 	mov	a,_bp
   02B0 24 06              1134 	add	a,#0x06
   02B2 F8                 1135 	mov	r0,a
   02B3 E6                 1136 	mov	a,@r0
   02B4 B5 03 08           1137 	cjne	a,ar3,00174$
   02B7 08                 1138 	inc	r0
   02B8 E6                 1139 	mov	a,@r0
   02B9 B5 04 03           1140 	cjne	a,ar4,00174$
   02BC 02s04r28           1141 	ljmp	00119$
   02BF                    1142 00174$:
                           1143 ;	../../core/dev/slip.c:217: if(begin < pkt_end) {
   02BF E5*00              1144 	mov	a,_bp
   02C1 24 06              1145 	add	a,#0x06
   02C3 F8                 1146 	mov	r0,a
   02C4 C3                 1147 	clr	c
   02C5 EB                 1148 	mov	a,r3
   02C6 96                 1149 	subb	a,@r0
   02C7 EC                 1150 	mov	a,r4
   02C8 08                 1151 	inc	r0
   02C9 96                 1152 	subb	a,@r0
   02CA 50 6F              1153 	jnc	00114$
                           1154 ;	../../core/dev/slip.c:218: len = pkt_end - begin;
   02CC E5*00              1155 	mov	a,_bp
   02CE 24 06              1156 	add	a,#0x06
   02D0 F8                 1157 	mov	r0,a
   02D1 E6                 1158 	mov	a,@r0
   02D2 C3                 1159 	clr	c
   02D3 9B                 1160 	subb	a,r3
   02D4 FF                 1161 	mov	r7,a
   02D5 08                 1162 	inc	r0
   02D6 E6                 1163 	mov	a,@r0
   02D7 9C                 1164 	subb	a,r4
   02D8 FE                 1165 	mov	r6,a
   02D9 E5*00              1166 	mov	a,_bp
   02DB 24 04              1167 	add	a,#0x04
   02DD F8                 1168 	mov	r0,a
   02DE A6 07              1169 	mov	@r0,ar7
   02E0 08                 1170 	inc	r0
   02E1 A6 06              1171 	mov	@r0,ar6
                           1172 ;	../../core/dev/slip.c:219: if(len > blen) {
   02E3 E5*00              1173 	mov	a,_bp
   02E5 24 04              1174 	add	a,#0x04
   02E7 F8                 1175 	mov	r0,a
   02E8 E5*00              1176 	mov	a,_bp
   02EA 24 FC              1177 	add	a,#0xfc
   02EC F9                 1178 	mov	r1,a
   02ED C3                 1179 	clr	c
   02EE E7                 1180 	mov	a,@r1
   02EF 96                 1181 	subb	a,@r0
   02F0 09                 1182 	inc	r1
   02F1 E7                 1183 	mov	a,@r1
   02F2 08                 1184 	inc	r0
   02F3 96                 1185 	subb	a,@r0
   02F4 50 0C              1186 	jnc	00108$
                           1187 ;	../../core/dev/slip.c:220: len = 0;
   02F6 E5*00              1188 	mov	a,_bp
   02F8 24 04              1189 	add	a,#0x04
   02FA F8                 1190 	mov	r0,a
   02FB E4                 1191 	clr	a
   02FC F6                 1192 	mov	@r0,a
   02FD 08                 1193 	inc	r0
   02FE F6                 1194 	mov	@r0,a
   02FF 02s03rE6           1195 	ljmp	00115$
   0302                    1196 00108$:
                           1197 ;	../../core/dev/slip.c:222: memcpy(outbuf, &rxbuf[begin], len);
   0302 EB                 1198 	mov	a,r3
   0303 24r05              1199 	add	a,#_rxbuf
   0305 FD                 1200 	mov	r5,a
   0306 EC                 1201 	mov	a,r4
   0307 34s00              1202 	addc	a,#(_rxbuf >> 8)
   0309 FC                 1203 	mov	r4,a
   030A 7B 00              1204 	mov	r3,#0x00
   030C A8*00              1205 	mov	r0,_bp
   030E 08                 1206 	inc	r0
   030F 86 02              1207 	mov	ar2,@r0
   0311 08                 1208 	inc	r0
   0312 86 06              1209 	mov	ar6,@r0
   0314 08                 1210 	inc	r0
   0315 86 07              1211 	mov	ar7,@r0
   0317 E5*00              1212 	mov	a,_bp
   0319 24 04              1213 	add	a,#0x04
   031B F8                 1214 	mov	r0,a
   031C E6                 1215 	mov	a,@r0
   031D C0 E0              1216 	push	acc
   031F 08                 1217 	inc	r0
   0320 E6                 1218 	mov	a,@r0
   0321 C0 E0              1219 	push	acc
   0323 C0 05              1220 	push	ar5
   0325 C0 04              1221 	push	ar4
   0327 C0 03              1222 	push	ar3
   0329 8A 82              1223 	mov	dpl,r2
   032B 8E 83              1224 	mov	dph,r6
   032D 8F F0              1225 	mov	b,r7
   032F 12s00r00           1226 	lcall	_memcpy
   0332 E5 81              1227 	mov	a,sp
   0334 24 FB              1228 	add	a,#0xfb
   0336 F5 81              1229 	mov	sp,a
   0338 02s03rE6           1230 	ljmp	00115$
   033B                    1231 00114$:
                           1232 ;	../../core/dev/slip.c:225: len = (RX_BUFSIZE - begin) + (pkt_end - 0);
   033B 74 6E              1233 	mov	a,#0x6E
   033D C3                 1234 	clr	c
   033E 9B                 1235 	subb	a,r3
   033F FE                 1236 	mov	r6,a
   0340 E4                 1237 	clr	a
   0341 9C                 1238 	subb	a,r4
   0342 FF                 1239 	mov	r7,a
   0343 E5*00              1240 	mov	a,_bp
   0345 24 06              1241 	add	a,#0x06
   0347 F8                 1242 	mov	r0,a
   0348 E6                 1243 	mov	a,@r0
   0349 2E                 1244 	add	a,r6
   034A FE                 1245 	mov	r6,a
   034B 08                 1246 	inc	r0
   034C E6                 1247 	mov	a,@r0
   034D 3F                 1248 	addc	a,r7
   034E FF                 1249 	mov	r7,a
   034F E5*00              1250 	mov	a,_bp
   0351 24 04              1251 	add	a,#0x04
   0353 F8                 1252 	mov	r0,a
   0354 A6 06              1253 	mov	@r0,ar6
   0356 08                 1254 	inc	r0
   0357 A6 07              1255 	mov	@r0,ar7
                           1256 ;	../../core/dev/slip.c:226: if(len > blen) {
   0359 E5*00              1257 	mov	a,_bp
   035B 24 04              1258 	add	a,#0x04
   035D F8                 1259 	mov	r0,a
   035E E5*00              1260 	mov	a,_bp
   0360 24 FC              1261 	add	a,#0xfc
   0362 F9                 1262 	mov	r1,a
   0363 C3                 1263 	clr	c
   0364 E7                 1264 	mov	a,@r1
   0365 96                 1265 	subb	a,@r0
   0366 09                 1266 	inc	r1
   0367 E7                 1267 	mov	a,@r1
   0368 08                 1268 	inc	r0
   0369 96                 1269 	subb	a,@r0
   036A 50 0B              1270 	jnc	00111$
                           1271 ;	../../core/dev/slip.c:227: len = 0;
   036C E5*00              1272 	mov	a,_bp
   036E 24 04              1273 	add	a,#0x04
   0370 F8                 1274 	mov	r0,a
   0371 E4                 1275 	clr	a
   0372 F6                 1276 	mov	@r0,a
   0373 08                 1277 	inc	r0
   0374 F6                 1278 	mov	@r0,a
   0375 80 6F              1279 	sjmp	00115$
   0377                    1280 00111$:
                           1281 ;	../../core/dev/slip.c:230: for(i = begin; i < RX_BUFSIZE; i++) {
   0377 8B 06              1282 	mov	ar6,r3
   0379 8C 07              1283 	mov	ar7,r4
   037B A8*00              1284 	mov	r0,_bp
   037D 08                 1285 	inc	r0
   037E 86 03              1286 	mov	ar3,@r0
   0380 08                 1287 	inc	r0
   0381 86 04              1288 	mov	ar4,@r0
   0383 08                 1289 	inc	r0
   0384 86 05              1290 	mov	ar5,@r0
   0386                    1291 00124$:
   0386 C3                 1292 	clr	c
   0387 EE                 1293 	mov	a,r6
   0388 94 6E              1294 	subb	a,#0x6E
   038A EF                 1295 	mov	a,r7
   038B 94 00              1296 	subb	a,#0x00
   038D 50 21              1297 	jnc	00127$
                           1298 ;	../../core/dev/slip.c:231: *outbuf++ = rxbuf[i];
   038F EE                 1299 	mov	a,r6
   0390 24r05              1300 	add	a,#_rxbuf
   0392 F5 82              1301 	mov	dpl,a
   0394 EF                 1302 	mov	a,r7
   0395 34s00              1303 	addc	a,#(_rxbuf >> 8)
   0397 F5 83              1304 	mov	dph,a
   0399 E0                 1305 	movx	a,@dptr
   039A FA                 1306 	mov	r2,a
   039B 8B 82              1307 	mov	dpl,r3
   039D 8C 83              1308 	mov	dph,r4
   039F 8D F0              1309 	mov	b,r5
   03A1 12s00r00           1310 	lcall	__gptrput
   03A4 A3                 1311 	inc	dptr
   03A5 AB 82              1312 	mov	r3,dpl
   03A7 AC 83              1313 	mov	r4,dph
                           1314 ;	../../core/dev/slip.c:230: for(i = begin; i < RX_BUFSIZE; i++) {
   03A9 0E                 1315 	inc	r6
   03AA BE 00 D9           1316 	cjne	r6,#0x00,00124$
   03AD 0F                 1317 	inc	r7
   03AE 80 D6              1318 	sjmp	00124$
   03B0                    1319 00127$:
                           1320 ;	../../core/dev/slip.c:233: for(i = 0; i < pkt_end; i++) {
   03B0 8B 07              1321 	mov	ar7,r3
   03B2 8C 06              1322 	mov	ar6,r4
   03B4 7B 00              1323 	mov	r3,#0x00
   03B6 7C 00              1324 	mov	r4,#0x00
   03B8                    1325 00128$:
   03B8 E5*00              1326 	mov	a,_bp
   03BA 24 06              1327 	add	a,#0x06
   03BC F8                 1328 	mov	r0,a
   03BD C3                 1329 	clr	c
   03BE EB                 1330 	mov	a,r3
   03BF 96                 1331 	subb	a,@r0
   03C0 EC                 1332 	mov	a,r4
   03C1 08                 1333 	inc	r0
   03C2 96                 1334 	subb	a,@r0
   03C3 50 21              1335 	jnc	00115$
                           1336 ;	../../core/dev/slip.c:234: *outbuf++ = rxbuf[i];
   03C5 EB                 1337 	mov	a,r3
   03C6 24r05              1338 	add	a,#_rxbuf
   03C8 F5 82              1339 	mov	dpl,a
   03CA EC                 1340 	mov	a,r4
   03CB 34s00              1341 	addc	a,#(_rxbuf >> 8)
   03CD F5 83              1342 	mov	dph,a
   03CF E0                 1343 	movx	a,@dptr
   03D0 FA                 1344 	mov	r2,a
   03D1 8F 82              1345 	mov	dpl,r7
   03D3 8E 83              1346 	mov	dph,r6
   03D5 8D F0              1347 	mov	b,r5
   03D7 12s00r00           1348 	lcall	__gptrput
   03DA A3                 1349 	inc	dptr
   03DB AF 82              1350 	mov	r7,dpl
   03DD AE 83              1351 	mov	r6,dph
                           1352 ;	../../core/dev/slip.c:233: for(i = 0; i < pkt_end; i++) {
   03DF 0B                 1353 	inc	r3
   03E0 BB 00 D5           1354 	cjne	r3,#0x00,00128$
   03E3 0C                 1355 	inc	r4
   03E4 80 D2              1356 	sjmp	00128$
   03E6                    1357 00115$:
                           1358 ;	../../core/dev/slip.c:240: begin = pkt_end;
   03E6 90s00r73           1359 	mov	dptr,#_pkt_end
   03E9 E0                 1360 	movx	a,@dptr
   03EA FE                 1361 	mov	r6,a
   03EB A3                 1362 	inc	dptr
   03EC E0                 1363 	movx	a,@dptr
   03ED FF                 1364 	mov	r7,a
   03EE 90s00r01           1365 	mov	dptr,#_begin
   03F1 EE                 1366 	mov	a,r6
   03F2 F0                 1367 	movx	@dptr,a
   03F3 A3                 1368 	inc	dptr
   03F4 EF                 1369 	mov	a,r7
   03F5 F0                 1370 	movx	@dptr,a
                           1371 ;	../../core/dev/slip.c:241: if(state == STATE_TWOPACKETS) {
   03F6 90s00r09           1372 	mov	dptr,#_state
   03F9 E0                 1373 	movx	a,@dptr
   03FA FF                 1374 	mov	r7,a
   03FB 70 1F              1375 	jnz	00117$
                           1376 ;	../../core/dev/slip.c:242: pkt_end = end;
   03FD 90s00r03           1377 	mov	dptr,#_end
   0400 E0                 1378 	movx	a,@dptr
   0401 FE                 1379 	mov	r6,a
   0402 A3                 1380 	inc	dptr
   0403 E0                 1381 	movx	a,@dptr
   0404 FF                 1382 	mov	r7,a
   0405 90s00r73           1383 	mov	dptr,#_pkt_end
   0408 EE                 1384 	mov	a,r6
   0409 F0                 1385 	movx	@dptr,a
   040A A3                 1386 	inc	dptr
   040B EF                 1387 	mov	a,r7
   040C F0                 1388 	movx	@dptr,a
                           1389 ;	../../core/dev/slip.c:243: state = STATE_OK;		/* Assume no bytes where lost! */
   040D 90s00r09           1390 	mov	dptr,#_state
   0410 74 01              1391 	mov	a,#0x01
   0412 F0                 1392 	movx	@dptr,a
                           1393 ;	../../core/dev/slip.c:246: process_poll(&slip_process);
   0413 90s00r00           1394 	mov	dptr,#_slip_process
   0416 75 F0 00           1395 	mov	b,#0x00
   0419 12s00r00           1396 	lcall	_process_poll
   041C                    1397 00117$:
                           1398 ;	../../core/dev/slip.c:248: return len;
   041C E5*00              1399 	mov	a,_bp
   041E 24 04              1400 	add	a,#0x04
   0420 F8                 1401 	mov	r0,a
   0421 86 82              1402 	mov	dpl,@r0
   0423 08                 1403 	inc	r0
   0424 86 83              1404 	mov	dph,@r0
   0426 80 03              1405 	sjmp	00132$
   0428                    1406 00119$:
                           1407 ;	../../core/dev/slip.c:251: return 0;
   0428 90 00 00           1408 	mov	dptr,#0x0000
   042B                    1409 00132$:
   042B 85*00 81           1410 	mov	sp,_bp
   042E D0*00              1411 	pop	_bp
   0430 22                 1412 	ret
                           1413 ;------------------------------------------------------------
                           1414 ;Allocation info for local variables in function 'process_thread_slip_process'
                           1415 ;------------------------------------------------------------
                           1416 ;ev                        Allocated to stack - _bp -3
                           1417 ;data                      Allocated to stack - _bp -6
                           1418 ;process_pt                Allocated to registers r5 r6 r7 
                           1419 ;PT_YIELD_FLAG             Allocated to registers r4 
                           1420 ;buf                       Allocated to stack - _bp +1
                           1421 ;nid                       Allocated to registers r3 r4 
                           1422 ;ip_id                     Allocated with name '_process_thread_slip_process_ip_id_6_11'
                           1423 ;------------------------------------------------------------
                           1424 ;	../../core/dev/slip.c:254: PROCESS_THREAD(slip_process, ev, data)
                           1425 ;	-----------------------------------------
                           1426 ;	 function process_thread_slip_process
                           1427 ;	-----------------------------------------
   0431                    1428 _process_thread_slip_process:
   0431 C0*00              1429 	push	_bp
   0433 E5 81              1430 	mov	a,sp
   0435 F5*00              1431 	mov	_bp,a
   0437 24 08              1432 	add	a,#0x08
   0439 F5 81              1433 	mov	sp,a
                           1434 ;	../../core/dev/slip.c:256: PROCESS_BEGIN();
   043B AD 82              1435 	mov	r5,dpl
   043D AE 83              1436 	mov	r6,dph
   043F AF F0              1437 	mov	r7,b
   0441 7C 01              1438 	mov	r4,#0x01
   0443 12s00r00           1439 	lcall	__gptrget
   0446 FA                 1440 	mov	r2,a
   0447 A3                 1441 	inc	dptr
   0448 12s00r00           1442 	lcall	__gptrget
   044B FB                 1443 	mov	r3,a
   044C BA 00 05           1444 	cjne	r2,#0x00,00160$
   044F BB 00 02           1445 	cjne	r3,#0x00,00160$
   0452 80 0B              1446 	sjmp	00101$
   0454                    1447 00160$:
   0454 BA 05 05           1448 	cjne	r2,#0x05,00161$
   0457 BB 01 02           1449 	cjne	r3,#0x01,00161$
   045A 80 25              1450 	sjmp	00102$
   045C                    1451 00161$:
   045C 02s07r78           1452 	ljmp	00129$
   045F                    1453 00101$:
                           1454 ;	../../core/dev/slip.c:258: rxbuf_init();
   045F C0 07              1455 	push	ar7
   0461 C0 06              1456 	push	ar6
   0463 C0 05              1457 	push	ar5
   0465 12s01r90           1458 	lcall	_rxbuf_init
   0468 D0 05              1459 	pop	ar5
   046A D0 06              1460 	pop	ar6
   046C D0 07              1461 	pop	ar7
                           1462 ;	../../core/dev/slip.c:260: while(1) {
   046E                    1463 00127$:
                           1464 ;	../../core/dev/slip.c:261: PROCESS_YIELD_UNTIL(ev == PROCESS_EVENT_POLL);
   046E 7C 00              1465 	mov	r4,#0x00
   0470 8D 82              1466 	mov	dpl,r5
   0472 8E 83              1467 	mov	dph,r6
   0474 8F F0              1468 	mov	b,r7
   0476 74 05              1469 	mov	a,#0x05
   0478 12s00r00           1470 	lcall	__gptrput
   047B A3                 1471 	inc	dptr
   047C 74 01              1472 	mov	a,#0x01
   047E 12s00r00           1473 	lcall	__gptrput
   0481                    1474 00102$:
   0481 EC                 1475 	mov	a,r4
   0482 60 0A              1476 	jz	00103$
   0484 E5*00              1477 	mov	a,_bp
   0486 24 FD              1478 	add	a,#0xfd
   0488 F8                 1479 	mov	r0,a
   0489 B6 82 02           1480 	cjne	@r0,#0x82,00163$
   048C 80 06              1481 	sjmp	00107$
   048E                    1482 00163$:
   048E                    1483 00103$:
   048E 75 82 01           1484 	mov	dpl,#0x01
   0491 02s07r8A           1485 	ljmp	00130$
   0494                    1486 00107$:
                           1487 ;	../../core/dev/slip.c:263: slip_active = 1;
   0494 90s00r00           1488 	mov	dptr,#_slip_active
   0497 74 01              1489 	mov	a,#0x01
   0499 F0                 1490 	movx	@dptr,a
                           1491 ;	../../core/dev/slip.c:266: uip_len = slip_poll_handler(&uip_buf[UIP_LLH_LEN],
   049A C0 07              1492 	push	ar7
   049C C0 06              1493 	push	ar6
   049E C0 05              1494 	push	ar5
   04A0 74 5E              1495 	mov	a,#0x5E
   04A2 C0 E0              1496 	push	acc
   04A4 E4                 1497 	clr	a
   04A5 C0 E0              1498 	push	acc
   04A7 90s00r0E           1499 	mov	dptr,#(_uip_aligned_buf + 0x000e)
   04AA 75 F0 00           1500 	mov	b,#0x00
   04AD 12s01rAC           1501 	lcall	_slip_poll_handler
   04B0 AB 82              1502 	mov	r3,dpl
   04B2 AC 83              1503 	mov	r4,dph
   04B4 15 81              1504 	dec	sp
   04B6 15 81              1505 	dec	sp
   04B8 D0 05              1506 	pop	ar5
   04BA D0 06              1507 	pop	ar6
   04BC D0 07              1508 	pop	ar7
   04BE 90s00r00           1509 	mov	dptr,#_uip_len
   04C1 EB                 1510 	mov	a,r3
   04C2 F0                 1511 	movx	@dptr,a
   04C3 A3                 1512 	inc	dptr
   04C4 EC                 1513 	mov	a,r4
   04C5 F0                 1514 	movx	@dptr,a
                           1515 ;	../../core/dev/slip.c:269: if(uip_len == 4 && strncmp((char*)&uip_buf[UIP_LLH_LEN], "?IPA", 4) == 0) {
   04C6 BB 04 05           1516 	cjne	r3,#0x04,00164$
   04C9 BC 00 02           1517 	cjne	r4,#0x00,00164$
   04CC 80 03              1518 	sjmp	00165$
   04CE                    1519 00164$:
   04CE 02s05rDF           1520 	ljmp	00123$
   04D1                    1521 00165$:
   04D1 7Br0E              1522 	mov	r3,#(_uip_aligned_buf + 0x000e)
   04D3 7Cs00              1523 	mov	r4,#((_uip_aligned_buf + 0x000e) >> 8)
   04D5 7A 00              1524 	mov	r2,#0x00
   04D7 C0 07              1525 	push	ar7
   04D9 C0 06              1526 	push	ar6
   04DB C0 05              1527 	push	ar5
   04DD 74 04              1528 	mov	a,#0x04
   04DF C0 E0              1529 	push	acc
   04E1 E4                 1530 	clr	a
   04E2 C0 E0              1531 	push	acc
   04E4 74r15              1532 	mov	a,#__str_2
   04E6 C0 E0              1533 	push	acc
   04E8 74s00              1534 	mov	a,#(__str_2 >> 8)
   04EA C0 E0              1535 	push	acc
   04EC 74 80              1536 	mov	a,#0x80
   04EE C0 E0              1537 	push	acc
   04F0 8B 82              1538 	mov	dpl,r3
   04F2 8C 83              1539 	mov	dph,r4
   04F4 8A F0              1540 	mov	b,r2
   04F6 12s00r00           1541 	lcall	_strncmp
   04F9 AB 82              1542 	mov	r3,dpl
   04FB AC 83              1543 	mov	r4,dph
   04FD E5 81              1544 	mov	a,sp
   04FF 24 FB              1545 	add	a,#0xfb
   0501 F5 81              1546 	mov	sp,a
   0503 D0 05              1547 	pop	ar5
   0505 D0 06              1548 	pop	ar6
   0507 D0 07              1549 	pop	ar7
   0509 EB                 1550 	mov	a,r3
   050A 4C                 1551 	orl	a,r4
   050B 60 03              1552 	jz	00166$
   050D 02s05rDF           1553 	ljmp	00123$
   0510                    1554 00166$:
                           1555 ;	../../core/dev/slip.c:271: memcpy(&buf[0], "=IPA", 4);
   0510 C0 05              1556 	push	ar5
   0512 C0 06              1557 	push	ar6
   0514 C0 07              1558 	push	ar7
   0516 AC*00              1559 	mov	r4,_bp
   0518 0C                 1560 	inc	r4
   0519 8C 02              1561 	mov	ar2,r4
   051B 7B 00              1562 	mov	r3,#0x00
   051D 7F 40              1563 	mov	r7,#0x40
   051F C0 07              1564 	push	ar7
   0521 C0 06              1565 	push	ar6
   0523 C0 05              1566 	push	ar5
   0525 C0 04              1567 	push	ar4
   0527 74 04              1568 	mov	a,#0x04
   0529 C0 E0              1569 	push	acc
   052B E4                 1570 	clr	a
   052C C0 E0              1571 	push	acc
   052E 74r1A              1572 	mov	a,#__str_3
   0530 C0 E0              1573 	push	acc
   0532 74s00              1574 	mov	a,#(__str_3 >> 8)
   0534 C0 E0              1575 	push	acc
   0536 74 80              1576 	mov	a,#0x80
   0538 C0 E0              1577 	push	acc
   053A 8A 82              1578 	mov	dpl,r2
   053C 8B 83              1579 	mov	dph,r3
   053E 8F F0              1580 	mov	b,r7
   0540 12s00r00           1581 	lcall	_memcpy
   0543 E5 81              1582 	mov	a,sp
   0545 24 FB              1583 	add	a,#0xfb
   0547 F5 81              1584 	mov	sp,a
   0549 D0 04              1585 	pop	ar4
   054B D0 05              1586 	pop	ar5
   054D D0 06              1587 	pop	ar6
   054F D0 07              1588 	pop	ar7
                           1589 ;	../../core/dev/slip.c:272: memcpy(&buf[4], &uip_hostaddr, 4);
   0551 74 04              1590 	mov	a,#0x04
   0553 2C                 1591 	add	a,r4
   0554 FF                 1592 	mov	r7,a
   0555 7E 00              1593 	mov	r6,#0x00
   0557 7D 40              1594 	mov	r5,#0x40
   0559 C0 07              1595 	push	ar7
   055B C0 06              1596 	push	ar6
   055D C0 05              1597 	push	ar5
   055F C0 04              1598 	push	ar4
   0561 74 04              1599 	mov	a,#0x04
   0563 C0 E0              1600 	push	acc
   0565 E4                 1601 	clr	a
   0566 C0 E0              1602 	push	acc
   0568 74r00              1603 	mov	a,#_uip_hostaddr
   056A C0 E0              1604 	push	acc
   056C 74s00              1605 	mov	a,#(_uip_hostaddr >> 8)
   056E C0 E0              1606 	push	acc
   0570 E4                 1607 	clr	a
   0571 C0 E0              1608 	push	acc
   0573 8F 82              1609 	mov	dpl,r7
   0575 8E 83              1610 	mov	dph,r6
   0577 8D F0              1611 	mov	b,r5
   0579 12s00r00           1612 	lcall	_memcpy
   057C E5 81              1613 	mov	a,sp
   057E 24 FB              1614 	add	a,#0xfb
   0580 F5 81              1615 	mov	sp,a
   0582 D0 04              1616 	pop	ar4
   0584 D0 05              1617 	pop	ar5
   0586 D0 06              1618 	pop	ar6
   0588 D0 07              1619 	pop	ar7
                           1620 ;	../../core/dev/slip.c:273: if(input_callback) {
   058A 90s00r0A           1621 	mov	dptr,#_input_callback
   058D E0                 1622 	movx	a,@dptr
   058E FE                 1623 	mov	r6,a
   058F A3                 1624 	inc	dptr
   0590 E0                 1625 	movx	a,@dptr
   0591 4E                 1626 	orl	a,r6
   0592 D0 07              1627 	pop	ar7
   0594 D0 06              1628 	pop	ar6
   0596 D0 05              1629 	pop	ar5
   0598 60 1E              1630 	jz	00110$
                           1631 ;	../../core/dev/slip.c:274: input_callback();
   059A C0 07              1632 	push	ar7
   059C C0 06              1633 	push	ar6
   059E C0 05              1634 	push	ar5
   05A0 C0 04              1635 	push	ar4
   05A2 90s00r0A           1636 	mov	dptr,#_input_callback
   05A5 E0                 1637 	movx	a,@dptr
   05A6 F8                 1638 	mov	r0,a
   05A7 A3                 1639 	inc	dptr
   05A8 E0                 1640 	movx	a,@dptr
   05A9 F5 83              1641 	mov	dph,a
   05AB 88 82              1642 	mov	dpl,r0
   05AD 12s00r00           1643 	lcall	__sdcc_call_dptr
   05B0 D0 04              1644 	pop	ar4
   05B2 D0 05              1645 	pop	ar5
   05B4 D0 06              1646 	pop	ar6
   05B6 D0 07              1647 	pop	ar7
   05B8                    1648 00110$:
                           1649 ;	../../core/dev/slip.c:276: slip_write(buf, 8);
   05B8 7B 00              1650 	mov	r3,#0x00
   05BA 7A 40              1651 	mov	r2,#0x40
   05BC C0 07              1652 	push	ar7
   05BE C0 06              1653 	push	ar6
   05C0 C0 05              1654 	push	ar5
   05C2 74 08              1655 	mov	a,#0x08
   05C4 C0 E0              1656 	push	acc
   05C6 E4                 1657 	clr	a
   05C7 C0 E0              1658 	push	acc
   05C9 8C 82              1659 	mov	dpl,r4
   05CB 8B 83              1660 	mov	dph,r3
   05CD 8A F0              1661 	mov	b,r2
   05CF 12s00rD0           1662 	lcall	_slip_write
   05D2 15 81              1663 	dec	sp
   05D4 15 81              1664 	dec	sp
   05D6 D0 05              1665 	pop	ar5
   05D8 D0 06              1666 	pop	ar6
   05DA D0 07              1667 	pop	ar7
   05DC 02s04r6E           1668 	ljmp	00127$
   05DF                    1669 00123$:
                           1670 ;	../../core/dev/slip.c:277: } else if(uip_len > 0
   05DF 90s00r00           1671 	mov	dptr,#_uip_len
   05E2 E0                 1672 	movx	a,@dptr
   05E3 FB                 1673 	mov	r3,a
   05E4 A3                 1674 	inc	dptr
   05E5 E0                 1675 	movx	a,@dptr
   05E6 FC                 1676 	mov	r4,a
   05E7 4B                 1677 	orl	a,r3
   05E8 70 03              1678 	jnz	00169$
   05EA 02s07r6E           1679 	ljmp	00118$
   05ED                    1680 00169$:
                           1681 ;	../../core/dev/slip.c:278: && uip_len == (((uint16_t)(BUF->len[0]) << 8) + BUF->len[1])
   05ED C0 05              1682 	push	ar5
   05EF C0 06              1683 	push	ar6
   05F1 C0 07              1684 	push	ar7
   05F3 7Ar0E              1685 	mov	r2,#(_uip_aligned_buf + 0x000e)
   05F5 7Fs00              1686 	mov	r7,#((_uip_aligned_buf + 0x000e) >> 8)
   05F7 8A 82              1687 	mov	dpl,r2
   05F9 8F 83              1688 	mov	dph,r7
   05FB A3                 1689 	inc	dptr
   05FC A3                 1690 	inc	dptr
   05FD E0                 1691 	movx	a,@dptr
   05FE FE                 1692 	mov	r6,a
   05FF 7F 00              1693 	mov	r7,#0x00
   0601 7Ar0E              1694 	mov	r2,#(_uip_aligned_buf + 0x000e)
   0603 7Ds00              1695 	mov	r5,#((_uip_aligned_buf + 0x000e) >> 8)
   0605 8A 82              1696 	mov	dpl,r2
   0607 8D 83              1697 	mov	dph,r5
   0609 A3                 1698 	inc	dptr
   060A A3                 1699 	inc	dptr
   060B A3                 1700 	inc	dptr
   060C E0                 1701 	movx	a,@dptr
   060D FD                 1702 	mov	r5,a
   060E 7A 00              1703 	mov	r2,#0x00
   0610 2F                 1704 	add	a,r7
   0611 FF                 1705 	mov	r7,a
   0612 EA                 1706 	mov	a,r2
   0613 3E                 1707 	addc	a,r6
   0614 FE                 1708 	mov	r6,a
   0615 EB                 1709 	mov	a,r3
   0616 B5 07 06           1710 	cjne	a,ar7,00170$
   0619 EC                 1711 	mov	a,r4
   061A B5 06 02           1712 	cjne	a,ar6,00170$
   061D 80 09              1713 	sjmp	00171$
   061F                    1714 00170$:
   061F D0 07              1715 	pop	ar7
   0621 D0 06              1716 	pop	ar6
   0623 D0 05              1717 	pop	ar5
   0625 02s07r6E           1718 	ljmp	00118$
   0628                    1719 00171$:
   0628 D0 07              1720 	pop	ar7
   062A D0 06              1721 	pop	ar6
   062C D0 05              1722 	pop	ar5
                           1723 ;	../../core/dev/slip.c:279: && uip_ipchksum() == 0xffff) {
   062E C0 07              1724 	push	ar7
   0630 C0 06              1725 	push	ar6
   0632 C0 05              1726 	push	ar5
   0634 12s00r00           1727 	lcall	_uip_ipchksum
   0637 AB 82              1728 	mov	r3,dpl
   0639 AC 83              1729 	mov	r4,dph
   063B D0 05              1730 	pop	ar5
   063D D0 06              1731 	pop	ar6
   063F D0 07              1732 	pop	ar7
   0641 BB FF 05           1733 	cjne	r3,#0xFF,00172$
   0644 BC FF 02           1734 	cjne	r4,#0xFF,00172$
   0647 80 03              1735 	sjmp	00173$
   0649                    1736 00172$:
   0649 02s07r6E           1737 	ljmp	00118$
   064C                    1738 00173$:
                           1739 ;	../../core/dev/slip.c:281: if(BUF->ipid[0] == 0 && BUF->ipid[1] == 0 && BUF->ipoffset[0] & IP_DF) {
   064C 7Br0E              1740 	mov	r3,#(_uip_aligned_buf + 0x000e)
   064E 7Cs00              1741 	mov	r4,#((_uip_aligned_buf + 0x000e) >> 8)
   0650 74 04              1742 	mov	a,#0x04
   0652 2B                 1743 	add	a,r3
   0653 FB                 1744 	mov	r3,a
   0654 E4                 1745 	clr	a
   0655 3C                 1746 	addc	a,r4
   0656 FC                 1747 	mov	r4,a
   0657 8B 82              1748 	mov	dpl,r3
   0659 8C 83              1749 	mov	dph,r4
   065B E0                 1750 	movx	a,@dptr
   065C 60 03              1751 	jz	00174$
   065E 02s07r5C           1752 	ljmp	00114$
   0661                    1753 00174$:
   0661 7Br0E              1754 	mov	r3,#(_uip_aligned_buf + 0x000e)
   0663 7Cs00              1755 	mov	r4,#((_uip_aligned_buf + 0x000e) >> 8)
   0665 74 05              1756 	mov	a,#0x05
   0667 2B                 1757 	add	a,r3
   0668 FB                 1758 	mov	r3,a
   0669 E4                 1759 	clr	a
   066A 3C                 1760 	addc	a,r4
   066B FC                 1761 	mov	r4,a
   066C 8B 82              1762 	mov	dpl,r3
   066E 8C 83              1763 	mov	dph,r4
   0670 E0                 1764 	movx	a,@dptr
   0671 60 03              1765 	jz	00175$
   0673 02s07r5C           1766 	ljmp	00114$
   0676                    1767 00175$:
   0676 7Br0E              1768 	mov	r3,#(_uip_aligned_buf + 0x000e)
   0678 7Cs00              1769 	mov	r4,#((_uip_aligned_buf + 0x000e) >> 8)
   067A 74 06              1770 	mov	a,#0x06
   067C 2B                 1771 	add	a,r3
   067D F5 82              1772 	mov	dpl,a
   067F E4                 1773 	clr	a
   0680 3C                 1774 	addc	a,r4
   0681 F5 83              1775 	mov	dph,a
   0683 E0                 1776 	movx	a,@dptr
   0684 FC                 1777 	mov	r4,a
   0685 20 E6 03           1778 	jb	acc.6,00176$
   0688 02s07r5C           1779 	ljmp	00114$
   068B                    1780 00176$:
                           1781 ;	../../core/dev/slip.c:283: uint16_t nid = ip_id++;
   068B C0 05              1782 	push	ar5
   068D C0 06              1783 	push	ar6
   068F C0 07              1784 	push	ar7
   0691 90s00r75           1785 	mov	dptr,#_process_thread_slip_process_ip_id_6_11
   0694 E0                 1786 	movx	a,@dptr
   0695 FB                 1787 	mov	r3,a
   0696 A3                 1788 	inc	dptr
   0697 E0                 1789 	movx	a,@dptr
   0698 FC                 1790 	mov	r4,a
   0699 90s00r75           1791 	mov	dptr,#_process_thread_slip_process_ip_id_6_11
   069C 74 01              1792 	mov	a,#0x01
   069E 2B                 1793 	add	a,r3
   069F F0                 1794 	movx	@dptr,a
   06A0 E4                 1795 	clr	a
   06A1 3C                 1796 	addc	a,r4
   06A2 A3                 1797 	inc	dptr
   06A3 F0                 1798 	movx	@dptr,a
                           1799 ;	../../core/dev/slip.c:284: BUF->ipid[0] = nid >> 8;
   06A4 7Ar0E              1800 	mov	r2,#(_uip_aligned_buf + 0x000e)
   06A6 7Fs00              1801 	mov	r7,#((_uip_aligned_buf + 0x000e) >> 8)
   06A8 74 04              1802 	mov	a,#0x04
   06AA 2A                 1803 	add	a,r2
   06AB FA                 1804 	mov	r2,a
   06AC E4                 1805 	clr	a
   06AD 3F                 1806 	addc	a,r7
   06AE FF                 1807 	mov	r7,a
   06AF 8C 06              1808 	mov	ar6,r4
   06B1 8A 82              1809 	mov	dpl,r2
   06B3 8F 83              1810 	mov	dph,r7
   06B5 EE                 1811 	mov	a,r6
   06B6 F0                 1812 	movx	@dptr,a
                           1813 ;	../../core/dev/slip.c:285: BUF->ipid[1] = nid;
   06B7 7Er0E              1814 	mov	r6,#(_uip_aligned_buf + 0x000e)
   06B9 7Fs00              1815 	mov	r7,#((_uip_aligned_buf + 0x000e) >> 8)
   06BB 74 05              1816 	mov	a,#0x05
   06BD 2E                 1817 	add	a,r6
   06BE FE                 1818 	mov	r6,a
   06BF E4                 1819 	clr	a
   06C0 3F                 1820 	addc	a,r7
   06C1 FF                 1821 	mov	r7,a
   06C2 8B 05              1822 	mov	ar5,r3
   06C4 8E 82              1823 	mov	dpl,r6
   06C6 8F 83              1824 	mov	dph,r7
   06C8 ED                 1825 	mov	a,r5
   06C9 F0                 1826 	movx	@dptr,a
                           1827 ;	../../core/dev/slip.c:286: nid = uip_htons(nid);
   06CA 8B 82              1828 	mov	dpl,r3
   06CC 8C 83              1829 	mov	dph,r4
   06CE C0 05              1830 	push	ar5
   06D0 12s00r00           1831 	lcall	_uip_htons
   06D3 AE 82              1832 	mov	r6,dpl
   06D5 AF 83              1833 	mov	r7,dph
   06D7 D0 05              1834 	pop	ar5
   06D9 8E 03              1835 	mov	ar3,r6
   06DB 8F 04              1836 	mov	ar4,r7
                           1837 ;	../../core/dev/slip.c:287: nid = ~nid;		/* negate */
   06DD EB                 1838 	mov	a,r3
   06DE F4                 1839 	cpl	a
   06DF FB                 1840 	mov	r3,a
   06E0 EC                 1841 	mov	a,r4
   06E1 F4                 1842 	cpl	a
   06E2 FC                 1843 	mov	r4,a
                           1844 ;	../../core/dev/slip.c:288: BUF->ipchksum += nid;	/* add */
   06E3 7Er0E              1845 	mov	r6,#(_uip_aligned_buf + 0x000e)
   06E5 7Fs00              1846 	mov	r7,#((_uip_aligned_buf + 0x000e) >> 8)
   06E7 74 0A              1847 	mov	a,#0x0A
   06E9 2E                 1848 	add	a,r6
   06EA FE                 1849 	mov	r6,a
   06EB E4                 1850 	clr	a
   06EC 3F                 1851 	addc	a,r7
   06ED FF                 1852 	mov	r7,a
   06EE 7Ar0E              1853 	mov	r2,#(_uip_aligned_buf + 0x000e)
   06F0 7Ds00              1854 	mov	r5,#((_uip_aligned_buf + 0x000e) >> 8)
   06F2 74 0A              1855 	mov	a,#0x0A
   06F4 2A                 1856 	add	a,r2
   06F5 F5 82              1857 	mov	dpl,a
   06F7 E4                 1858 	clr	a
   06F8 3D                 1859 	addc	a,r5
   06F9 F5 83              1860 	mov	dph,a
   06FB E0                 1861 	movx	a,@dptr
   06FC FA                 1862 	mov	r2,a
   06FD A3                 1863 	inc	dptr
   06FE E0                 1864 	movx	a,@dptr
   06FF FD                 1865 	mov	r5,a
   0700 EB                 1866 	mov	a,r3
   0701 2A                 1867 	add	a,r2
   0702 FA                 1868 	mov	r2,a
   0703 EC                 1869 	mov	a,r4
   0704 3D                 1870 	addc	a,r5
   0705 FD                 1871 	mov	r5,a
   0706 8E 82              1872 	mov	dpl,r6
   0708 8F 83              1873 	mov	dph,r7
   070A EA                 1874 	mov	a,r2
   070B F0                 1875 	movx	@dptr,a
   070C A3                 1876 	inc	dptr
   070D ED                 1877 	mov	a,r5
   070E F0                 1878 	movx	@dptr,a
                           1879 ;	../../core/dev/slip.c:289: if(BUF->ipchksum < nid) { /* 1-complement overflow? */
   070F 7Er0E              1880 	mov	r6,#(_uip_aligned_buf + 0x000e)
   0711 7Fs00              1881 	mov	r7,#((_uip_aligned_buf + 0x000e) >> 8)
   0713 74 0A              1882 	mov	a,#0x0A
   0715 2E                 1883 	add	a,r6
   0716 F5 82              1884 	mov	dpl,a
   0718 E4                 1885 	clr	a
   0719 3F                 1886 	addc	a,r7
   071A F5 83              1887 	mov	dph,a
   071C E0                 1888 	movx	a,@dptr
   071D FE                 1889 	mov	r6,a
   071E A3                 1890 	inc	dptr
   071F E0                 1891 	movx	a,@dptr
   0720 FF                 1892 	mov	r7,a
   0721 C3                 1893 	clr	c
   0722 EE                 1894 	mov	a,r6
   0723 9B                 1895 	subb	a,r3
   0724 EF                 1896 	mov	a,r7
   0725 9C                 1897 	subb	a,r4
   0726 D0 07              1898 	pop	ar7
   0728 D0 06              1899 	pop	ar6
   072A D0 05              1900 	pop	ar5
   072C 50 2E              1901 	jnc	00114$
                           1902 ;	../../core/dev/slip.c:290: BUF->ipchksum++;
   072E C0 05              1903 	push	ar5
   0730 C0 06              1904 	push	ar6
   0732 C0 07              1905 	push	ar7
   0734 7Br0E              1906 	mov	r3,#(_uip_aligned_buf + 0x000e)
   0736 7Cs00              1907 	mov	r4,#((_uip_aligned_buf + 0x000e) >> 8)
   0738 74 0A              1908 	mov	a,#0x0A
   073A 2B                 1909 	add	a,r3
   073B FB                 1910 	mov	r3,a
   073C E4                 1911 	clr	a
   073D 3C                 1912 	addc	a,r4
   073E FC                 1913 	mov	r4,a
   073F 8B 82              1914 	mov	dpl,r3
   0741 8C 83              1915 	mov	dph,r4
   0743 E0                 1916 	movx	a,@dptr
   0744 FA                 1917 	mov	r2,a
   0745 A3                 1918 	inc	dptr
   0746 E0                 1919 	movx	a,@dptr
   0747 FF                 1920 	mov	r7,a
   0748 0A                 1921 	inc	r2
   0749 BA 00 01           1922 	cjne	r2,#0x00,00178$
   074C 0F                 1923 	inc	r7
   074D                    1924 00178$:
   074D 8B 82              1925 	mov	dpl,r3
   074F 8C 83              1926 	mov	dph,r4
   0751 EA                 1927 	mov	a,r2
   0752 F0                 1928 	movx	@dptr,a
   0753 A3                 1929 	inc	dptr
   0754 EF                 1930 	mov	a,r7
   0755 F0                 1931 	movx	@dptr,a
                           1932 ;	../../core/dev/slip.c:316: PROCESS_END();
   0756 D0 07              1933 	pop	ar7
   0758 D0 06              1934 	pop	ar6
   075A D0 05              1935 	pop	ar5
                           1936 ;	../../core/dev/slip.c:290: BUF->ipchksum++;
   075C                    1937 00114$:
                           1938 ;	../../core/dev/slip.c:296: tcpip_input();
   075C C0 07              1939 	push	ar7
   075E C0 06              1940 	push	ar6
   0760 C0 05              1941 	push	ar5
   0762 12s00r00           1942 	lcall	_tcpip_input
   0765 D0 05              1943 	pop	ar5
   0767 D0 06              1944 	pop	ar6
   0769 D0 07              1945 	pop	ar7
   076B 02s04r6E           1946 	ljmp	00127$
   076E                    1947 00118$:
                           1948 ;	../../core/dev/slip.c:299: uip_len = 0;
   076E 90s00r00           1949 	mov	dptr,#_uip_len
   0771 E4                 1950 	clr	a
   0772 F0                 1951 	movx	@dptr,a
   0773 A3                 1952 	inc	dptr
   0774 F0                 1953 	movx	@dptr,a
   0775 02s04r6E           1954 	ljmp	00127$
                           1955 ;	../../core/dev/slip.c:316: PROCESS_END();
   0778                    1956 00129$:
   0778 8D 82              1957 	mov	dpl,r5
   077A 8E 83              1958 	mov	dph,r6
   077C 8F F0              1959 	mov	b,r7
   077E E4                 1960 	clr	a
   077F 12s00r00           1961 	lcall	__gptrput
   0782 A3                 1962 	inc	dptr
   0783 E4                 1963 	clr	a
   0784 12s00r00           1964 	lcall	__gptrput
   0787 75 82 03           1965 	mov	dpl,#0x03
   078A                    1966 00130$:
   078A 85*00 81           1967 	mov	sp,_bp
   078D D0*00              1968 	pop	_bp
   078F 22                 1969 	ret
                           1970 ;------------------------------------------------------------
                           1971 ;Allocation info for local variables in function 'slip_input_byte'
                           1972 ;------------------------------------------------------------
                           1973 ;c                         Allocated to registers r7 
                           1974 ;next                      Allocated to registers r3 r4 
                           1975 ;sloc0                     Allocated to stack - _bp +1
                           1976 ;sloc1                     Allocated to stack - _bp +3
                           1977 ;------------------------------------------------------------
                           1978 ;	../../core/dev/slip.c:320: slip_input_byte(unsigned char c)
                           1979 ;	-----------------------------------------
                           1980 ;	 function slip_input_byte
                           1981 ;	-----------------------------------------
   0790                    1982 _slip_input_byte:
   0790 C0*00              1983 	push	_bp
   0792 E5 81              1984 	mov	a,sp
   0794 F5*00              1985 	mov	_bp,a
   0796 24 04              1986 	add	a,#0x04
   0798 F5 81              1987 	mov	sp,a
   079A AF 82              1988 	mov	r7,dpl
                           1989 ;	../../core/dev/slip.c:322: switch(state) {
   079C 90s00r09           1990 	mov	dptr,#_state
   079F E0                 1991 	movx	a,@dptr
   07A0 FE                 1992 	mov  r6,a
   07A1 24 FC              1993 	add	a,#0xff - 0x03
   07A3 50 03              1994 	jnc	00157$
   07A5 02s08r70           1995 	ljmp	00123$
   07A8                    1996 00157$:
   07A8 EE                 1997 	mov	a,r6
   07A9 2E                 1998 	add	a,r6
   07AA 2E                 1999 	add	a,r6
   07AB 90s07rAF           2000 	mov	dptr,#00158$
   07AE 73                 2001 	jmp	@a+dptr
   07AF                    2002 00158$:
   07AF 02s07rC7           2003 	ljmp	00104$
   07B2 02s08r00           2004 	ljmp	00112$
   07B5 02s07rCD           2005 	ljmp	00105$
                           2006 ;	../../core/dev/slip.c:323: case STATE_RUBBISH:
                           2007 ;	../../core/dev/slip.c:324: if(c == SLIP_END) {
   07B8 BF C0 06           2008 	cjne	r7,#0xC0,00103$
                           2009 ;	../../core/dev/slip.c:325: state = STATE_OK;
   07BB 90s00r09           2010 	mov	dptr,#_state
   07BE 74 01              2011 	mov	a,#0x01
   07C0 F0                 2012 	movx	@dptr,a
   07C1                    2013 00103$:
                           2014 ;	../../core/dev/slip.c:327: return 0;
   07C1 90 00 00           2015 	mov	dptr,#0x0000
   07C4 02s09r07           2016 	ljmp	00131$
                           2017 ;	../../core/dev/slip.c:329: case STATE_TWOPACKETS:       /* Two packets are already buffered! */
   07C7                    2018 00104$:
                           2019 ;	../../core/dev/slip.c:330: return 0;
   07C7 90 00 00           2020 	mov	dptr,#0x0000
   07CA 02s09r07           2021 	ljmp	00131$
                           2022 ;	../../core/dev/slip.c:332: case STATE_ESC:
   07CD                    2023 00105$:
                           2024 ;	../../core/dev/slip.c:333: if(c == SLIP_ESC_END) {
   07CD BF DC 04           2025 	cjne	r7,#0xDC,00110$
                           2026 ;	../../core/dev/slip.c:334: c = SLIP_END;
   07D0 7F C0              2027 	mov	r7,#0xC0
   07D2 80 23              2028 	sjmp	00111$
   07D4                    2029 00110$:
                           2030 ;	../../core/dev/slip.c:335: } else if(c == SLIP_ESC_ESC) {
   07D4 BF DD 04           2031 	cjne	r7,#0xDD,00107$
                           2032 ;	../../core/dev/slip.c:336: c = SLIP_ESC;
   07D7 7F DB              2033 	mov	r7,#0xDB
   07D9 80 1C              2034 	sjmp	00111$
   07DB                    2035 00107$:
                           2036 ;	../../core/dev/slip.c:338: state = STATE_RUBBISH;
   07DB 90s00r09           2037 	mov	dptr,#_state
   07DE 74 03              2038 	mov	a,#0x03
   07E0 F0                 2039 	movx	@dptr,a
                           2040 ;	../../core/dev/slip.c:340: end = pkt_end;		/* remove rubbish */
   07E1 90s00r73           2041 	mov	dptr,#_pkt_end
   07E4 E0                 2042 	movx	a,@dptr
   07E5 FD                 2043 	mov	r5,a
   07E6 A3                 2044 	inc	dptr
   07E7 E0                 2045 	movx	a,@dptr
   07E8 FE                 2046 	mov	r6,a
   07E9 90s00r03           2047 	mov	dptr,#_end
   07EC ED                 2048 	mov	a,r5
   07ED F0                 2049 	movx	@dptr,a
   07EE A3                 2050 	inc	dptr
   07EF EE                 2051 	mov	a,r6
   07F0 F0                 2052 	movx	@dptr,a
                           2053 ;	../../core/dev/slip.c:341: return 0;
   07F1 90 00 00           2054 	mov	dptr,#0x0000
   07F4 02s09r07           2055 	ljmp	00131$
   07F7                    2056 00111$:
                           2057 ;	../../core/dev/slip.c:343: state = STATE_OK;
   07F7 90s00r09           2058 	mov	dptr,#_state
   07FA 74 01              2059 	mov	a,#0x01
   07FC F0                 2060 	movx	@dptr,a
                           2061 ;	../../core/dev/slip.c:344: break;
   07FD 02s08r70           2062 	ljmp	00123$
                           2063 ;	../../core/dev/slip.c:346: case STATE_OK:
   0800                    2064 00112$:
                           2065 ;	../../core/dev/slip.c:347: if(c == SLIP_ESC) {
   0800 BF DB 0C           2066 	cjne	r7,#0xDB,00121$
                           2067 ;	../../core/dev/slip.c:348: state = STATE_ESC;
   0803 90s00r09           2068 	mov	dptr,#_state
   0806 74 02              2069 	mov	a,#0x02
   0808 F0                 2070 	movx	@dptr,a
                           2071 ;	../../core/dev/slip.c:349: return 0;
   0809 90 00 00           2072 	mov	dptr,#0x0000
   080C 02s09r07           2073 	ljmp	00131$
   080F                    2074 00121$:
                           2075 ;	../../core/dev/slip.c:350: } else if(c == SLIP_END) {
   080F BF C0 5E           2076 	cjne	r7,#0xC0,00123$
                           2077 ;	../../core/dev/slip.c:356: if(end != pkt_end) {	/* Non zero length. */
   0812 90s00r03           2078 	mov	dptr,#_end
   0815 E0                 2079 	movx	a,@dptr
   0816 FD                 2080 	mov	r5,a
   0817 A3                 2081 	inc	dptr
   0818 E0                 2082 	movx	a,@dptr
   0819 FE                 2083 	mov	r6,a
   081A 90s00r73           2084 	mov	dptr,#_pkt_end
   081D E0                 2085 	movx	a,@dptr
   081E FB                 2086 	mov	r3,a
   081F A3                 2087 	inc	dptr
   0820 E0                 2088 	movx	a,@dptr
   0821 FC                 2089 	mov	r4,a
   0822 ED                 2090 	mov	a,r5
   0823 B5 03 06           2091 	cjne	a,ar3,00169$
   0826 EE                 2092 	mov	a,r6
   0827 B5 04 02           2093 	cjne	a,ar4,00169$
   082A 80 3E              2094 	sjmp	00117$
   082C                    2095 00169$:
                           2096 ;	../../core/dev/slip.c:357: if(begin == pkt_end) {	/* None buffered. */
   082C C0 05              2097 	push	ar5
   082E C0 06              2098 	push	ar6
   0830 90s00r01           2099 	mov	dptr,#_begin
   0833 E0                 2100 	movx	a,@dptr
   0834 FA                 2101 	mov	r2,a
   0835 A3                 2102 	inc	dptr
   0836 E0                 2103 	movx	a,@dptr
   0837 FE                 2104 	mov	r6,a
   0838 EA                 2105 	mov	a,r2
   0839 B5 03 06           2106 	cjne	a,ar3,00170$
   083C EE                 2107 	mov	a,r6
   083D B5 04 02           2108 	cjne	a,ar4,00170$
   0840 80 06              2109 	sjmp	00171$
   0842                    2110 00170$:
   0842 D0 06              2111 	pop	ar6
   0844 D0 05              2112 	pop	ar5
   0846 80 0E              2113 	sjmp	00114$
   0848                    2114 00171$:
   0848 D0 06              2115 	pop	ar6
   084A D0 05              2116 	pop	ar5
                           2117 ;	../../core/dev/slip.c:358: pkt_end = end;
   084C 90s00r73           2118 	mov	dptr,#_pkt_end
   084F ED                 2119 	mov	a,r5
   0850 F0                 2120 	movx	@dptr,a
   0851 A3                 2121 	inc	dptr
   0852 EE                 2122 	mov	a,r6
   0853 F0                 2123 	movx	@dptr,a
   0854 80 05              2124 	sjmp	00115$
   0856                    2125 00114$:
                           2126 ;	../../core/dev/slip.c:360: state = STATE_TWOPACKETS;
   0856 90s00r09           2127 	mov	dptr,#_state
   0859 E4                 2128 	clr	a
   085A F0                 2129 	movx	@dptr,a
   085B                    2130 00115$:
                           2131 ;	../../core/dev/slip.c:363: process_poll(&slip_process);
   085B 90s00r00           2132 	mov	dptr,#_slip_process
   085E 75 F0 00           2133 	mov	b,#0x00
   0861 12s00r00           2134 	lcall	_process_poll
                           2135 ;	../../core/dev/slip.c:364: return 1;
   0864 90 00 01           2136 	mov	dptr,#0x0001
   0867 02s09r07           2137 	ljmp	00131$
   086A                    2138 00117$:
                           2139 ;	../../core/dev/slip.c:366: return 0;
   086A 90 00 00           2140 	mov	dptr,#0x0000
   086D 02s09r07           2141 	ljmp	00131$
                           2142 ;	../../core/dev/slip.c:369: }
   0870                    2143 00123$:
                           2144 ;	../../core/dev/slip.c:374: next = end + 1;
   0870 90s00r03           2145 	mov	dptr,#_end
   0873 E0                 2146 	movx	a,@dptr
   0874 FD                 2147 	mov	r5,a
   0875 A3                 2148 	inc	dptr
   0876 E0                 2149 	movx	a,@dptr
   0877 FE                 2150 	mov	r6,a
   0878 74 01              2151 	mov	a,#0x01
   087A 2D                 2152 	add	a,r5
   087B FB                 2153 	mov	r3,a
   087C E4                 2154 	clr	a
   087D 3E                 2155 	addc	a,r6
   087E FC                 2156 	mov	r4,a
                           2157 ;	../../core/dev/slip.c:375: if(next == RX_BUFSIZE) {
   087F BB 6E 07           2158 	cjne	r3,#0x6E,00125$
   0882 BC 00 04           2159 	cjne	r4,#0x00,00125$
                           2160 ;	../../core/dev/slip.c:376: next = 0;
   0885 7B 00              2161 	mov	r3,#0x00
   0887 7C 00              2162 	mov	r4,#0x00
   0889                    2163 00125$:
                           2164 ;	../../core/dev/slip.c:378: if(next == begin) {		/* rxbuf is full */
   0889 90s00r01           2165 	mov	dptr,#_begin
   088C A8*00              2166 	mov	r0,_bp
   088E 08                 2167 	inc	r0
   088F E0                 2168 	movx	a,@dptr
   0890 F6                 2169 	mov	@r0,a
   0891 A3                 2170 	inc	dptr
   0892 E0                 2171 	movx	a,@dptr
   0893 08                 2172 	inc	r0
   0894 F6                 2173 	mov	@r0,a
   0895 A8*00              2174 	mov	r0,_bp
   0897 08                 2175 	inc	r0
   0898 E6                 2176 	mov	a,@r0
   0899 B5 03 07           2177 	cjne	a,ar3,00174$
   089C 08                 2178 	inc	r0
   089D E6                 2179 	mov	a,@r0
   089E B5 04 02           2180 	cjne	a,ar4,00174$
   08A1 80 02              2181 	sjmp	00175$
   08A3                    2182 00174$:
   08A3 80 27              2183 	sjmp	00127$
   08A5                    2184 00175$:
                           2185 ;	../../core/dev/slip.c:379: state = STATE_RUBBISH;
   08A5 90s00r09           2186 	mov	dptr,#_state
   08A8 74 03              2187 	mov	a,#0x03
   08AA F0                 2188 	movx	@dptr,a
                           2189 ;	../../core/dev/slip.c:381: end = pkt_end;		/* remove rubbish */
   08AB 90s00r73           2190 	mov	dptr,#_pkt_end
   08AE E5*00              2191 	mov	a,_bp
   08B0 24 03              2192 	add	a,#0x03
   08B2 F8                 2193 	mov	r0,a
   08B3 E0                 2194 	movx	a,@dptr
   08B4 F6                 2195 	mov	@r0,a
   08B5 A3                 2196 	inc	dptr
   08B6 E0                 2197 	movx	a,@dptr
   08B7 08                 2198 	inc	r0
   08B8 F6                 2199 	mov	@r0,a
   08B9 E5*00              2200 	mov	a,_bp
   08BB 24 03              2201 	add	a,#0x03
   08BD F8                 2202 	mov	r0,a
   08BE 90s00r03           2203 	mov	dptr,#_end
   08C1 E6                 2204 	mov	a,@r0
   08C2 F0                 2205 	movx	@dptr,a
   08C3 08                 2206 	inc	r0
   08C4 A3                 2207 	inc	dptr
   08C5 E6                 2208 	mov	a,@r0
   08C6 F0                 2209 	movx	@dptr,a
                           2210 ;	../../core/dev/slip.c:382: return 0;
   08C7 90 00 00           2211 	mov	dptr,#0x0000
   08CA 80 3B              2212 	sjmp	00131$
   08CC                    2213 00127$:
                           2214 ;	../../core/dev/slip.c:384: rxbuf[end] = c;
   08CC ED                 2215 	mov	a,r5
   08CD 24r05              2216 	add	a,#_rxbuf
   08CF F5 82              2217 	mov	dpl,a
   08D1 EE                 2218 	mov	a,r6
   08D2 34s00              2219 	addc	a,#(_rxbuf >> 8)
   08D4 F5 83              2220 	mov	dph,a
   08D6 EF                 2221 	mov	a,r7
   08D7 F0                 2222 	movx	@dptr,a
                           2223 ;	../../core/dev/slip.c:385: end = next;
   08D8 90s00r03           2224 	mov	dptr,#_end
   08DB EB                 2225 	mov	a,r3
   08DC F0                 2226 	movx	@dptr,a
   08DD A3                 2227 	inc	dptr
   08DE EC                 2228 	mov	a,r4
   08DF F0                 2229 	movx	@dptr,a
                           2230 ;	../../core/dev/slip.c:389: if(c == 'T' && rxbuf[begin] == 'C') {
   08E0 BF 54 21           2231 	cjne	r7,#0x54,00129$
   08E3 A8*00              2232 	mov	r0,_bp
   08E5 08                 2233 	inc	r0
   08E6 E6                 2234 	mov	a,@r0
   08E7 24r05              2235 	add	a,#_rxbuf
   08E9 F5 82              2236 	mov	dpl,a
   08EB 08                 2237 	inc	r0
   08EC E6                 2238 	mov	a,@r0
   08ED 34s00              2239 	addc	a,#(_rxbuf >> 8)
   08EF F5 83              2240 	mov	dph,a
   08F1 E0                 2241 	movx	a,@dptr
   08F2 FF                 2242 	mov	r7,a
   08F3 BF 43 0E           2243 	cjne	r7,#0x43,00129$
                           2244 ;	../../core/dev/slip.c:390: process_poll(&slip_process);
   08F6 90s00r00           2245 	mov	dptr,#_slip_process
   08F9 75 F0 00           2246 	mov	b,#0x00
   08FC 12s00r00           2247 	lcall	_process_poll
                           2248 ;	../../core/dev/slip.c:391: return 1;
   08FF 90 00 01           2249 	mov	dptr,#0x0001
   0902 80 03              2250 	sjmp	00131$
   0904                    2251 00129$:
                           2252 ;	../../core/dev/slip.c:394: return 0;
   0904 90 00 00           2253 	mov	dptr,#0x0000
   0907                    2254 00131$:
   0907 85*00 81           2255 	mov	sp,_bp
   090A D0*00              2256 	pop	_bp
   090C 22                 2257 	ret
                           2258 	.area CSEG    (CODE)
                           2259 	.area CONST   (CODE)
   0000                    2260 __str_0:
   0000 43 4C 49 45 4E 54  2261 	.ascii "CLIENT"
   0006 00                 2262 	.db 0x00
   0007                    2263 __str_1:
   0007 43 4C 49 45 4E 54  2264 	.ascii "CLIENTSERVER"
        53 45 52 56 45 52
   0013 C0                 2265 	.db 0xC0
   0014 00                 2266 	.db 0x00
   0015                    2267 __str_2:
   0015 3F 49 50 41        2268 	.ascii "?IPA"
   0019 00                 2269 	.db 0x00
   001A                    2270 __str_3:
   001A 3D 49 50 41        2271 	.ascii "=IPA"
   001E 00                 2272 	.db 0x00
                           2273 	.area XINIT   (CODE)
   0000                    2274 __xinit__slip_process:
                           2275 ; generic printIvalPtr
   0000 00 00 00           2276 	.byte #0x00,#0x00,#0x00
   0003r31s04              2277 	.byte _process_thread_slip_process,(_process_thread_slip_process >> 8)
   0005 00 00              2278 	.byte #0x00,#0x00	; 0
   0007 00                 2279 	.db #0x00	; 0
   0008 00                 2280 	.db #0x00	; 0
   0009                    2281 __xinit__state:
   0009 00                 2282 	.db #0x00	; 0
   000A                    2283 __xinit__input_callback:
   000A 00 00              2284 	.byte #0x00,#0x00
                           2285 	.area CABS    (ABS,CODE)
