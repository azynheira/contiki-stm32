                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.1 #7100 (Apr  1 2013) (Linux)
                              4 ; This file was generated Tue Apr 23 09:41:20 2013
                              5 ;--------------------------------------------------------
                              6 	.module lpp
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _lpp_driver
                             13 	.globl _printf
                             14 	.globl _compower_attrconv
                             15 	.globl _compower_clear
                             16 	.globl _compower_accumulate
                             17 	.globl _mac_call_sent_callback
                             18 	.globl _queuebuf_addr
                             19 	.globl _queuebuf_datalen
                             20 	.globl _queuebuf_dataptr
                             21 	.globl _queuebuf_free
                             22 	.globl _queuebuf_to_packetbuf
                             23 	.globl _queuebuf_new_from_packetbuf
                             24 	.globl _packetbuf_addr
                             25 	.globl _packetbuf_set_addr
                             26 	.globl _packetbuf_attr
                             27 	.globl _packetbuf_set_attr
                             28 	.globl _packetbuf_hdrreduce
                             29 	.globl _packetbuf_hdralloc
                             30 	.globl _packetbuf_compact
                             31 	.globl _packetbuf_set_datalen
                             32 	.globl _packetbuf_totlen
                             33 	.globl _packetbuf_datalen
                             34 	.globl _packetbuf_hdrptr
                             35 	.globl _packetbuf_dataptr
                             36 	.globl _packetbuf_clear
                             37 	.globl _ctimer_stop
                             38 	.globl _ctimer_set
                             39 	.globl _clock_time
                             40 	.globl _announcement_register_listen_callback
                             41 	.globl _announcement_list
                             42 	.globl _rimeaddr_cmp
                             43 	.globl _rimeaddr_copy
                             44 	.globl _random_rand
                             45 	.globl _memb_free
                             46 	.globl _memb_alloc
                             47 	.globl _memb_init
                             48 	.globl _memcpy
                             49 	.globl _list_item_next
                             50 	.globl _list_length
                             51 	.globl _list_remove
                             52 	.globl _list_add
                             53 	.globl _list_head
                             54 	.globl _list_init
                             55 	.globl _leds_toggle
                             56 	.globl _leds_off
                             57 	.globl _leds_on
                             58 	.globl _IRCON2_P2IF
                             59 	.globl _IRCON2_UTX0IF
                             60 	.globl _IRCON2_UTX1IF
                             61 	.globl _IRCON2_P1IF
                             62 	.globl _IRCON2_WDTIF
                             63 	.globl _CY
                             64 	.globl _AC
                             65 	.globl _F0
                             66 	.globl _RS1
                             67 	.globl _RS0
                             68 	.globl _OV
                             69 	.globl _F1
                             70 	.globl _P
                             71 	.globl _IRCON_DMAIF
                             72 	.globl _IRCON_T1IF
                             73 	.globl _IRCON_T2IF
                             74 	.globl _IRCON_T3IF
                             75 	.globl _IRCON_T4IF
                             76 	.globl _IRCON_P0IF
                             77 	.globl _IRCON_STIF
                             78 	.globl _IEN1_DMAIE
                             79 	.globl _IEN1_T1IE
                             80 	.globl _IEN1_T2IE
                             81 	.globl _IEN1_T3IE
                             82 	.globl _IEN1_T4IE
                             83 	.globl _IEN1_P0IE
                             84 	.globl _IEN0_RFERRIE
                             85 	.globl _IEN0_ADCIE
                             86 	.globl _IEN0_URX0IE
                             87 	.globl _IEN0_URX1IE
                             88 	.globl _IEN0_ENCIE
                             89 	.globl _IEN0_STIE
                             90 	.globl _IEN0_EA
                             91 	.globl _EA
                             92 	.globl _P2_4
                             93 	.globl _P2_3
                             94 	.globl _P2_2
                             95 	.globl _P2_1
                             96 	.globl _P2_0
                             97 	.globl _S0CON_ENCIF_0
                             98 	.globl _S0CON_ENCIF_1
                             99 	.globl _P1_7
                            100 	.globl _P1_6
                            101 	.globl _P1_5
                            102 	.globl _P1_4
                            103 	.globl _P1_3
                            104 	.globl _P1_2
                            105 	.globl _P1_1
                            106 	.globl _P1_0
                            107 	.globl _TCON_IT0
                            108 	.globl _TCON_RFERRIF
                            109 	.globl _TCON_IT1
                            110 	.globl _TCON_URX0IF
                            111 	.globl _TCON_ADCIF
                            112 	.globl _TCON_URX1IF
                            113 	.globl _P0_0
                            114 	.globl _P0_1
                            115 	.globl _P0_2
                            116 	.globl _P0_3
                            117 	.globl _P0_4
                            118 	.globl _P0_5
                            119 	.globl _P0_6
                            120 	.globl _P0_7
                            121 	.globl _P2DIR
                            122 	.globl _P1DIR
                            123 	.globl _P0DIR
                            124 	.globl _U1GCR
                            125 	.globl _U1UCR
                            126 	.globl _U1BAUD
                            127 	.globl _U1BUF
                            128 	.globl _U1CSR
                            129 	.globl _P2INP
                            130 	.globl _P1INP
                            131 	.globl _P2SEL
                            132 	.globl _P1SEL
                            133 	.globl _P0SEL
                            134 	.globl _ADCCFG
                            135 	.globl _PERCFG
                            136 	.globl _B
                            137 	.globl _T4CC1
                            138 	.globl _T4CCTL1
                            139 	.globl _T4CC0
                            140 	.globl _T4CCTL0
                            141 	.globl _T4CTL
                            142 	.globl _T4CNT
                            143 	.globl _RFIF
                            144 	.globl _IRCON2
                            145 	.globl _T1CCTL2
                            146 	.globl _T1CCTL1
                            147 	.globl _T1CCTL0
                            148 	.globl _T1CTL
                            149 	.globl _T1CNTH
                            150 	.globl _T1CNTL
                            151 	.globl _RFST
                            152 	.globl _ACC
                            153 	.globl _T1CC2H
                            154 	.globl _T1CC2L
                            155 	.globl _T1CC1H
                            156 	.globl _T1CC1L
                            157 	.globl _T1CC0H
                            158 	.globl _T1CC0L
                            159 	.globl _RFD
                            160 	.globl _TIMIF
                            161 	.globl _DMAREQ
                            162 	.globl _DMAARM
                            163 	.globl _DMA0CFGH
                            164 	.globl _DMA0CFGL
                            165 	.globl _DMA1CFGH
                            166 	.globl _DMA1CFGL
                            167 	.globl _DMAIRQ
                            168 	.globl _PSW
                            169 	.globl _T3CC1
                            170 	.globl _T3CCTL1
                            171 	.globl _T3CC0
                            172 	.globl _T3CCTL0
                            173 	.globl _T3CTL
                            174 	.globl _T3CNT
                            175 	.globl _WDCTL
                            176 	.globl _T2CON
                            177 	.globl _MEMCTR
                            178 	.globl _CLKCON
                            179 	.globl _U0GCR
                            180 	.globl _U0UCR
                            181 	.globl _T2CNF
                            182 	.globl _U0BAUD
                            183 	.globl _U0BUF
                            184 	.globl _IRCON
                            185 	.globl _SLEEP
                            186 	.globl _RNDH
                            187 	.globl _RNDL
                            188 	.globl _ADCH
                            189 	.globl _ADCL
                            190 	.globl _IP1
                            191 	.globl _IEN1
                            192 	.globl _RCCTL
                            193 	.globl _ADCCON3
                            194 	.globl _ADCCON2
                            195 	.globl _ADCCON1
                            196 	.globl _ENCCS
                            197 	.globl _ENCDO
                            198 	.globl _ENCDI
                            199 	.globl _FWDATA
                            200 	.globl _FCTL
                            201 	.globl _FADDRH
                            202 	.globl _FADDRL
                            203 	.globl _FWT
                            204 	.globl _IP0
                            205 	.globl _IEN0
                            206 	.globl _IE
                            207 	.globl _T2THD
                            208 	.globl _T2TLD
                            209 	.globl _T2CAPHPH
                            210 	.globl _T2CAPLPL
                            211 	.globl _T2OF2
                            212 	.globl _T2OF1
                            213 	.globl _T2OF0
                            214 	.globl _P2
                            215 	.globl _PSBANK
                            216 	.globl _FMAP
                            217 	.globl _T2PEROF2
                            218 	.globl _T2PEROF1
                            219 	.globl _T2PEROF0
                            220 	.globl _S1CON
                            221 	.globl _IEN2
                            222 	.globl _HSRC
                            223 	.globl _S0CON
                            224 	.globl _ST2
                            225 	.globl _ST1
                            226 	.globl _ST0
                            227 	.globl _T2CMP
                            228 	.globl __XPAGE
                            229 	.globl _DPS
                            230 	.globl _RFIM
                            231 	.globl _P1
                            232 	.globl _P0INP
                            233 	.globl _P1IEN
                            234 	.globl _PICTL
                            235 	.globl _P2IFG
                            236 	.globl _P1IFG
                            237 	.globl _P0IFG
                            238 	.globl _TCON
                            239 	.globl _PCON
                            240 	.globl _U0CSR
                            241 	.globl _DPH1
                            242 	.globl _DPL1
                            243 	.globl _DPH0
                            244 	.globl _DPL0
                            245 	.globl _SP
                            246 	.globl _P0
                            247 	.globl _ADC_SHADOW
                            248 	.globl _U1BUF_SHADOW
                            249 	.globl _RFD_SHADOW
                            250 	.globl _U0BUF_SHADOW
                            251 	.globl _RFSTATUS
                            252 	.globl _CHIPID
                            253 	.globl _CHVER
                            254 	.globl _FSMTC1
                            255 	.globl _RXFIFOCNT
                            256 	.globl _IOCFG3
                            257 	.globl _IOCFG2
                            258 	.globl _IOCFG1
                            259 	.globl _IOCFG0
                            260 	.globl _SHORTADDRL
                            261 	.globl _SHORTADDRH
                            262 	.globl _PANIDL
                            263 	.globl _PANIDH
                            264 	.globl _IEEE_ADDR7
                            265 	.globl _IEEE_ADDR6
                            266 	.globl _IEEE_ADDR5
                            267 	.globl _IEEE_ADDR4
                            268 	.globl _IEEE_ADDR3
                            269 	.globl _IEEE_ADDR2
                            270 	.globl _IEEE_ADDR1
                            271 	.globl _IEEE_ADDR0
                            272 	.globl _DACTSTL
                            273 	.globl _DACTSTH
                            274 	.globl _ADCTSTL
                            275 	.globl _ADCTSTH
                            276 	.globl _FSMSTATE
                            277 	.globl _AGCCTRLL
                            278 	.globl _AGCCTRLH
                            279 	.globl _MANORL
                            280 	.globl _MANORH
                            281 	.globl _MANANDL
                            282 	.globl _MANANDH
                            283 	.globl _FSMTCL
                            284 	.globl _FSMTCH
                            285 	.globl _RFPWR
                            286 	.globl _CSPT
                            287 	.globl _CSPCTRL
                            288 	.globl _CSPZ
                            289 	.globl _CSPY
                            290 	.globl _CSPX
                            291 	.globl _FSCTRLL
                            292 	.globl _FSCTRLH
                            293 	.globl _RXCTRL1L
                            294 	.globl _RXCTRL1H
                            295 	.globl _RXCTRL0L
                            296 	.globl _RXCTRL0H
                            297 	.globl _TXCTRLL
                            298 	.globl _TXCTRLH
                            299 	.globl _SYNCWORDL
                            300 	.globl _SYNCWORDH
                            301 	.globl _RSSIL
                            302 	.globl _RSSIH
                            303 	.globl _MDMCTRL1L
                            304 	.globl _MDMCTRL1H
                            305 	.globl _MDMCTRL0L
                            306 	.globl _MDMCTRL0H
                            307 ;--------------------------------------------------------
                            308 ; special function registers
                            309 ;--------------------------------------------------------
                            310 	.area RSEG    (ABS,DATA)
   0000                     311 	.org 0x0000
                    0080    312 _P0	=	0x0080
                    0081    313 _SP	=	0x0081
                    0082    314 _DPL0	=	0x0082
                    0083    315 _DPH0	=	0x0083
                    0084    316 _DPL1	=	0x0084
                    0085    317 _DPH1	=	0x0085
                    0086    318 _U0CSR	=	0x0086
                    0087    319 _PCON	=	0x0087
                    0088    320 _TCON	=	0x0088
                    0089    321 _P0IFG	=	0x0089
                    008A    322 _P1IFG	=	0x008a
                    008B    323 _P2IFG	=	0x008b
                    008C    324 _PICTL	=	0x008c
                    008D    325 _P1IEN	=	0x008d
                    008F    326 _P0INP	=	0x008f
                    0090    327 _P1	=	0x0090
                    0091    328 _RFIM	=	0x0091
                    0092    329 _DPS	=	0x0092
                    0093    330 __XPAGE	=	0x0093
                    0094    331 _T2CMP	=	0x0094
                    0095    332 _ST0	=	0x0095
                    0096    333 _ST1	=	0x0096
                    0097    334 _ST2	=	0x0097
                    0098    335 _S0CON	=	0x0098
                    0099    336 _HSRC	=	0x0099
                    009A    337 _IEN2	=	0x009a
                    009B    338 _S1CON	=	0x009b
                    009C    339 _T2PEROF0	=	0x009c
                    009D    340 _T2PEROF1	=	0x009d
                    009E    341 _T2PEROF2	=	0x009e
                    009F    342 _FMAP	=	0x009f
                    009F    343 _PSBANK	=	0x009f
                    00A0    344 _P2	=	0x00a0
                    00A1    345 _T2OF0	=	0x00a1
                    00A2    346 _T2OF1	=	0x00a2
                    00A3    347 _T2OF2	=	0x00a3
                    00A4    348 _T2CAPLPL	=	0x00a4
                    00A5    349 _T2CAPHPH	=	0x00a5
                    00A6    350 _T2TLD	=	0x00a6
                    00A7    351 _T2THD	=	0x00a7
                    00A8    352 _IE	=	0x00a8
                    00A8    353 _IEN0	=	0x00a8
                    00A9    354 _IP0	=	0x00a9
                    00AB    355 _FWT	=	0x00ab
                    00AC    356 _FADDRL	=	0x00ac
                    00AD    357 _FADDRH	=	0x00ad
                    00AE    358 _FCTL	=	0x00ae
                    00AF    359 _FWDATA	=	0x00af
                    00B1    360 _ENCDI	=	0x00b1
                    00B2    361 _ENCDO	=	0x00b2
                    00B3    362 _ENCCS	=	0x00b3
                    00B4    363 _ADCCON1	=	0x00b4
                    00B5    364 _ADCCON2	=	0x00b5
                    00B6    365 _ADCCON3	=	0x00b6
                    00B7    366 _RCCTL	=	0x00b7
                    00B8    367 _IEN1	=	0x00b8
                    00B9    368 _IP1	=	0x00b9
                    00BA    369 _ADCL	=	0x00ba
                    00BB    370 _ADCH	=	0x00bb
                    00BC    371 _RNDL	=	0x00bc
                    00BD    372 _RNDH	=	0x00bd
                    00BE    373 _SLEEP	=	0x00be
                    00C0    374 _IRCON	=	0x00c0
                    00C1    375 _U0BUF	=	0x00c1
                    00C2    376 _U0BAUD	=	0x00c2
                    00C3    377 _T2CNF	=	0x00c3
                    00C4    378 _U0UCR	=	0x00c4
                    00C5    379 _U0GCR	=	0x00c5
                    00C6    380 _CLKCON	=	0x00c6
                    00C7    381 _MEMCTR	=	0x00c7
                    00C8    382 _T2CON	=	0x00c8
                    00C9    383 _WDCTL	=	0x00c9
                    00CA    384 _T3CNT	=	0x00ca
                    00CB    385 _T3CTL	=	0x00cb
                    00CC    386 _T3CCTL0	=	0x00cc
                    00CD    387 _T3CC0	=	0x00cd
                    00CE    388 _T3CCTL1	=	0x00ce
                    00CF    389 _T3CC1	=	0x00cf
                    00D0    390 _PSW	=	0x00d0
                    00D1    391 _DMAIRQ	=	0x00d1
                    00D2    392 _DMA1CFGL	=	0x00d2
                    00D3    393 _DMA1CFGH	=	0x00d3
                    00D4    394 _DMA0CFGL	=	0x00d4
                    00D5    395 _DMA0CFGH	=	0x00d5
                    00D6    396 _DMAARM	=	0x00d6
                    00D7    397 _DMAREQ	=	0x00d7
                    00D8    398 _TIMIF	=	0x00d8
                    00D9    399 _RFD	=	0x00d9
                    00DA    400 _T1CC0L	=	0x00da
                    00DB    401 _T1CC0H	=	0x00db
                    00DC    402 _T1CC1L	=	0x00dc
                    00DD    403 _T1CC1H	=	0x00dd
                    00DE    404 _T1CC2L	=	0x00de
                    00DF    405 _T1CC2H	=	0x00df
                    00E0    406 _ACC	=	0x00e0
                    00E1    407 _RFST	=	0x00e1
                    00E2    408 _T1CNTL	=	0x00e2
                    00E3    409 _T1CNTH	=	0x00e3
                    00E4    410 _T1CTL	=	0x00e4
                    00E5    411 _T1CCTL0	=	0x00e5
                    00E6    412 _T1CCTL1	=	0x00e6
                    00E7    413 _T1CCTL2	=	0x00e7
                    00E8    414 _IRCON2	=	0x00e8
                    00E9    415 _RFIF	=	0x00e9
                    00EA    416 _T4CNT	=	0x00ea
                    00EB    417 _T4CTL	=	0x00eb
                    00EC    418 _T4CCTL0	=	0x00ec
                    00ED    419 _T4CC0	=	0x00ed
                    00EE    420 _T4CCTL1	=	0x00ee
                    00EF    421 _T4CC1	=	0x00ef
                    00F0    422 _B	=	0x00f0
                    00F1    423 _PERCFG	=	0x00f1
                    00F2    424 _ADCCFG	=	0x00f2
                    00F3    425 _P0SEL	=	0x00f3
                    00F4    426 _P1SEL	=	0x00f4
                    00F5    427 _P2SEL	=	0x00f5
                    00F6    428 _P1INP	=	0x00f6
                    00F7    429 _P2INP	=	0x00f7
                    00F8    430 _U1CSR	=	0x00f8
                    00F9    431 _U1BUF	=	0x00f9
                    00FA    432 _U1BAUD	=	0x00fa
                    00FB    433 _U1UCR	=	0x00fb
                    00FC    434 _U1GCR	=	0x00fc
                    00FD    435 _P0DIR	=	0x00fd
                    00FE    436 _P1DIR	=	0x00fe
                    00FF    437 _P2DIR	=	0x00ff
                            438 ;--------------------------------------------------------
                            439 ; special function bits
                            440 ;--------------------------------------------------------
                            441 	.area RSEG    (ABS,DATA)
   0000                     442 	.org 0x0000
                    0087    443 _P0_7	=	0x0087
                    0086    444 _P0_6	=	0x0086
                    0085    445 _P0_5	=	0x0085
                    0084    446 _P0_4	=	0x0084
                    0083    447 _P0_3	=	0x0083
                    0082    448 _P0_2	=	0x0082
                    0081    449 _P0_1	=	0x0081
                    0080    450 _P0_0	=	0x0080
                    008F    451 _TCON_URX1IF	=	0x008f
                    008D    452 _TCON_ADCIF	=	0x008d
                    008B    453 _TCON_URX0IF	=	0x008b
                    008A    454 _TCON_IT1	=	0x008a
                    0089    455 _TCON_RFERRIF	=	0x0089
                    0088    456 _TCON_IT0	=	0x0088
                    0090    457 _P1_0	=	0x0090
                    0091    458 _P1_1	=	0x0091
                    0092    459 _P1_2	=	0x0092
                    0093    460 _P1_3	=	0x0093
                    0094    461 _P1_4	=	0x0094
                    0095    462 _P1_5	=	0x0095
                    0096    463 _P1_6	=	0x0096
                    0097    464 _P1_7	=	0x0097
                    0099    465 _S0CON_ENCIF_1	=	0x0099
                    0098    466 _S0CON_ENCIF_0	=	0x0098
                    00A0    467 _P2_0	=	0x00a0
                    00A1    468 _P2_1	=	0x00a1
                    00A2    469 _P2_2	=	0x00a2
                    00A3    470 _P2_3	=	0x00a3
                    00A4    471 _P2_4	=	0x00a4
                    00AF    472 _EA	=	0x00af
                    00AF    473 _IEN0_EA	=	0x00af
                    00AD    474 _IEN0_STIE	=	0x00ad
                    00AC    475 _IEN0_ENCIE	=	0x00ac
                    00AB    476 _IEN0_URX1IE	=	0x00ab
                    00AA    477 _IEN0_URX0IE	=	0x00aa
                    00A9    478 _IEN0_ADCIE	=	0x00a9
                    00A8    479 _IEN0_RFERRIE	=	0x00a8
                    00BD    480 _IEN1_P0IE	=	0x00bd
                    00BC    481 _IEN1_T4IE	=	0x00bc
                    00BB    482 _IEN1_T3IE	=	0x00bb
                    00BA    483 _IEN1_T2IE	=	0x00ba
                    00B9    484 _IEN1_T1IE	=	0x00b9
                    00B8    485 _IEN1_DMAIE	=	0x00b8
                    00C7    486 _IRCON_STIF	=	0x00c7
                    00C5    487 _IRCON_P0IF	=	0x00c5
                    00C4    488 _IRCON_T4IF	=	0x00c4
                    00C3    489 _IRCON_T3IF	=	0x00c3
                    00C2    490 _IRCON_T2IF	=	0x00c2
                    00C1    491 _IRCON_T1IF	=	0x00c1
                    00C0    492 _IRCON_DMAIF	=	0x00c0
                    00D0    493 _P	=	0x00d0
                    00D1    494 _F1	=	0x00d1
                    00D2    495 _OV	=	0x00d2
                    00D3    496 _RS0	=	0x00d3
                    00D4    497 _RS1	=	0x00d4
                    00D5    498 _F0	=	0x00d5
                    00D6    499 _AC	=	0x00d6
                    00D7    500 _CY	=	0x00d7
                    00EC    501 _IRCON2_WDTIF	=	0x00ec
                    00EB    502 _IRCON2_P1IF	=	0x00eb
                    00EA    503 _IRCON2_UTX1IF	=	0x00ea
                    00E9    504 _IRCON2_UTX0IF	=	0x00e9
                    00E8    505 _IRCON2_P2IF	=	0x00e8
                            506 ;--------------------------------------------------------
                            507 ; overlayable register banks
                            508 ;--------------------------------------------------------
                            509 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     510 	.ds 8
                            511 ;--------------------------------------------------------
                            512 ; internal ram data
                            513 ;--------------------------------------------------------
                            514 	.area DSEG    (DATA)
                            515 ;--------------------------------------------------------
                            516 ; overlayable items in internal ram 
                            517 ;--------------------------------------------------------
                            518 	.area OSEG    (OVR,DATA)
                            519 ;--------------------------------------------------------
                            520 ; indirectly addressable internal ram data
                            521 ;--------------------------------------------------------
                            522 	.area ISEG    (DATA)
                            523 ;--------------------------------------------------------
                            524 ; absolute internal ram data
                            525 ;--------------------------------------------------------
                            526 	.area IABS    (ABS,DATA)
                            527 	.area IABS    (ABS,DATA)
                            528 ;--------------------------------------------------------
                            529 ; bit data
                            530 ;--------------------------------------------------------
                            531 	.area BSEG    (BIT)
                            532 ;--------------------------------------------------------
                            533 ; paged external ram data
                            534 ;--------------------------------------------------------
                            535 	.area PSEG    (PAG,XDATA)
                            536 ;--------------------------------------------------------
                            537 ; external ram data
                            538 ;--------------------------------------------------------
                            539 	.area XSEG    (XDATA)
                    DF02    540 _MDMCTRL0H	=	0xdf02
                    DF03    541 _MDMCTRL0L	=	0xdf03
                    DF04    542 _MDMCTRL1H	=	0xdf04
                    DF05    543 _MDMCTRL1L	=	0xdf05
                    DF06    544 _RSSIH	=	0xdf06
                    DF07    545 _RSSIL	=	0xdf07
                    DF08    546 _SYNCWORDH	=	0xdf08
                    DF09    547 _SYNCWORDL	=	0xdf09
                    DF0A    548 _TXCTRLH	=	0xdf0a
                    DF0B    549 _TXCTRLL	=	0xdf0b
                    DF0C    550 _RXCTRL0H	=	0xdf0c
                    DF0D    551 _RXCTRL0L	=	0xdf0d
                    DF0E    552 _RXCTRL1H	=	0xdf0e
                    DF0F    553 _RXCTRL1L	=	0xdf0f
                    DF10    554 _FSCTRLH	=	0xdf10
                    DF11    555 _FSCTRLL	=	0xdf11
                    DF12    556 _CSPX	=	0xdf12
                    DF13    557 _CSPY	=	0xdf13
                    DF14    558 _CSPZ	=	0xdf14
                    DF15    559 _CSPCTRL	=	0xdf15
                    DF16    560 _CSPT	=	0xdf16
                    DF17    561 _RFPWR	=	0xdf17
                    DF20    562 _FSMTCH	=	0xdf20
                    DF21    563 _FSMTCL	=	0xdf21
                    DF22    564 _MANANDH	=	0xdf22
                    DF23    565 _MANANDL	=	0xdf23
                    DF24    566 _MANORH	=	0xdf24
                    DF25    567 _MANORL	=	0xdf25
                    DF26    568 _AGCCTRLH	=	0xdf26
                    DF27    569 _AGCCTRLL	=	0xdf27
                    DF39    570 _FSMSTATE	=	0xdf39
                    DF3A    571 _ADCTSTH	=	0xdf3a
                    DF3B    572 _ADCTSTL	=	0xdf3b
                    DF3C    573 _DACTSTH	=	0xdf3c
                    DF3D    574 _DACTSTL	=	0xdf3d
                    DF43    575 _IEEE_ADDR0	=	0xdf43
                    DF44    576 _IEEE_ADDR1	=	0xdf44
                    DF45    577 _IEEE_ADDR2	=	0xdf45
                    DF46    578 _IEEE_ADDR3	=	0xdf46
                    DF47    579 _IEEE_ADDR4	=	0xdf47
                    DF48    580 _IEEE_ADDR5	=	0xdf48
                    DF49    581 _IEEE_ADDR6	=	0xdf49
                    DF4A    582 _IEEE_ADDR7	=	0xdf4a
                    DF4B    583 _PANIDH	=	0xdf4b
                    DF4C    584 _PANIDL	=	0xdf4c
                    DF4D    585 _SHORTADDRH	=	0xdf4d
                    DF4E    586 _SHORTADDRL	=	0xdf4e
                    DF4F    587 _IOCFG0	=	0xdf4f
                    DF50    588 _IOCFG1	=	0xdf50
                    DF51    589 _IOCFG2	=	0xdf51
                    DF52    590 _IOCFG3	=	0xdf52
                    DF53    591 _RXFIFOCNT	=	0xdf53
                    DF54    592 _FSMTC1	=	0xdf54
                    DF60    593 _CHVER	=	0xdf60
                    DF61    594 _CHIPID	=	0xdf61
                    DF62    595 _RFSTATUS	=	0xdf62
                    DFC1    596 _U0BUF_SHADOW	=	0xdfc1
                    DFD9    597 _RFD_SHADOW	=	0xdfd9
                    DFF9    598 _U1BUF_SHADOW	=	0xdff9
                    DFBA    599 _ADC_SHADOW	=	0xdfba
   0000                     600 _lpp_is_on:
   0000                     601 	.ds 1
   0001                     602 _current_packet:
   0001                     603 	.ds 8
   0009                     604 _dutycycle_pt:
   0009                     605 	.ds 2
   000B                     606 _timer:
   000B                     607 	.ds 21
   0020                     608 _queued_packets_memb_memb_count:
   0020                     609 	.ds 4
   0024                     610 _queued_packets_memb_memb_mem:
   0024                     611 	.ds 164
   00C8                     612 _encounter_memb_memb_count:
   00C8                     613 	.ds 4
   00CC                     614 _encounter_memb_memb_mem:
   00CC                     615 	.ds 196
   0190                     616 _stream_probe_timer:
   0190                     617 	.ds 21
   01A5                     618 _stream_off_timer:
   01A5                     619 	.ds 21
                            620 ;--------------------------------------------------------
                            621 ; absolute external ram data
                            622 ;--------------------------------------------------------
                            623 	.area XABS    (ABS,XDATA)
                            624 ;--------------------------------------------------------
                            625 ; external initialized ram data
                            626 ;--------------------------------------------------------
                            627 	.area XISEG   (XDATA)
   0000                     628 _is_listening:
   0000                     629 	.ds 1
   0001                     630 _off_time_adjustment:
   0001                     631 	.ds 2
   0003                     632 _off_time:
   0003                     633 	.ds 2
   0005                     634 _pending_packets_list_list:
   0005                     635 	.ds 3
   0008                     636 _pending_packets_list:
   0008                     637 	.ds 3
   000B                     638 _queued_packets_list_list:
   000B                     639 	.ds 3
   000E                     640 _queued_packets_list:
   000E                     641 	.ds 3
   0011                     642 _queued_packets_memb:
   0011                     643 	.ds 10
   001B                     644 _encounter_list_list:
   001B                     645 	.ds 3
   001E                     646 _encounter_list:
   001E                     647 	.ds 3
   0021                     648 _encounter_memb:
   0021                     649 	.ds 10
   002B                     650 _is_streaming:
   002B                     651 	.ds 1
                            652 	.area HOME    (CODE)
                            653 	.area GSINIT0 (CODE)
                            654 	.area GSINIT1 (CODE)
                            655 	.area GSINIT2 (CODE)
                            656 	.area GSINIT3 (CODE)
                            657 	.area GSINIT4 (CODE)
                            658 	.area GSINIT5 (CODE)
                            659 	.area GSINIT  (CODE)
                            660 	.area GSFINAL (CODE)
                            661 	.area CSEG    (CODE)
                            662 ;--------------------------------------------------------
                            663 ; global & static initialisations
                            664 ;--------------------------------------------------------
                            665 	.area HOME    (CODE)
                            666 	.area GSINIT  (CODE)
                            667 	.area GSFINAL (CODE)
                            668 	.area GSINIT  (CODE)
                            669 ;--------------------------------------------------------
                            670 ; Home
                            671 ;--------------------------------------------------------
                            672 	.area HOME    (CODE)
                            673 	.area HOME    (CODE)
                            674 ;--------------------------------------------------------
                            675 ; code
                            676 ;--------------------------------------------------------
                            677 	.area CSEG    (CODE)
                            678 ;------------------------------------------------------------
                            679 ;Allocation info for local variables in function 'turn_radio_on'
                            680 ;------------------------------------------------------------
                            681 ;	../../core/net/mac/lpp.c:192: turn_radio_on(void)
                            682 ;	-----------------------------------------
                            683 ;	 function turn_radio_on
                            684 ;	-----------------------------------------
   0000                     685 _turn_radio_on:
                    0007    686 	ar7 = 0x07
                    0006    687 	ar6 = 0x06
                    0005    688 	ar5 = 0x05
                    0004    689 	ar4 = 0x04
                    0003    690 	ar3 = 0x03
                    0002    691 	ar2 = 0x02
                    0001    692 	ar1 = 0x01
                    0000    693 	ar0 = 0x00
                            694 ;	../../core/net/mac/lpp.c:194: NETSTACK_RADIO.on();
   0000 90s00r10            695 	mov	dptr,#(_cc2430_rf_driver + 0x0010)
   0003 E4                  696 	clr	a
   0004 93                  697 	movc	a,@a+dptr
   0005 FE                  698 	mov	r6,a
   0006 A3                  699 	inc	dptr
   0007 E4                  700 	clr	a
   0008 93                  701 	movc	a,@a+dptr
   0009 FF                  702 	mov	r7,a
   000A C0 07               703 	push	ar7
   000C C0 06               704 	push	ar6
   000E 8E 82               705 	mov	dpl,r6
   0010 8F 83               706 	mov	dph,r7
   0012 12s00r00            707 	lcall	__sdcc_call_dptr
   0015 D0 06               708 	pop	ar6
   0017 D0 07               709 	pop	ar7
   0019 22                  710 	ret
                            711 ;------------------------------------------------------------
                            712 ;Allocation info for local variables in function 'turn_radio_off'
                            713 ;------------------------------------------------------------
                            714 ;	../../core/net/mac/lpp.c:199: turn_radio_off(void)
                            715 ;	-----------------------------------------
                            716 ;	 function turn_radio_off
                            717 ;	-----------------------------------------
   001A                     718 _turn_radio_off:
                            719 ;	../../core/net/mac/lpp.c:201: if(lpp_is_on && is_streaming == 0) {
   001A 90s00r00            720 	mov	dptr,#_lpp_is_on
   001D E0                  721 	movx	a,@dptr
   001E FF                  722 	mov	r7,a
   001F 60 20               723 	jz	00104$
   0021 90s00r2B            724 	mov	dptr,#_is_streaming
   0024 E0                  725 	movx	a,@dptr
   0025 FF                  726 	mov	r7,a
   0026 70 19               727 	jnz	00104$
                            728 ;	../../core/net/mac/lpp.c:202: NETSTACK_RADIO.off();
   0028 90s00r12            729 	mov	dptr,#(_cc2430_rf_driver + 0x0012)
   002B E4                  730 	clr	a
   002C 93                  731 	movc	a,@a+dptr
   002D FE                  732 	mov	r6,a
   002E A3                  733 	inc	dptr
   002F E4                  734 	clr	a
   0030 93                  735 	movc	a,@a+dptr
   0031 FF                  736 	mov	r7,a
   0032 C0 07               737 	push	ar7
   0034 C0 06               738 	push	ar6
   0036 8E 82               739 	mov	dpl,r6
   0038 8F 83               740 	mov	dph,r7
   003A 12s00r00            741 	lcall	__sdcc_call_dptr
   003D D0 06               742 	pop	ar6
   003F D0 07               743 	pop	ar7
   0041                     744 00104$:
   0041 22                  745 	ret
                            746 ;------------------------------------------------------------
                            747 ;Allocation info for local variables in function 'remove_encounter'
                            748 ;------------------------------------------------------------
                            749 ;encounter                 Allocated to registers r5 r6 r7 
                            750 ;e                         Allocated to stack - _bp +1
                            751 ;------------------------------------------------------------
                            752 ;	../../core/net/mac/lpp.c:208: remove_encounter(void *encounter)
                            753 ;	-----------------------------------------
                            754 ;	 function remove_encounter
                            755 ;	-----------------------------------------
   0042                     756 _remove_encounter:
   0042 C0*00               757 	push	_bp
   0044 85 81*00            758 	mov	_bp,sp
   0047 05 81               759 	inc	sp
   0049 05 81               760 	inc	sp
   004B 05 81               761 	inc	sp
   004D AD 82               762 	mov	r5,dpl
   004F AE 83               763 	mov	r6,dph
   0051 AF F0               764 	mov	r7,b
                            765 ;	../../core/net/mac/lpp.c:210: struct encounter *e = encounter;
   0053 A8*00               766 	mov	r0,_bp
   0055 08                  767 	inc	r0
   0056 A6 05               768 	mov	@r0,ar5
   0058 08                  769 	inc	r0
   0059 A6 06               770 	mov	@r0,ar6
   005B 08                  771 	inc	r0
   005C A6 07               772 	mov	@r0,ar7
                            773 ;	../../core/net/mac/lpp.c:212: ctimer_stop(&e->remove_timer);
   005E A8*00               774 	mov	r0,_bp
   0060 08                  775 	inc	r0
   0061 74 07               776 	mov	a,#0x07
   0063 26                  777 	add	a,@r0
   0064 FA                  778 	mov	r2,a
   0065 E4                  779 	clr	a
   0066 08                  780 	inc	r0
   0067 36                  781 	addc	a,@r0
   0068 FB                  782 	mov	r3,a
   0069 08                  783 	inc	r0
   006A 86 04               784 	mov	ar4,@r0
   006C 8A 82               785 	mov	dpl,r2
   006E 8B 83               786 	mov	dph,r3
   0070 8C F0               787 	mov	b,r4
   0072 12s00r00            788 	lcall	_ctimer_stop
                            789 ;	../../core/net/mac/lpp.c:213: ctimer_stop(&e->turn_on_radio_timer);
   0075 A8*00               790 	mov	r0,_bp
   0077 08                  791 	inc	r0
   0078 74 1C               792 	mov	a,#0x1C
   007A 26                  793 	add	a,@r0
   007B FA                  794 	mov	r2,a
   007C E4                  795 	clr	a
   007D 08                  796 	inc	r0
   007E 36                  797 	addc	a,@r0
   007F FB                  798 	mov	r3,a
   0080 08                  799 	inc	r0
   0081 86 04               800 	mov	ar4,@r0
   0083 8A 82               801 	mov	dpl,r2
   0085 8B 83               802 	mov	dph,r3
   0087 8C F0               803 	mov	b,r4
   0089 12s00r00            804 	lcall	_ctimer_stop
                            805 ;	../../core/net/mac/lpp.c:214: list_remove(encounter_list, e);
   008C A8*00               806 	mov	r0,_bp
   008E 08                  807 	inc	r0
   008F 86 02               808 	mov	ar2,@r0
   0091 08                  809 	inc	r0
   0092 86 03               810 	mov	ar3,@r0
   0094 08                  811 	inc	r0
   0095 86 04               812 	mov	ar4,@r0
   0097 90s00r1E            813 	mov	dptr,#_encounter_list
   009A E0                  814 	movx	a,@dptr
   009B FD                  815 	mov	r5,a
   009C A3                  816 	inc	dptr
   009D E0                  817 	movx	a,@dptr
   009E FE                  818 	mov	r6,a
   009F A3                  819 	inc	dptr
   00A0 E0                  820 	movx	a,@dptr
   00A1 FF                  821 	mov	r7,a
   00A2 C0 02               822 	push	ar2
   00A4 C0 03               823 	push	ar3
   00A6 C0 04               824 	push	ar4
   00A8 8D 82               825 	mov	dpl,r5
   00AA 8E 83               826 	mov	dph,r6
   00AC 8F F0               827 	mov	b,r7
   00AE 12s00r00            828 	lcall	_list_remove
   00B1 15 81               829 	dec	sp
   00B3 15 81               830 	dec	sp
   00B5 15 81               831 	dec	sp
                            832 ;	../../core/net/mac/lpp.c:215: memb_free(&encounter_memb, e);
   00B7 A8*00               833 	mov	r0,_bp
   00B9 08                  834 	inc	r0
   00BA 86 05               835 	mov	ar5,@r0
   00BC 08                  836 	inc	r0
   00BD 86 06               837 	mov	ar6,@r0
   00BF 08                  838 	inc	r0
   00C0 86 07               839 	mov	ar7,@r0
   00C2 C0 05               840 	push	ar5
   00C4 C0 06               841 	push	ar6
   00C6 C0 07               842 	push	ar7
   00C8 90s00r21            843 	mov	dptr,#_encounter_memb
   00CB 75 F0 00            844 	mov	b,#0x00
   00CE 12s00r00            845 	lcall	_memb_free
   00D1 15 81               846 	dec	sp
   00D3 15 81               847 	dec	sp
   00D5 15 81               848 	dec	sp
   00D7 85*00 81            849 	mov	sp,_bp
   00DA D0*00               850 	pop	_bp
   00DC 22                  851 	ret
                            852 ;------------------------------------------------------------
                            853 ;Allocation info for local variables in function 'register_encounter'
                            854 ;------------------------------------------------------------
                            855 ;time                      Allocated to stack - _bp -4
                            856 ;neighbor                  Allocated to stack - _bp +1
                            857 ;e                         Allocated to stack - _bp +4
                            858 ;------------------------------------------------------------
                            859 ;	../../core/net/mac/lpp.c:219: register_encounter(rimeaddr_t *neighbor, clock_time_t time)
                            860 ;	-----------------------------------------
                            861 ;	 function register_encounter
                            862 ;	-----------------------------------------
   00DD                     863 _register_encounter:
   00DD C0*00               864 	push	_bp
   00DF 85 81*00            865 	mov	_bp,sp
   00E2 C0 82               866 	push	dpl
   00E4 C0 83               867 	push	dph
   00E6 C0 F0               868 	push	b
   00E8 05 81               869 	inc	sp
   00EA 05 81               870 	inc	sp
   00EC 05 81               871 	inc	sp
                            872 ;	../../core/net/mac/lpp.c:224: for(e = list_head(encounter_list); e != NULL; e = list_item_next(e)) {
   00EE 90s00r1E            873 	mov	dptr,#_encounter_list
   00F1 E0                  874 	movx	a,@dptr
   00F2 FA                  875 	mov	r2,a
   00F3 A3                  876 	inc	dptr
   00F4 E0                  877 	movx	a,@dptr
   00F5 FB                  878 	mov	r3,a
   00F6 A3                  879 	inc	dptr
   00F7 E0                  880 	movx	a,@dptr
   00F8 FC                  881 	mov	r4,a
   00F9 8A 82               882 	mov	dpl,r2
   00FB 8B 83               883 	mov	dph,r3
   00FD 8C F0               884 	mov	b,r4
   00FF 12s00r00            885 	lcall	_list_head
   0102 AA 82               886 	mov	r2,dpl
   0104 AB 83               887 	mov	r3,dph
   0106 AC F0               888 	mov	r4,b
   0108 E5*00               889 	mov	a,_bp
   010A 24 04               890 	add	a,#0x04
   010C F8                  891 	mov	r0,a
   010D A6 02               892 	mov	@r0,ar2
   010F 08                  893 	inc	r0
   0110 A6 03               894 	mov	@r0,ar3
   0112 08                  895 	inc	r0
   0113 A6 04               896 	mov	@r0,ar4
   0115                     897 00103$:
   0115 E5*00               898 	mov	a,_bp
   0117 24 04               899 	add	a,#0x04
   0119 F8                  900 	mov	r0,a
   011A E6                  901 	mov	a,@r0
   011B 08                  902 	inc	r0
   011C 46                  903 	orl	a,@r0
   011D 70 03               904 	jnz	00123$
   011F 02s01rE8            905 	ljmp	00106$
   0122                     906 00123$:
                            907 ;	../../core/net/mac/lpp.c:225: if(rimeaddr_cmp(neighbor, &e->neighbor)) {
   0122 E5*00               908 	mov	a,_bp
   0124 24 04               909 	add	a,#0x04
   0126 F8                  910 	mov	r0,a
   0127 74 03               911 	mov	a,#0x03
   0129 26                  912 	add	a,@r0
   012A FD                  913 	mov	r5,a
   012B E4                  914 	clr	a
   012C 08                  915 	inc	r0
   012D 36                  916 	addc	a,@r0
   012E FE                  917 	mov	r6,a
   012F 08                  918 	inc	r0
   0130 86 07               919 	mov	ar7,@r0
   0132 C0 05               920 	push	ar5
   0134 C0 06               921 	push	ar6
   0136 C0 07               922 	push	ar7
   0138 A8*00               923 	mov	r0,_bp
   013A 08                  924 	inc	r0
   013B 86 82               925 	mov	dpl,@r0
   013D 08                  926 	inc	r0
   013E 86 83               927 	mov	dph,@r0
   0140 08                  928 	inc	r0
   0141 86 F0               929 	mov	b,@r0
   0143 12s00r00            930 	lcall	_rimeaddr_cmp
   0146 AE 82               931 	mov	r6,dpl
   0148 AF 83               932 	mov	r7,dph
   014A 15 81               933 	dec	sp
   014C 15 81               934 	dec	sp
   014E 15 81               935 	dec	sp
   0150 EE                  936 	mov	a,r6
   0151 4F                  937 	orl	a,r7
   0152 60 68               938 	jz	00105$
                            939 ;	../../core/net/mac/lpp.c:226: e->time = time;
   0154 E5*00               940 	mov	a,_bp
   0156 24 04               941 	add	a,#0x04
   0158 F8                  942 	mov	r0,a
   0159 74 05               943 	mov	a,#0x05
   015B 26                  944 	add	a,@r0
   015C FD                  945 	mov	r5,a
   015D E4                  946 	clr	a
   015E 08                  947 	inc	r0
   015F 36                  948 	addc	a,@r0
   0160 FE                  949 	mov	r6,a
   0161 08                  950 	inc	r0
   0162 86 07               951 	mov	ar7,@r0
   0164 8D 82               952 	mov	dpl,r5
   0166 8E 83               953 	mov	dph,r6
   0168 8F F0               954 	mov	b,r7
   016A E5*00               955 	mov	a,_bp
   016C 24 FC               956 	add	a,#0xfc
   016E F8                  957 	mov	r0,a
   016F E6                  958 	mov	a,@r0
   0170 12s00r00            959 	lcall	__gptrput
   0173 A3                  960 	inc	dptr
   0174 08                  961 	inc	r0
   0175 E6                  962 	mov	a,@r0
   0176 12s00r00            963 	lcall	__gptrput
                            964 ;	../../core/net/mac/lpp.c:227: ctimer_set(&e->remove_timer, ENCOUNTER_LIFETIME, remove_encounter, e);
   0179 E5*00               965 	mov	a,_bp
   017B 24 04               966 	add	a,#0x04
   017D F8                  967 	mov	r0,a
   017E 86 05               968 	mov	ar5,@r0
   0180 08                  969 	inc	r0
   0181 86 06               970 	mov	ar6,@r0
   0183 08                  971 	inc	r0
   0184 86 07               972 	mov	ar7,@r0
   0186 E5*00               973 	mov	a,_bp
   0188 24 04               974 	add	a,#0x04
   018A F8                  975 	mov	r0,a
   018B 74 07               976 	mov	a,#0x07
   018D 26                  977 	add	a,@r0
   018E FA                  978 	mov	r2,a
   018F E4                  979 	clr	a
   0190 08                  980 	inc	r0
   0191 36                  981 	addc	a,@r0
   0192 FB                  982 	mov	r3,a
   0193 08                  983 	inc	r0
   0194 86 04               984 	mov	ar4,@r0
   0196 C0 05               985 	push	ar5
   0198 C0 06               986 	push	ar6
   019A C0 07               987 	push	ar7
   019C 74r42               988 	mov	a,#_remove_encounter
   019E C0 E0               989 	push	acc
   01A0 74s00               990 	mov	a,#(_remove_encounter >> 8)
   01A2 C0 E0               991 	push	acc
   01A4 74 F0               992 	mov	a,#0xF0
   01A6 C0 E0               993 	push	acc
   01A8 E4                  994 	clr	a
   01A9 C0 E0               995 	push	acc
   01AB 8A 82               996 	mov	dpl,r2
   01AD 8B 83               997 	mov	dph,r3
   01AF 8C F0               998 	mov	b,r4
   01B1 12s00r00            999 	lcall	_ctimer_set
   01B4 E5 81              1000 	mov	a,sp
   01B6 24 F9              1001 	add	a,#0xf9
   01B8 F5 81              1002 	mov	sp,a
                           1003 ;	../../core/net/mac/lpp.c:228: break;
   01BA 80 2C              1004 	sjmp	00106$
   01BC                    1005 00105$:
                           1006 ;	../../core/net/mac/lpp.c:224: for(e = list_head(encounter_list); e != NULL; e = list_item_next(e)) {
   01BC E5*00              1007 	mov	a,_bp
   01BE 24 04              1008 	add	a,#0x04
   01C0 F8                 1009 	mov	r0,a
   01C1 86 02              1010 	mov	ar2,@r0
   01C3 08                 1011 	inc	r0
   01C4 86 03              1012 	mov	ar3,@r0
   01C6 08                 1013 	inc	r0
   01C7 86 04              1014 	mov	ar4,@r0
   01C9 8A 82              1015 	mov	dpl,r2
   01CB 8B 83              1016 	mov	dph,r3
   01CD 8C F0              1017 	mov	b,r4
   01CF 12s00r00           1018 	lcall	_list_item_next
   01D2 AD 82              1019 	mov	r5,dpl
   01D4 AE 83              1020 	mov	r6,dph
   01D6 AF F0              1021 	mov	r7,b
   01D8 E5*00              1022 	mov	a,_bp
   01DA 24 04              1023 	add	a,#0x04
   01DC F8                 1024 	mov	r0,a
   01DD A6 05              1025 	mov	@r0,ar5
   01DF 08                 1026 	inc	r0
   01E0 A6 06              1027 	mov	@r0,ar6
   01E2 08                 1028 	inc	r0
   01E3 A6 07              1029 	mov	@r0,ar7
   01E5 02s01r15           1030 	ljmp	00103$
   01E8                    1031 00106$:
                           1032 ;	../../core/net/mac/lpp.c:232: if(e == NULL) {
   01E8 E5*00              1033 	mov	a,_bp
   01EA 24 04              1034 	add	a,#0x04
   01EC F8                 1035 	mov	r0,a
   01ED E6                 1036 	mov	a,@r0
   01EE 08                 1037 	inc	r0
   01EF 46                 1038 	orl	a,@r0
   01F0 60 03              1039 	jz	00125$
   01F2 02s02rDE           1040 	ljmp	00111$
   01F5                    1041 00125$:
                           1042 ;	../../core/net/mac/lpp.c:233: e = memb_alloc(&encounter_memb);
   01F5 90s00r21           1043 	mov	dptr,#_encounter_memb
   01F8 75 F0 00           1044 	mov	b,#0x00
   01FB 12s00r00           1045 	lcall	_memb_alloc
   01FE AD 82              1046 	mov	r5,dpl
   0200 AE 83              1047 	mov	r6,dph
   0202 AF F0              1048 	mov	r7,b
   0204 E5*00              1049 	mov	a,_bp
   0206 24 04              1050 	add	a,#0x04
   0208 F8                 1051 	mov	r0,a
   0209 A6 05              1052 	mov	@r0,ar5
   020B 08                 1053 	inc	r0
   020C A6 06              1054 	mov	@r0,ar6
   020E 08                 1055 	inc	r0
   020F A6 07              1056 	mov	@r0,ar7
                           1057 ;	../../core/net/mac/lpp.c:234: if(e == NULL) {
   0211 E5*00              1058 	mov	a,_bp
   0213 24 04              1059 	add	a,#0x04
   0215 F8                 1060 	mov	r0,a
   0216 E6                 1061 	mov	a,@r0
   0217 08                 1062 	inc	r0
   0218 46                 1063 	orl	a,@r0
   0219 70 03              1064 	jnz	00108$
                           1065 ;	../../core/net/mac/lpp.c:236: return;
   021B 02s02rDE           1066 	ljmp	00111$
   021E                    1067 00108$:
                           1068 ;	../../core/net/mac/lpp.c:238: rimeaddr_copy(&e->neighbor, neighbor);
   021E E5*00              1069 	mov	a,_bp
   0220 24 04              1070 	add	a,#0x04
   0222 F8                 1071 	mov	r0,a
   0223 74 03              1072 	mov	a,#0x03
   0225 26                 1073 	add	a,@r0
   0226 FD                 1074 	mov	r5,a
   0227 E4                 1075 	clr	a
   0228 08                 1076 	inc	r0
   0229 36                 1077 	addc	a,@r0
   022A FE                 1078 	mov	r6,a
   022B 08                 1079 	inc	r0
   022C 86 07              1080 	mov	ar7,@r0
   022E A8*00              1081 	mov	r0,_bp
   0230 08                 1082 	inc	r0
   0231 E6                 1083 	mov	a,@r0
   0232 C0 E0              1084 	push	acc
   0234 08                 1085 	inc	r0
   0235 E6                 1086 	mov	a,@r0
   0236 C0 E0              1087 	push	acc
   0238 08                 1088 	inc	r0
   0239 E6                 1089 	mov	a,@r0
   023A C0 E0              1090 	push	acc
   023C 8D 82              1091 	mov	dpl,r5
   023E 8E 83              1092 	mov	dph,r6
   0240 8F F0              1093 	mov	b,r7
   0242 12s00r00           1094 	lcall	_rimeaddr_copy
   0245 15 81              1095 	dec	sp
   0247 15 81              1096 	dec	sp
   0249 15 81              1097 	dec	sp
                           1098 ;	../../core/net/mac/lpp.c:239: e->time = time;
   024B E5*00              1099 	mov	a,_bp
   024D 24 04              1100 	add	a,#0x04
   024F F8                 1101 	mov	r0,a
   0250 74 05              1102 	mov	a,#0x05
   0252 26                 1103 	add	a,@r0
   0253 FD                 1104 	mov	r5,a
   0254 E4                 1105 	clr	a
   0255 08                 1106 	inc	r0
   0256 36                 1107 	addc	a,@r0
   0257 FE                 1108 	mov	r6,a
   0258 08                 1109 	inc	r0
   0259 86 07              1110 	mov	ar7,@r0
   025B 8D 82              1111 	mov	dpl,r5
   025D 8E 83              1112 	mov	dph,r6
   025F 8F F0              1113 	mov	b,r7
   0261 E5*00              1114 	mov	a,_bp
   0263 24 FC              1115 	add	a,#0xfc
   0265 F8                 1116 	mov	r0,a
   0266 E6                 1117 	mov	a,@r0
   0267 12s00r00           1118 	lcall	__gptrput
   026A A3                 1119 	inc	dptr
   026B 08                 1120 	inc	r0
   026C E6                 1121 	mov	a,@r0
   026D 12s00r00           1122 	lcall	__gptrput
                           1123 ;	../../core/net/mac/lpp.c:240: ctimer_set(&e->remove_timer, ENCOUNTER_LIFETIME, remove_encounter, e);
   0270 E5*00              1124 	mov	a,_bp
   0272 24 04              1125 	add	a,#0x04
   0274 F8                 1126 	mov	r0,a
   0275 86 02              1127 	mov	ar2,@r0
   0277 08                 1128 	inc	r0
   0278 86 03              1129 	mov	ar3,@r0
   027A 08                 1130 	inc	r0
   027B 86 04              1131 	mov	ar4,@r0
   027D E5*00              1132 	mov	a,_bp
   027F 24 04              1133 	add	a,#0x04
   0281 F8                 1134 	mov	r0,a
   0282 74 07              1135 	mov	a,#0x07
   0284 26                 1136 	add	a,@r0
   0285 FD                 1137 	mov	r5,a
   0286 E4                 1138 	clr	a
   0287 08                 1139 	inc	r0
   0288 36                 1140 	addc	a,@r0
   0289 FE                 1141 	mov	r6,a
   028A 08                 1142 	inc	r0
   028B 86 07              1143 	mov	ar7,@r0
   028D C0 02              1144 	push	ar2
   028F C0 03              1145 	push	ar3
   0291 C0 04              1146 	push	ar4
   0293 74r42              1147 	mov	a,#_remove_encounter
   0295 C0 E0              1148 	push	acc
   0297 74s00              1149 	mov	a,#(_remove_encounter >> 8)
   0299 C0 E0              1150 	push	acc
   029B 74 F0              1151 	mov	a,#0xF0
   029D C0 E0              1152 	push	acc
   029F E4                 1153 	clr	a
   02A0 C0 E0              1154 	push	acc
   02A2 8D 82              1155 	mov	dpl,r5
   02A4 8E 83              1156 	mov	dph,r6
   02A6 8F F0              1157 	mov	b,r7
   02A8 12s00r00           1158 	lcall	_ctimer_set
   02AB E5 81              1159 	mov	a,sp
   02AD 24 F9              1160 	add	a,#0xf9
   02AF F5 81              1161 	mov	sp,a
                           1162 ;	../../core/net/mac/lpp.c:241: list_add(encounter_list, e);
   02B1 E5*00              1163 	mov	a,_bp
   02B3 24 04              1164 	add	a,#0x04
   02B5 F8                 1165 	mov	r0,a
   02B6 86 02              1166 	mov	ar2,@r0
   02B8 08                 1167 	inc	r0
   02B9 86 03              1168 	mov	ar3,@r0
   02BB 08                 1169 	inc	r0
   02BC 86 04              1170 	mov	ar4,@r0
   02BE 90s00r1E           1171 	mov	dptr,#_encounter_list
   02C1 E0                 1172 	movx	a,@dptr
   02C2 FD                 1173 	mov	r5,a
   02C3 A3                 1174 	inc	dptr
   02C4 E0                 1175 	movx	a,@dptr
   02C5 FE                 1176 	mov	r6,a
   02C6 A3                 1177 	inc	dptr
   02C7 E0                 1178 	movx	a,@dptr
   02C8 FF                 1179 	mov	r7,a
   02C9 C0 02              1180 	push	ar2
   02CB C0 03              1181 	push	ar3
   02CD C0 04              1182 	push	ar4
   02CF 8D 82              1183 	mov	dpl,r5
   02D1 8E 83              1184 	mov	dph,r6
   02D3 8F F0              1185 	mov	b,r7
   02D5 12s00r00           1186 	lcall	_list_add
   02D8 15 81              1187 	dec	sp
   02DA 15 81              1188 	dec	sp
   02DC 15 81              1189 	dec	sp
   02DE                    1190 00111$:
   02DE 85*00 81           1191 	mov	sp,_bp
   02E1 D0*00              1192 	pop	_bp
   02E3 22                 1193 	ret
                           1194 ;------------------------------------------------------------
                           1195 ;Allocation info for local variables in function 'stream_off'
                           1196 ;------------------------------------------------------------
                           1197 ;dummy                     Allocated to registers 
                           1198 ;------------------------------------------------------------
                           1199 ;	../../core/net/mac/lpp.c:262: stream_off(void *dummy)
                           1200 ;	-----------------------------------------
                           1201 ;	 function stream_off
                           1202 ;	-----------------------------------------
   02E4                    1203 _stream_off:
                           1204 ;	../../core/net/mac/lpp.c:264: is_streaming = 0;
   02E4 90s00r2B           1205 	mov	dptr,#_is_streaming
   02E7 E4                 1206 	clr	a
   02E8 F0                 1207 	movx	@dptr,a
   02E9 22                 1208 	ret
                           1209 ;------------------------------------------------------------
                           1210 ;Allocation info for local variables in function 'turn_radio_on_for_neighbor'
                           1211 ;------------------------------------------------------------
                           1212 ;i                         Allocated to stack - _bp -5
                           1213 ;neighbor                  Allocated to registers r5 r6 r7 
                           1214 ;sloc0                     Allocated to stack - _bp +4
                           1215 ;------------------------------------------------------------
                           1216 ;	../../core/net/mac/lpp.c:277: turn_radio_on_for_neighbor(rimeaddr_t *neighbor, struct queue_list_item *i)
                           1217 ;	-----------------------------------------
                           1218 ;	 function turn_radio_on_for_neighbor
                           1219 ;	-----------------------------------------
   02EA                    1220 _turn_radio_on_for_neighbor:
   02EA C0*00              1221 	push	_bp
   02EC 85 81*00           1222 	mov	_bp,sp
   02EF AD 82              1223 	mov	r5,dpl
   02F1 AE 83              1224 	mov	r6,dph
   02F3 AF F0              1225 	mov	r7,b
                           1226 ;	../../core/net/mac/lpp.c:281: if(packetbuf_attr(PACKETBUF_ATTR_PACKET_TYPE) ==
   02F5 75 82 0E           1227 	mov	dpl,#0x0E
   02F8 C0 07              1228 	push	ar7
   02FA C0 06              1229 	push	ar6
   02FC C0 05              1230 	push	ar5
   02FE 12s00r00           1231 	lcall	_packetbuf_attr
   0301 AB 82              1232 	mov	r3,dpl
   0303 AC 83              1233 	mov	r4,dph
   0305 D0 05              1234 	pop	ar5
   0307 D0 06              1235 	pop	ar6
   0309 D0 07              1236 	pop	ar7
   030B BB 02 61           1237 	cjne	r3,#0x02,00102$
   030E BC 00 5E           1238 	cjne	r4,#0x00,00102$
                           1239 ;	../../core/net/mac/lpp.c:283: is_streaming = 1;
   0311 90s00r2B           1240 	mov	dptr,#_is_streaming
   0314 74 01              1241 	mov	a,#0x01
   0316 F0                 1242 	movx	@dptr,a
                           1243 ;	../../core/net/mac/lpp.c:284: turn_radio_on();
   0317 12s00r00           1244 	lcall	_turn_radio_on
                           1245 ;	../../core/net/mac/lpp.c:285: list_add(queued_packets_list, i);
   031A E5*00              1246 	mov	a,_bp
   031C 24 FB              1247 	add	a,#0xfb
   031E F8                 1248 	mov	r0,a
   031F 86 07              1249 	mov	ar7,@r0
   0321 08                 1250 	inc	r0
   0322 86 06              1251 	mov	ar6,@r0
   0324 08                 1252 	inc	r0
   0325 86 05              1253 	mov	ar5,@r0
   0327 90s00r0E           1254 	mov	dptr,#_queued_packets_list
   032A E0                 1255 	movx	a,@dptr
   032B FA                 1256 	mov	r2,a
   032C A3                 1257 	inc	dptr
   032D E0                 1258 	movx	a,@dptr
   032E FB                 1259 	mov	r3,a
   032F A3                 1260 	inc	dptr
   0330 E0                 1261 	movx	a,@dptr
   0331 FC                 1262 	mov	r4,a
   0332 C0 07              1263 	push	ar7
   0334 C0 06              1264 	push	ar6
   0336 C0 05              1265 	push	ar5
   0338 8A 82              1266 	mov	dpl,r2
   033A 8B 83              1267 	mov	dph,r3
   033C 8C F0              1268 	mov	b,r4
   033E 12s00r00           1269 	lcall	_list_add
   0341 15 81              1270 	dec	sp
   0343 15 81              1271 	dec	sp
   0345 15 81              1272 	dec	sp
                           1273 ;	../../core/net/mac/lpp.c:286: ctimer_set(&stream_off_timer, STREAM_OFF_TIME,
   0347 E4                 1274 	clr	a
   0348 C0 E0              1275 	push	acc
   034A C0 E0              1276 	push	acc
   034C C0 E0              1277 	push	acc
   034E 74rE4              1278 	mov	a,#_stream_off
   0350 C0 E0              1279 	push	acc
   0352 74s02              1280 	mov	a,#(_stream_off >> 8)
   0354 C0 E0              1281 	push	acc
   0356 74 40              1282 	mov	a,#0x40
   0358 C0 E0              1283 	push	acc
   035A E4                 1284 	clr	a
   035B C0 E0              1285 	push	acc
   035D 90s01rA5           1286 	mov	dptr,#_stream_off_timer
   0360 75 F0 00           1287 	mov	b,#0x00
   0363 12s00r00           1288 	lcall	_ctimer_set
   0366 E5 81              1289 	mov	a,sp
   0368 24 F9              1290 	add	a,#0xf9
   036A F5 81              1291 	mov	sp,a
                           1292 ;	../../core/net/mac/lpp.c:288: return;
   036C 02s03rF4           1293 	ljmp	00105$
   036F                    1294 00102$:
                           1295 ;	../../core/net/mac/lpp.c:292: if(rimeaddr_cmp(neighbor, &rimeaddr_null)) {
   036F 74r00              1296 	mov	a,#_rimeaddr_null
   0371 C0 E0              1297 	push	acc
   0373 74s00              1298 	mov	a,#(_rimeaddr_null >> 8)
   0375 C0 E0              1299 	push	acc
   0377 74 80              1300 	mov	a,#0x80
   0379 C0 E0              1301 	push	acc
   037B 8D 82              1302 	mov	dpl,r5
   037D 8E 83              1303 	mov	dph,r6
   037F 8F F0              1304 	mov	b,r7
   0381 12s00r00           1305 	lcall	_rimeaddr_cmp
   0384 AE 82              1306 	mov	r6,dpl
   0386 AF 83              1307 	mov	r7,dph
   0388 15 81              1308 	dec	sp
   038A 15 81              1309 	dec	sp
   038C 15 81              1310 	dec	sp
   038E EE                 1311 	mov	a,r6
   038F 4F                 1312 	orl	a,r7
   0390 60 32              1313 	jz	00104$
                           1314 ;	../../core/net/mac/lpp.c:296: turn_radio_on();
   0392 12s00r00           1315 	lcall	_turn_radio_on
                           1316 ;	../../core/net/mac/lpp.c:298: list_add(queued_packets_list, i);
   0395 E5*00              1317 	mov	a,_bp
   0397 24 FB              1318 	add	a,#0xfb
   0399 F8                 1319 	mov	r0,a
   039A 86 05              1320 	mov	ar5,@r0
   039C 08                 1321 	inc	r0
   039D 86 06              1322 	mov	ar6,@r0
   039F 08                 1323 	inc	r0
   03A0 86 07              1324 	mov	ar7,@r0
   03A2 90s00r0E           1325 	mov	dptr,#_queued_packets_list
   03A5 E0                 1326 	movx	a,@dptr
   03A6 FA                 1327 	mov	r2,a
   03A7 A3                 1328 	inc	dptr
   03A8 E0                 1329 	movx	a,@dptr
   03A9 FB                 1330 	mov	r3,a
   03AA A3                 1331 	inc	dptr
   03AB E0                 1332 	movx	a,@dptr
   03AC FC                 1333 	mov	r4,a
   03AD C0 05              1334 	push	ar5
   03AF C0 06              1335 	push	ar6
   03B1 C0 07              1336 	push	ar7
   03B3 8A 82              1337 	mov	dpl,r2
   03B5 8B 83              1338 	mov	dph,r3
   03B7 8C F0              1339 	mov	b,r4
   03B9 12s00r00           1340 	lcall	_list_add
   03BC 15 81              1341 	dec	sp
   03BE 15 81              1342 	dec	sp
   03C0 15 81              1343 	dec	sp
                           1344 ;	../../core/net/mac/lpp.c:299: return;
   03C2 80 30              1345 	sjmp	00105$
   03C4                    1346 00104$:
                           1347 ;	../../core/net/mac/lpp.c:347: turn_radio_on();
   03C4 12s00r00           1348 	lcall	_turn_radio_on
                           1349 ;	../../core/net/mac/lpp.c:348: list_add(queued_packets_list, i);
   03C7 E5*00              1350 	mov	a,_bp
   03C9 24 FB              1351 	add	a,#0xfb
   03CB F8                 1352 	mov	r0,a
   03CC 86 05              1353 	mov	ar5,@r0
   03CE 08                 1354 	inc	r0
   03CF 86 06              1355 	mov	ar6,@r0
   03D1 08                 1356 	inc	r0
   03D2 86 07              1357 	mov	ar7,@r0
   03D4 90s00r0E           1358 	mov	dptr,#_queued_packets_list
   03D7 E0                 1359 	movx	a,@dptr
   03D8 FA                 1360 	mov	r2,a
   03D9 A3                 1361 	inc	dptr
   03DA E0                 1362 	movx	a,@dptr
   03DB FB                 1363 	mov	r3,a
   03DC A3                 1364 	inc	dptr
   03DD E0                 1365 	movx	a,@dptr
   03DE FC                 1366 	mov	r4,a
   03DF C0 05              1367 	push	ar5
   03E1 C0 06              1368 	push	ar6
   03E3 C0 07              1369 	push	ar7
   03E5 8A 82              1370 	mov	dpl,r2
   03E7 8B 83              1371 	mov	dph,r3
   03E9 8C F0              1372 	mov	b,r4
   03EB 12s00r00           1373 	lcall	_list_add
   03EE 15 81              1374 	dec	sp
   03F0 15 81              1375 	dec	sp
   03F2 15 81              1376 	dec	sp
                           1377 ;	../../core/net/mac/lpp.c:349: return;
   03F4                    1378 00105$:
   03F4 D0*00              1379 	pop	_bp
   03F6 22                 1380 	ret
                           1381 ;------------------------------------------------------------
                           1382 ;Allocation info for local variables in function 'remove_queued_packet'
                           1383 ;------------------------------------------------------------
                           1384 ;tx_ok                     Allocated to stack - _bp -3
                           1385 ;i                         Allocated to stack - _bp +1
                           1386 ;sent                      Allocated to stack - _bp +4
                           1387 ;ptr                       Allocated to stack - _bp +6
                           1388 ;num_transmissions         Allocated to registers r2 r7 
                           1389 ;status                    Allocated to registers r5 r6 
                           1390 ;------------------------------------------------------------
                           1391 ;	../../core/net/mac/lpp.c:353: remove_queued_packet(struct queue_list_item *i, uint8_t tx_ok)
                           1392 ;	-----------------------------------------
                           1393 ;	 function remove_queued_packet
                           1394 ;	-----------------------------------------
   03F7                    1395 _remove_queued_packet:
   03F7 C0*00              1396 	push	_bp
   03F9 85 81*00           1397 	mov	_bp,sp
   03FC C0 82              1398 	push	dpl
   03FE C0 83              1399 	push	dph
   0400 C0 F0              1400 	push	b
   0402 E5 81              1401 	mov	a,sp
   0404 24 05              1402 	add	a,#0x05
   0406 F5 81              1403 	mov	sp,a
                           1404 ;	../../core/net/mac/lpp.c:364: queuebuf_to_packetbuf(i->packet);
   0408 A8*00              1405 	mov	r0,_bp
   040A 08                 1406 	inc	r0
   040B 74 03              1407 	mov	a,#0x03
   040D 26                 1408 	add	a,@r0
   040E FA                 1409 	mov	r2,a
   040F E4                 1410 	clr	a
   0410 08                 1411 	inc	r0
   0411 36                 1412 	addc	a,@r0
   0412 FB                 1413 	mov	r3,a
   0413 08                 1414 	inc	r0
   0414 86 04              1415 	mov	ar4,@r0
   0416 8A 82              1416 	mov	dpl,r2
   0418 8B 83              1417 	mov	dph,r3
   041A 8C F0              1418 	mov	b,r4
   041C 12s00r00           1419 	lcall	__gptrget
   041F FD                 1420 	mov	r5,a
   0420 A3                 1421 	inc	dptr
   0421 12s00r00           1422 	lcall	__gptrget
   0424 FE                 1423 	mov	r6,a
   0425 A3                 1424 	inc	dptr
   0426 12s00r00           1425 	lcall	__gptrget
   0429 FF                 1426 	mov	r7,a
   042A 8D 82              1427 	mov	dpl,r5
   042C 8E 83              1428 	mov	dph,r6
   042E 8F F0              1429 	mov	b,r7
   0430 C0 04              1430 	push	ar4
   0432 C0 03              1431 	push	ar3
   0434 C0 02              1432 	push	ar2
   0436 12s00r00           1433 	lcall	_queuebuf_to_packetbuf
                           1434 ;	../../core/net/mac/lpp.c:366: ctimer_stop(&i->removal_timer);
   0439 A8*00              1435 	mov	r0,_bp
   043B 08                 1436 	inc	r0
   043C 74 06              1437 	mov	a,#0x06
   043E 26                 1438 	add	a,@r0
   043F FD                 1439 	mov	r5,a
   0440 E4                 1440 	clr	a
   0441 08                 1441 	inc	r0
   0442 36                 1442 	addc	a,@r0
   0443 FE                 1443 	mov	r6,a
   0444 08                 1444 	inc	r0
   0445 86 07              1445 	mov	ar7,@r0
   0447 8D 82              1446 	mov	dpl,r5
   0449 8E 83              1447 	mov	dph,r6
   044B 8F F0              1448 	mov	b,r7
   044D 12s00r00           1449 	lcall	_ctimer_stop
   0450 D0 02              1450 	pop	ar2
   0452 D0 03              1451 	pop	ar3
   0454 D0 04              1452 	pop	ar4
                           1453 ;	../../core/net/mac/lpp.c:367: queuebuf_free(i->packet);
   0456 8A 82              1454 	mov	dpl,r2
   0458 8B 83              1455 	mov	dph,r3
   045A 8C F0              1456 	mov	b,r4
   045C 12s00r00           1457 	lcall	__gptrget
   045F FA                 1458 	mov	r2,a
   0460 A3                 1459 	inc	dptr
   0461 12s00r00           1460 	lcall	__gptrget
   0464 FB                 1461 	mov	r3,a
   0465 A3                 1462 	inc	dptr
   0466 12s00r00           1463 	lcall	__gptrget
   0469 FC                 1464 	mov	r4,a
   046A 8A 82              1465 	mov	dpl,r2
   046C 8B 83              1466 	mov	dph,r3
   046E 8C F0              1467 	mov	b,r4
   0470 12s00r00           1468 	lcall	_queuebuf_free
                           1469 ;	../../core/net/mac/lpp.c:368: list_remove(pending_packets_list, i);
   0473 A8*00              1470 	mov	r0,_bp
   0475 08                 1471 	inc	r0
   0476 86 05              1472 	mov	ar5,@r0
   0478 08                 1473 	inc	r0
   0479 86 06              1474 	mov	ar6,@r0
   047B 08                 1475 	inc	r0
   047C 86 07              1476 	mov	ar7,@r0
   047E 90s00r08           1477 	mov	dptr,#_pending_packets_list
   0481 E0                 1478 	movx	a,@dptr
   0482 FA                 1479 	mov	r2,a
   0483 A3                 1480 	inc	dptr
   0484 E0                 1481 	movx	a,@dptr
   0485 FB                 1482 	mov	r3,a
   0486 A3                 1483 	inc	dptr
   0487 E0                 1484 	movx	a,@dptr
   0488 FC                 1485 	mov	r4,a
   0489 C0 05              1486 	push	ar5
   048B C0 06              1487 	push	ar6
   048D C0 07              1488 	push	ar7
   048F 8A 82              1489 	mov	dpl,r2
   0491 8B 83              1490 	mov	dph,r3
   0493 8C F0              1491 	mov	b,r4
   0495 12s00r00           1492 	lcall	_list_remove
   0498 15 81              1493 	dec	sp
   049A 15 81              1494 	dec	sp
   049C 15 81              1495 	dec	sp
                           1496 ;	../../core/net/mac/lpp.c:369: list_remove(queued_packets_list, i);
   049E A8*00              1497 	mov	r0,_bp
   04A0 08                 1498 	inc	r0
   04A1 86 05              1499 	mov	ar5,@r0
   04A3 08                 1500 	inc	r0
   04A4 86 06              1501 	mov	ar6,@r0
   04A6 08                 1502 	inc	r0
   04A7 86 07              1503 	mov	ar7,@r0
   04A9 90s00r0E           1504 	mov	dptr,#_queued_packets_list
   04AC E0                 1505 	movx	a,@dptr
   04AD FA                 1506 	mov	r2,a
   04AE A3                 1507 	inc	dptr
   04AF E0                 1508 	movx	a,@dptr
   04B0 FB                 1509 	mov	r3,a
   04B1 A3                 1510 	inc	dptr
   04B2 E0                 1511 	movx	a,@dptr
   04B3 FC                 1512 	mov	r4,a
   04B4 C0 05              1513 	push	ar5
   04B6 C0 06              1514 	push	ar6
   04B8 C0 07              1515 	push	ar7
   04BA 8A 82              1516 	mov	dpl,r2
   04BC 8B 83              1517 	mov	dph,r3
   04BE 8C F0              1518 	mov	b,r4
   04C0 12s00r00           1519 	lcall	_list_remove
   04C3 15 81              1520 	dec	sp
   04C5 15 81              1521 	dec	sp
   04C7 15 81              1522 	dec	sp
                           1523 ;	../../core/net/mac/lpp.c:372: if(list_length(queued_packets_list) == 0 && is_listening == 0) {
   04C9 90s00r0E           1524 	mov	dptr,#_queued_packets_list
   04CC E0                 1525 	movx	a,@dptr
   04CD FD                 1526 	mov	r5,a
   04CE A3                 1527 	inc	dptr
   04CF E0                 1528 	movx	a,@dptr
   04D0 FE                 1529 	mov	r6,a
   04D1 A3                 1530 	inc	dptr
   04D2 E0                 1531 	movx	a,@dptr
   04D3 FF                 1532 	mov	r7,a
   04D4 8D 82              1533 	mov	dpl,r5
   04D6 8E 83              1534 	mov	dph,r6
   04D8 8F F0              1535 	mov	b,r7
   04DA 12s00r00           1536 	lcall	_list_length
   04DD E5 82              1537 	mov	a,dpl
   04DF 85 83 F0           1538 	mov	b,dph
   04E2 45 F0              1539 	orl	a,b
   04E4 70 21              1540 	jnz	00102$
   04E6 90s00r00           1541 	mov	dptr,#_is_listening
   04E9 E0                 1542 	movx	a,@dptr
   04EA FF                 1543 	mov	r7,a
   04EB 70 1A              1544 	jnz	00102$
                           1545 ;	../../core/net/mac/lpp.c:373: turn_radio_off();
   04ED 12s00r1A           1546 	lcall	_turn_radio_off
                           1547 ;	../../core/net/mac/lpp.c:374: compower_accumulate(&i->compower);
   04F0 A8*00              1548 	mov	r0,_bp
   04F2 08                 1549 	inc	r0
   04F3 74 1B              1550 	mov	a,#0x1B
   04F5 26                 1551 	add	a,@r0
   04F6 FD                 1552 	mov	r5,a
   04F7 E4                 1553 	clr	a
   04F8 08                 1554 	inc	r0
   04F9 36                 1555 	addc	a,@r0
   04FA FE                 1556 	mov	r6,a
   04FB 08                 1557 	inc	r0
   04FC 86 07              1558 	mov	ar7,@r0
   04FE 8D 82              1559 	mov	dpl,r5
   0500 8E 83              1560 	mov	dph,r6
   0502 8F F0              1561 	mov	b,r7
   0504 12s00r00           1562 	lcall	_compower_accumulate
   0507                    1563 00102$:
                           1564 ;	../../core/net/mac/lpp.c:377: sent = i->sent_callback;
   0507 A8*00              1565 	mov	r0,_bp
   0509 08                 1566 	inc	r0
   050A 74 23              1567 	mov	a,#0x23
   050C 26                 1568 	add	a,@r0
   050D FD                 1569 	mov	r5,a
   050E E4                 1570 	clr	a
   050F 08                 1571 	inc	r0
   0510 36                 1572 	addc	a,@r0
   0511 FE                 1573 	mov	r6,a
   0512 08                 1574 	inc	r0
   0513 86 07              1575 	mov	ar7,@r0
   0515 8D 82              1576 	mov	dpl,r5
   0517 8E 83              1577 	mov	dph,r6
   0519 8F F0              1578 	mov	b,r7
   051B 12s00r00           1579 	lcall	__gptrget
   051E FD                 1580 	mov	r5,a
   051F A3                 1581 	inc	dptr
   0520 12s00r00           1582 	lcall	__gptrget
   0523 FE                 1583 	mov	r6,a
   0524 E5*00              1584 	mov	a,_bp
   0526 24 04              1585 	add	a,#0x04
   0528 F8                 1586 	mov	r0,a
   0529 A6 05              1587 	mov	@r0,ar5
   052B 08                 1588 	inc	r0
   052C A6 06              1589 	mov	@r0,ar6
                           1590 ;	../../core/net/mac/lpp.c:378: ptr = i->sent_callback_ptr;
   052E A8*00              1591 	mov	r0,_bp
   0530 08                 1592 	inc	r0
   0531 74 25              1593 	mov	a,#0x25
   0533 26                 1594 	add	a,@r0
   0534 FB                 1595 	mov	r3,a
   0535 E4                 1596 	clr	a
   0536 08                 1597 	inc	r0
   0537 36                 1598 	addc	a,@r0
   0538 FC                 1599 	mov	r4,a
   0539 08                 1600 	inc	r0
   053A 86 05              1601 	mov	ar5,@r0
   053C 8B 82              1602 	mov	dpl,r3
   053E 8C 83              1603 	mov	dph,r4
   0540 8D F0              1604 	mov	b,r5
   0542 E5*00              1605 	mov	a,_bp
   0544 24 06              1606 	add	a,#0x06
   0546 F8                 1607 	mov	r0,a
   0547 12s00r00           1608 	lcall	__gptrget
   054A F6                 1609 	mov	@r0,a
   054B A3                 1610 	inc	dptr
   054C 12s00r00           1611 	lcall	__gptrget
   054F 08                 1612 	inc	r0
   0550 F6                 1613 	mov	@r0,a
   0551 A3                 1614 	inc	dptr
   0552 12s00r00           1615 	lcall	__gptrget
   0555 08                 1616 	inc	r0
   0556 F6                 1617 	mov	@r0,a
                           1618 ;	../../core/net/mac/lpp.c:379: num_transmissions = i->num_transmissions;
   0557 A8*00              1619 	mov	r0,_bp
   0559 08                 1620 	inc	r0
   055A 74 28              1621 	mov	a,#0x28
   055C 26                 1622 	add	a,@r0
   055D FA                 1623 	mov	r2,a
   055E E4                 1624 	clr	a
   055F 08                 1625 	inc	r0
   0560 36                 1626 	addc	a,@r0
   0561 FE                 1627 	mov	r6,a
   0562 08                 1628 	inc	r0
   0563 86 07              1629 	mov	ar7,@r0
   0565 8A 82              1630 	mov	dpl,r2
   0567 8E 83              1631 	mov	dph,r6
   0569 8F F0              1632 	mov	b,r7
   056B 12s00r00           1633 	lcall	__gptrget
   056E FA                 1634 	mov	r2,a
   056F 7F 00              1635 	mov	r7,#0x00
                           1636 ;	../../core/net/mac/lpp.c:380: memb_free(&queued_packets_memb, i);
   0571 A8*00              1637 	mov	r0,_bp
   0573 08                 1638 	inc	r0
   0574 86 04              1639 	mov	ar4,@r0
   0576 08                 1640 	inc	r0
   0577 86 05              1641 	mov	ar5,@r0
   0579 08                 1642 	inc	r0
   057A 86 06              1643 	mov	ar6,@r0
   057C C0 07              1644 	push	ar7
   057E C0 02              1645 	push	ar2
   0580 C0 04              1646 	push	ar4
   0582 C0 05              1647 	push	ar5
   0584 C0 06              1648 	push	ar6
   0586 90s00r11           1649 	mov	dptr,#_queued_packets_memb
   0589 75 F0 00           1650 	mov	b,#0x00
   058C 12s00r00           1651 	lcall	_memb_free
   058F 15 81              1652 	dec	sp
   0591 15 81              1653 	dec	sp
   0593 15 81              1654 	dec	sp
   0595 D0 02              1655 	pop	ar2
   0597 D0 07              1656 	pop	ar7
                           1657 ;	../../core/net/mac/lpp.c:381: if(num_transmissions == 0 || tx_ok == 0) {
   0599 EA                 1658 	mov	a,r2
   059A 4F                 1659 	orl	a,r7
   059B 60 08              1660 	jz	00104$
   059D E5*00              1661 	mov	a,_bp
   059F 24 FD              1662 	add	a,#0xfd
   05A1 F8                 1663 	mov	r0,a
   05A2 E6                 1664 	mov	a,@r0
   05A3 70 06              1665 	jnz	00105$
   05A5                    1666 00104$:
                           1667 ;	../../core/net/mac/lpp.c:382: status = MAC_TX_NOACK;
   05A5 7D 02              1668 	mov	r5,#0x02
   05A7 7E 00              1669 	mov	r6,#0x00
   05A9 80 04              1670 	sjmp	00106$
   05AB                    1671 00105$:
                           1672 ;	../../core/net/mac/lpp.c:384: status = MAC_TX_OK;
   05AB 7D 00              1673 	mov	r5,#0x00
   05AD 7E 00              1674 	mov	r6,#0x00
   05AF                    1675 00106$:
                           1676 ;	../../core/net/mac/lpp.c:386: mac_call_sent_callback(sent, ptr, status, num_transmissions);
   05AF C0 02              1677 	push	ar2
   05B1 C0 07              1678 	push	ar7
   05B3 C0 05              1679 	push	ar5
   05B5 C0 06              1680 	push	ar6
   05B7 E5*00              1681 	mov	a,_bp
   05B9 24 06              1682 	add	a,#0x06
   05BB F8                 1683 	mov	r0,a
   05BC E6                 1684 	mov	a,@r0
   05BD C0 E0              1685 	push	acc
   05BF 08                 1686 	inc	r0
   05C0 E6                 1687 	mov	a,@r0
   05C1 C0 E0              1688 	push	acc
   05C3 08                 1689 	inc	r0
   05C4 E6                 1690 	mov	a,@r0
   05C5 C0 E0              1691 	push	acc
   05C7 E5*00              1692 	mov	a,_bp
   05C9 24 04              1693 	add	a,#0x04
   05CB F8                 1694 	mov	r0,a
   05CC 86 82              1695 	mov	dpl,@r0
   05CE 08                 1696 	inc	r0
   05CF 86 83              1697 	mov	dph,@r0
   05D1 12s00r00           1698 	lcall	_mac_call_sent_callback
   05D4 E5 81              1699 	mov	a,sp
   05D6 24 F9              1700 	add	a,#0xf9
   05D8 85*00 81           1701 	mov	sp,_bp
   05DB D0*00              1702 	pop	_bp
   05DD 22                 1703 	ret
                           1704 ;------------------------------------------------------------
                           1705 ;Allocation info for local variables in function 'remove_queued_old_packet_callback'
                           1706 ;------------------------------------------------------------
                           1707 ;item                      Allocated to registers r5 r6 r7 
                           1708 ;------------------------------------------------------------
                           1709 ;	../../core/net/mac/lpp.c:390: remove_queued_old_packet_callback(void *item)
                           1710 ;	-----------------------------------------
                           1711 ;	 function remove_queued_old_packet_callback
                           1712 ;	-----------------------------------------
   05DE                    1713 _remove_queued_old_packet_callback:
   05DE AD 82              1714 	mov	r5,dpl
   05E0 AE 83              1715 	mov	r6,dph
   05E2 AF F0              1716 	mov	r7,b
                           1717 ;	../../core/net/mac/lpp.c:392: remove_queued_packet(item, 0);
   05E4 E4                 1718 	clr	a
   05E5 C0 E0              1719 	push	acc
   05E7 8D 82              1720 	mov	dpl,r5
   05E9 8E 83              1721 	mov	dph,r6
   05EB 8F F0              1722 	mov	b,r7
   05ED 12s03rF7           1723 	lcall	_remove_queued_packet
   05F0 15 81              1724 	dec	sp
   05F2 22                 1725 	ret
                           1726 ;------------------------------------------------------------
                           1727 ;Allocation info for local variables in function 'listen_callback'
                           1728 ;------------------------------------------------------------
                           1729 ;periods                   Allocated to registers r6 r7 
                           1730 ;------------------------------------------------------------
                           1731 ;	../../core/net/mac/lpp.c:413: listen_callback(int periods)
                           1732 ;	-----------------------------------------
                           1733 ;	 function listen_callback
                           1734 ;	-----------------------------------------
   05F3                    1735 _listen_callback:
   05F3 AE 82              1736 	mov	r6,dpl
                           1737 ;	../../core/net/mac/lpp.c:415: is_listening = periods;
   05F5 90s00r00           1738 	mov	dptr,#_is_listening
   05F8 EE                 1739 	mov	a,r6
   05F9 F0                 1740 	movx	@dptr,a
                           1741 ;	../../core/net/mac/lpp.c:416: turn_radio_on();
   05FA 02s00r00           1742 	ljmp	_turn_radio_on
                           1743 ;------------------------------------------------------------
                           1744 ;Allocation info for local variables in function 'send_probe'
                           1745 ;------------------------------------------------------------
                           1746 ;hdr                       Allocated to registers r5 r6 r7 
                           1747 ;adata                     Allocated to stack - _bp +1
                           1748 ;a                         Allocated to stack - _bp +4
                           1749 ;hdrlen                    Allocated to registers r3 r4 
                           1750 ;sloc0                     Allocated to stack - _bp +7
                           1751 ;sloc1                     Allocated to stack - _bp +9
                           1752 ;------------------------------------------------------------
                           1753 ;	../../core/net/mac/lpp.c:423: send_probe(void)
                           1754 ;	-----------------------------------------
                           1755 ;	 function send_probe
                           1756 ;	-----------------------------------------
   05FD                    1757 _send_probe:
   05FD C0*00              1758 	push	_bp
   05FF E5 81              1759 	mov	a,sp
   0601 F5*00              1760 	mov	_bp,a
   0603 24 0B              1761 	add	a,#0x0B
   0605 F5 81              1762 	mov	sp,a
                           1763 ;	../../core/net/mac/lpp.c:430: packetbuf_clear();
   0607 12s00r00           1764 	lcall	_packetbuf_clear
                           1765 ;	../../core/net/mac/lpp.c:431: packetbuf_set_datalen(sizeof(struct lpp_hdr));
   060A 90 00 06           1766 	mov	dptr,#0x0006
   060D 12s00r00           1767 	lcall	_packetbuf_set_datalen
                           1768 ;	../../core/net/mac/lpp.c:432: hdr = packetbuf_dataptr();
   0610 12s00r00           1769 	lcall	_packetbuf_dataptr
                           1770 ;	../../core/net/mac/lpp.c:433: hdr->type = TYPE_PROBE;
   0613 AD 82              1771 	mov	r5,dpl
   0615 AE 83              1772 	mov	r6,dph
   0617 AF F0              1773 	mov	r7,b
   0619 74 01              1774 	mov	a,#0x01
   061B 12s00r00           1775 	lcall	__gptrput
   061E A3                 1776 	inc	dptr
   061F E4                 1777 	clr	a
   0620 12s00r00           1778 	lcall	__gptrput
                           1779 ;	../../core/net/mac/lpp.c:434: rimeaddr_copy(&hdr->sender, &rimeaddr_node_addr);
   0623 74 02              1780 	mov	a,#0x02
   0625 2D                 1781 	add	a,r5
   0626 FA                 1782 	mov	r2,a
   0627 E4                 1783 	clr	a
   0628 3E                 1784 	addc	a,r6
   0629 FB                 1785 	mov	r3,a
   062A 8F 04              1786 	mov	ar4,r7
   062C C0 07              1787 	push	ar7
   062E C0 06              1788 	push	ar6
   0630 C0 05              1789 	push	ar5
   0632 74r00              1790 	mov	a,#_rimeaddr_node_addr
   0634 C0 E0              1791 	push	acc
   0636 74s00              1792 	mov	a,#(_rimeaddr_node_addr >> 8)
   0638 C0 E0              1793 	push	acc
   063A E4                 1794 	clr	a
   063B C0 E0              1795 	push	acc
   063D 8A 82              1796 	mov	dpl,r2
   063F 8B 83              1797 	mov	dph,r3
   0641 8C F0              1798 	mov	b,r4
   0643 12s00r00           1799 	lcall	_rimeaddr_copy
   0646 15 81              1800 	dec	sp
   0648 15 81              1801 	dec	sp
   064A 15 81              1802 	dec	sp
   064C D0 05              1803 	pop	ar5
   064E D0 06              1804 	pop	ar6
   0650 D0 07              1805 	pop	ar7
                           1806 ;	../../core/net/mac/lpp.c:436: rimeaddr_copy(&hdr->receiver, &rimeaddr_null);
   0652 74 04              1807 	mov	a,#0x04
   0654 2D                 1808 	add	a,r5
   0655 FA                 1809 	mov	r2,a
   0656 E4                 1810 	clr	a
   0657 3E                 1811 	addc	a,r6
   0658 FB                 1812 	mov	r3,a
   0659 8F 04              1813 	mov	ar4,r7
   065B C0 07              1814 	push	ar7
   065D C0 06              1815 	push	ar6
   065F C0 05              1816 	push	ar5
   0661 74r00              1817 	mov	a,#_rimeaddr_null
   0663 C0 E0              1818 	push	acc
   0665 74s00              1819 	mov	a,#(_rimeaddr_null >> 8)
   0667 C0 E0              1820 	push	acc
   0669 74 80              1821 	mov	a,#0x80
   066B C0 E0              1822 	push	acc
   066D 8A 82              1823 	mov	dpl,r2
   066F 8B 83              1824 	mov	dph,r3
   0671 8C F0              1825 	mov	b,r4
   0673 12s00r00           1826 	lcall	_rimeaddr_copy
   0676 15 81              1827 	dec	sp
   0678 15 81              1828 	dec	sp
   067A 15 81              1829 	dec	sp
                           1830 ;	../../core/net/mac/lpp.c:438: packetbuf_set_addr(PACKETBUF_ADDR_RECEIVER, &rimeaddr_null);
   067C 74r00              1831 	mov	a,#_rimeaddr_null
   067E C0 E0              1832 	push	acc
   0680 74s00              1833 	mov	a,#(_rimeaddr_null >> 8)
   0682 C0 E0              1834 	push	acc
   0684 74 80              1835 	mov	a,#0x80
   0686 C0 E0              1836 	push	acc
   0688 75 82 19           1837 	mov	dpl,#0x19
   068B 12s00r00           1838 	lcall	_packetbuf_set_addr
   068E 15 81              1839 	dec	sp
   0690 15 81              1840 	dec	sp
   0692 15 81              1841 	dec	sp
                           1842 ;	../../core/net/mac/lpp.c:440: int hdrlen = NETSTACK_FRAMER.create();
   0694 90s00r00           1843 	mov	dptr,#_framer_802154
   0697 E4                 1844 	clr	a
   0698 93                 1845 	movc	a,@a+dptr
   0699 FB                 1846 	mov	r3,a
   069A A3                 1847 	inc	dptr
   069B E4                 1848 	clr	a
   069C 93                 1849 	movc	a,@a+dptr
   069D FC                 1850 	mov	r4,a
   069E 8B 82              1851 	mov	dpl,r3
   06A0 8C 83              1852 	mov	dph,r4
   06A2 12s00r00           1853 	lcall	__sdcc_call_dptr
   06A5 AB 82              1854 	mov	r3,dpl
   06A7 AC 83              1855 	mov	r4,dph
   06A9 D0 05              1856 	pop	ar5
   06AB D0 06              1857 	pop	ar6
   06AD D0 07              1858 	pop	ar7
                           1859 ;	../../core/net/mac/lpp.c:441: if(hdrlen < 0) {
   06AF EC                 1860 	mov	a,r4
   06B0 30 E7 03           1861 	jnb	acc.7,00102$
                           1862 ;	../../core/net/mac/lpp.c:443: return;
   06B3 02s09r13           1863 	ljmp	00110$
   06B6                    1864 00102$:
                           1865 ;	../../core/net/mac/lpp.c:448: adata = (struct announcement_msg *)((char *)hdr + sizeof(struct lpp_hdr));
   06B6 74 06              1866 	mov	a,#0x06
   06B8 2D                 1867 	add	a,r5
   06B9 FD                 1868 	mov	r5,a
   06BA E4                 1869 	clr	a
   06BB 3E                 1870 	addc	a,r6
   06BC FE                 1871 	mov	r6,a
   06BD A8*00              1872 	mov	r0,_bp
   06BF 08                 1873 	inc	r0
   06C0 A6 05              1874 	mov	@r0,ar5
   06C2 08                 1875 	inc	r0
   06C3 A6 06              1876 	mov	@r0,ar6
   06C5 08                 1877 	inc	r0
   06C6 A6 07              1878 	mov	@r0,ar7
                           1879 ;	../../core/net/mac/lpp.c:450: adata->num = 0;
   06C8 A8*00              1880 	mov	r0,_bp
   06CA 08                 1881 	inc	r0
   06CB 86 82              1882 	mov	dpl,@r0
   06CD 08                 1883 	inc	r0
   06CE 86 83              1884 	mov	dph,@r0
   06D0 08                 1885 	inc	r0
   06D1 86 F0              1886 	mov	b,@r0
   06D3 E4                 1887 	clr	a
   06D4 12s00r00           1888 	lcall	__gptrput
   06D7 A3                 1889 	inc	dptr
   06D8 E4                 1890 	clr	a
   06D9 12s00r00           1891 	lcall	__gptrput
                           1892 ;	../../core/net/mac/lpp.c:451: for(a = announcement_list(); a != NULL; a = list_item_next(a)) {
   06DC 12s00r00           1893 	lcall	_announcement_list
   06DF AA 82              1894 	mov	r2,dpl
   06E1 AB 83              1895 	mov	r3,dph
   06E3 AC F0              1896 	mov	r4,b
   06E5 E5*00              1897 	mov	a,_bp
   06E7 24 04              1898 	add	a,#0x04
   06E9 F8                 1899 	mov	r0,a
   06EA A6 02              1900 	mov	@r0,ar2
   06EC 08                 1901 	inc	r0
   06ED A6 03              1902 	mov	@r0,ar3
   06EF 08                 1903 	inc	r0
   06F0 A6 04              1904 	mov	@r0,ar4
   06F2 A8*00              1905 	mov	r0,_bp
   06F4 08                 1906 	inc	r0
   06F5 74 02              1907 	mov	a,#0x02
   06F7 26                 1908 	add	a,@r0
   06F8 FA                 1909 	mov	r2,a
   06F9 E4                 1910 	clr	a
   06FA 08                 1911 	inc	r0
   06FB 36                 1912 	addc	a,@r0
   06FC FB                 1913 	mov	r3,a
   06FD 08                 1914 	inc	r0
   06FE 86 04              1915 	mov	ar4,@r0
   0700                    1916 00106$:
   0700 E5*00              1917 	mov	a,_bp
   0702 24 04              1918 	add	a,#0x04
   0704 F8                 1919 	mov	r0,a
   0705 E4                 1920 	clr	a
   0706 C0 E0              1921 	push	acc
   0708 E4                 1922 	clr	a
   0709 C0 E0              1923 	push	acc
   070B E4                 1924 	clr	a
   070C C0 E0              1925 	push	acc
   070E 86 82              1926 	mov	dpl,@r0
   0710 08                 1927 	inc	r0
   0711 86 83              1928 	mov	dph,@r0
   0713 08                 1929 	inc	r0
   0714 86 F0              1930 	mov	b,@r0
   0716 12s00r00           1931 	lcall	___gptr_cmp
   0719 15 81              1932 	dec	sp
   071B 15 81              1933 	dec	sp
   071D 15 81              1934 	dec	sp
   071F 70 03              1935 	jnz	00122$
   0721 02s08r4A           1936 	ljmp	00109$
   0724                    1937 00122$:
                           1938 ;	../../core/net/mac/lpp.c:452: adata->data[adata->num].id = a->id;
   0724 A8*00              1939 	mov	r0,_bp
   0726 08                 1940 	inc	r0
   0727 86 82              1941 	mov	dpl,@r0
   0729 08                 1942 	inc	r0
   072A 86 83              1943 	mov	dph,@r0
   072C 08                 1944 	inc	r0
   072D 86 F0              1945 	mov	b,@r0
   072F 12s00r00           1946 	lcall	__gptrget
   0732 FE                 1947 	mov	r6,a
   0733 A3                 1948 	inc	dptr
   0734 12s00r00           1949 	lcall	__gptrget
   0737 FF                 1950 	mov	r7,a
   0738 E5*00              1951 	mov	a,_bp
   073A 24 07              1952 	add	a,#0x07
   073C F8                 1953 	mov	r0,a
   073D A6 06              1954 	mov	@r0,ar6
   073F EF                 1955 	mov	a,r7
   0740 C6                 1956 	xch	a,@r0
   0741 25 E0              1957 	add	a,acc
   0743 C6                 1958 	xch	a,@r0
   0744 33                 1959 	rlc	a
   0745 C6                 1960 	xch	a,@r0
   0746 25 E0              1961 	add	a,acc
   0748 C6                 1962 	xch	a,@r0
   0749 33                 1963 	rlc	a
   074A 08                 1964 	inc	r0
   074B F6                 1965 	mov	@r0,a
   074C E5*00              1966 	mov	a,_bp
   074E 24 07              1967 	add	a,#0x07
   0750 F8                 1968 	mov	r0,a
   0751 E5*00              1969 	mov	a,_bp
   0753 24 09              1970 	add	a,#0x09
   0755 F9                 1971 	mov	r1,a
   0756 E6                 1972 	mov	a,@r0
   0757 2A                 1973 	add	a,r2
   0758 F7                 1974 	mov	@r1,a
   0759 08                 1975 	inc	r0
   075A E6                 1976 	mov	a,@r0
   075B 3B                 1977 	addc	a,r3
   075C 09                 1978 	inc	r1
   075D F7                 1979 	mov	@r1,a
   075E 09                 1980 	inc	r1
   075F A7 04              1981 	mov	@r1,ar4
   0761 E5*00              1982 	mov	a,_bp
   0763 24 04              1983 	add	a,#0x04
   0765 F8                 1984 	mov	r0,a
   0766 74 03              1985 	mov	a,#0x03
   0768 26                 1986 	add	a,@r0
   0769 FD                 1987 	mov	r5,a
   076A E4                 1988 	clr	a
   076B 08                 1989 	inc	r0
   076C 36                 1990 	addc	a,@r0
   076D FE                 1991 	mov	r6,a
   076E 08                 1992 	inc	r0
   076F 86 07              1993 	mov	ar7,@r0
   0771 8D 82              1994 	mov	dpl,r5
   0773 8E 83              1995 	mov	dph,r6
   0775 8F F0              1996 	mov	b,r7
   0777 12s00r00           1997 	lcall	__gptrget
   077A FD                 1998 	mov	r5,a
   077B A3                 1999 	inc	dptr
   077C 12s00r00           2000 	lcall	__gptrget
   077F FE                 2001 	mov	r6,a
   0780 E5*00              2002 	mov	a,_bp
   0782 24 09              2003 	add	a,#0x09
   0784 F8                 2004 	mov	r0,a
   0785 86 82              2005 	mov	dpl,@r0
   0787 08                 2006 	inc	r0
   0788 86 83              2007 	mov	dph,@r0
   078A 08                 2008 	inc	r0
   078B 86 F0              2009 	mov	b,@r0
   078D ED                 2010 	mov	a,r5
   078E 12s00r00           2011 	lcall	__gptrput
   0791 A3                 2012 	inc	dptr
   0792 EE                 2013 	mov	a,r6
   0793 12s00r00           2014 	lcall	__gptrput
                           2015 ;	../../core/net/mac/lpp.c:453: adata->data[adata->num].value = a->value;
   0796 E5*00              2016 	mov	a,_bp
   0798 24 07              2017 	add	a,#0x07
   079A F8                 2018 	mov	r0,a
   079B E6                 2019 	mov	a,@r0
   079C 2A                 2020 	add	a,r2
   079D FD                 2021 	mov	r5,a
   079E 08                 2022 	inc	r0
   079F E6                 2023 	mov	a,@r0
   07A0 3B                 2024 	addc	a,r3
   07A1 FE                 2025 	mov	r6,a
   07A2 8C 07              2026 	mov	ar7,r4
   07A4 74 02              2027 	mov	a,#0x02
   07A6 2D                 2028 	add	a,r5
   07A7 FD                 2029 	mov	r5,a
   07A8 E4                 2030 	clr	a
   07A9 3E                 2031 	addc	a,r6
   07AA FE                 2032 	mov	r6,a
   07AB C0 02              2033 	push	ar2
   07AD C0 03              2034 	push	ar3
   07AF C0 04              2035 	push	ar4
   07B1 E5*00              2036 	mov	a,_bp
   07B3 24 04              2037 	add	a,#0x04
   07B5 F8                 2038 	mov	r0,a
   07B6 74 05              2039 	mov	a,#0x05
   07B8 26                 2040 	add	a,@r0
   07B9 FA                 2041 	mov	r2,a
   07BA E4                 2042 	clr	a
   07BB 08                 2043 	inc	r0
   07BC 36                 2044 	addc	a,@r0
   07BD FB                 2045 	mov	r3,a
   07BE 08                 2046 	inc	r0
   07BF 86 04              2047 	mov	ar4,@r0
   07C1 8A 82              2048 	mov	dpl,r2
   07C3 8B 83              2049 	mov	dph,r3
   07C5 8C F0              2050 	mov	b,r4
   07C7 12s00r00           2051 	lcall	__gptrget
   07CA FA                 2052 	mov	r2,a
   07CB A3                 2053 	inc	dptr
   07CC 12s00r00           2054 	lcall	__gptrget
   07CF FB                 2055 	mov	r3,a
   07D0 8D 82              2056 	mov	dpl,r5
   07D2 8E 83              2057 	mov	dph,r6
   07D4 8F F0              2058 	mov	b,r7
   07D6 EA                 2059 	mov	a,r2
   07D7 12s00r00           2060 	lcall	__gptrput
   07DA A3                 2061 	inc	dptr
   07DB EB                 2062 	mov	a,r3
   07DC 12s00r00           2063 	lcall	__gptrput
                           2064 ;	../../core/net/mac/lpp.c:454: adata->num++;
   07DF A8*00              2065 	mov	r0,_bp
   07E1 08                 2066 	inc	r0
   07E2 86 82              2067 	mov	dpl,@r0
   07E4 08                 2068 	inc	r0
   07E5 86 83              2069 	mov	dph,@r0
   07E7 08                 2070 	inc	r0
   07E8 86 F0              2071 	mov	b,@r0
   07EA 12s00r00           2072 	lcall	__gptrget
   07ED FE                 2073 	mov	r6,a
   07EE A3                 2074 	inc	dptr
   07EF 12s00r00           2075 	lcall	__gptrget
   07F2 FF                 2076 	mov	r7,a
   07F3 0E                 2077 	inc	r6
   07F4 BE 00 01           2078 	cjne	r6,#0x00,00123$
   07F7 0F                 2079 	inc	r7
   07F8                    2080 00123$:
   07F8 A8*00              2081 	mov	r0,_bp
   07FA 08                 2082 	inc	r0
   07FB 86 82              2083 	mov	dpl,@r0
   07FD 08                 2084 	inc	r0
   07FE 86 83              2085 	mov	dph,@r0
   0800 08                 2086 	inc	r0
   0801 86 F0              2087 	mov	b,@r0
   0803 EE                 2088 	mov	a,r6
   0804 12s00r00           2089 	lcall	__gptrput
   0807 A3                 2090 	inc	dptr
   0808 EF                 2091 	mov	a,r7
   0809 12s00r00           2092 	lcall	__gptrput
                           2093 ;	../../core/net/mac/lpp.c:451: for(a = announcement_list(); a != NULL; a = list_item_next(a)) {
   080C E5*00              2094 	mov	a,_bp
   080E 24 04              2095 	add	a,#0x04
   0810 F8                 2096 	mov	r0,a
   0811 86 02              2097 	mov	ar2,@r0
   0813 08                 2098 	inc	r0
   0814 86 03              2099 	mov	ar3,@r0
   0816 08                 2100 	inc	r0
   0817 86 04              2101 	mov	ar4,@r0
   0819 8A 82              2102 	mov	dpl,r2
   081B 8B 83              2103 	mov	dph,r3
   081D 8C F0              2104 	mov	b,r4
   081F C0 04              2105 	push	ar4
   0821 C0 03              2106 	push	ar3
   0823 C0 02              2107 	push	ar2
   0825 12s00r00           2108 	lcall	_list_item_next
   0828 AD 82              2109 	mov	r5,dpl
   082A AE 83              2110 	mov	r6,dph
   082C AF F0              2111 	mov	r7,b
   082E D0 02              2112 	pop	ar2
   0830 D0 03              2113 	pop	ar3
   0832 D0 04              2114 	pop	ar4
   0834 E5*00              2115 	mov	a,_bp
   0836 24 04              2116 	add	a,#0x04
   0838 F8                 2117 	mov	r0,a
   0839 A6 05              2118 	mov	@r0,ar5
   083B 08                 2119 	inc	r0
   083C A6 06              2120 	mov	@r0,ar6
   083E 08                 2121 	inc	r0
   083F A6 07              2122 	mov	@r0,ar7
   0841 D0 04              2123 	pop	ar4
   0843 D0 03              2124 	pop	ar3
   0845 D0 02              2125 	pop	ar2
   0847 02s07r00           2126 	ljmp	00106$
   084A                    2127 00109$:
                           2128 ;	../../core/net/mac/lpp.c:459: sizeof(struct announcement_data) * adata->num);
   084A A8*00              2129 	mov	r0,_bp
   084C 08                 2130 	inc	r0
   084D 86 82              2131 	mov	dpl,@r0
   084F 08                 2132 	inc	r0
   0850 86 83              2133 	mov	dph,@r0
   0852 08                 2134 	inc	r0
   0853 86 F0              2135 	mov	b,@r0
   0855 12s00r00           2136 	lcall	__gptrget
   0858 FE                 2137 	mov	r6,a
   0859 A3                 2138 	inc	dptr
   085A 12s00r00           2139 	lcall	__gptrget
   085D CE                 2140 	xch	a,r6
   085E 25 E0              2141 	add	a,acc
   0860 CE                 2142 	xch	a,r6
   0861 33                 2143 	rlc	a
   0862 CE                 2144 	xch	a,r6
   0863 25 E0              2145 	add	a,acc
   0865 CE                 2146 	xch	a,r6
   0866 33                 2147 	rlc	a
   0867 FF                 2148 	mov	r7,a
   0868 74 08              2149 	mov	a,#0x08
   086A 2E                 2150 	add	a,r6
   086B FE                 2151 	mov	r6,a
   086C E4                 2152 	clr	a
   086D 3F                 2153 	addc	a,r7
   086E FF                 2154 	mov	r7,a
   086F 8E 82              2155 	mov	dpl,r6
   0871 8F 83              2156 	mov	dph,r7
   0873 12s00r00           2157 	lcall	_packetbuf_set_datalen
                           2158 ;	../../core/net/mac/lpp.c:465: if(NETSTACK_RADIO.channel_clear()) {
   0876 90s00r0A           2159 	mov	dptr,#(_cc2430_rf_driver + 0x000a)
   0879 E4                 2160 	clr	a
   087A 93                 2161 	movc	a,@a+dptr
   087B FE                 2162 	mov	r6,a
   087C A3                 2163 	inc	dptr
   087D E4                 2164 	clr	a
   087E 93                 2165 	movc	a,@a+dptr
   087F FF                 2166 	mov	r7,a
   0880 8E 82              2167 	mov	dpl,r6
   0882 8F 83              2168 	mov	dph,r7
   0884 12s00r00           2169 	lcall	__sdcc_call_dptr
   0887 AE 82              2170 	mov	r6,dpl
   0889 AF 83              2171 	mov	r7,dph
   088B EE                 2172 	mov	a,r6
   088C 4F                 2173 	orl	a,r7
   088D 60 56              2174 	jz	00104$
                           2175 ;	../../core/net/mac/lpp.c:466: NETSTACK_RADIO.send(packetbuf_hdrptr(), packetbuf_totlen());
   088F 90s00r06           2176 	mov	dptr,#(_cc2430_rf_driver + 0x0006)
   0892 E4                 2177 	clr	a
   0893 93                 2178 	movc	a,@a+dptr
   0894 FE                 2179 	mov	r6,a
   0895 A3                 2180 	inc	dptr
   0896 E4                 2181 	clr	a
   0897 93                 2182 	movc	a,@a+dptr
   0898 FF                 2183 	mov	r7,a
   0899 C0 07              2184 	push	ar7
   089B C0 06              2185 	push	ar6
   089D 12s00r00           2186 	lcall	_packetbuf_totlen
   08A0 C8                 2187 	xch	a,r0
   08A1 E5*00              2188 	mov	a,_bp
   08A3 24 09              2189 	add	a,#0x09
   08A5 C8                 2190 	xch	a,r0
   08A6 A6 82              2191 	mov	@r0,dpl
   08A8 08                 2192 	inc	r0
   08A9 A6 83              2193 	mov	@r0,dph
   08AB 12s00r00           2194 	lcall	_packetbuf_hdrptr
   08AE AA 82              2195 	mov	r2,dpl
   08B0 AB 83              2196 	mov	r3,dph
   08B2 AD F0              2197 	mov	r5,b
   08B4 D0 06              2198 	pop	ar6
   08B6 D0 07              2199 	pop	ar7
   08B8 C0 07              2200 	push	ar7
   08BA C0 06              2201 	push	ar6
   08BC E5*00              2202 	mov	a,_bp
   08BE 24 09              2203 	add	a,#0x09
   08C0 F8                 2204 	mov	r0,a
   08C1 E6                 2205 	mov	a,@r0
   08C2 C0 E0              2206 	push	acc
   08C4 08                 2207 	inc	r0
   08C5 E6                 2208 	mov	a,@r0
   08C6 C0 E0              2209 	push	acc
   08C8 74rDB              2210 	mov	a,#00126$
   08CA C0 E0              2211 	push	acc
   08CC 74s08              2212 	mov	a,#(00126$ >> 8)
   08CE C0 E0              2213 	push	acc
   08D0 C0 06              2214 	push	ar6
   08D2 C0 07              2215 	push	ar7
   08D4 8A 82              2216 	mov	dpl,r2
   08D6 8B 83              2217 	mov	dph,r3
   08D8 8D F0              2218 	mov	b,r5
   08DA 22                 2219 	ret
   08DB                    2220 00126$:
   08DB 15 81              2221 	dec	sp
   08DD 15 81              2222 	dec	sp
   08DF D0 06              2223 	pop	ar6
   08E1 D0 07              2224 	pop	ar7
   08E3 80 25              2225 	sjmp	00105$
   08E5                    2226 00104$:
                           2227 ;	../../core/net/mac/lpp.c:468: off_time_adjustment = random_rand() % (OFF_TIME / 2);
   08E5 12s00r00           2228 	lcall	_random_rand
   08E8 AE 82              2229 	mov	r6,dpl
   08EA AF 83              2230 	mov	r7,dph
   08EC 74 07              2231 	mov	a,#0x07
   08EE C0 E0              2232 	push	acc
   08F0 E4                 2233 	clr	a
   08F1 C0 E0              2234 	push	acc
   08F3 8E 82              2235 	mov	dpl,r6
   08F5 8F 83              2236 	mov	dph,r7
   08F7 12s00r00           2237 	lcall	__moduint
   08FA AE 82              2238 	mov	r6,dpl
   08FC AF 83              2239 	mov	r7,dph
   08FE 15 81              2240 	dec	sp
   0900 15 81              2241 	dec	sp
   0902 90s00r01           2242 	mov	dptr,#_off_time_adjustment
   0905 EE                 2243 	mov	a,r6
   0906 F0                 2244 	movx	@dptr,a
   0907 A3                 2245 	inc	dptr
   0908 EF                 2246 	mov	a,r7
   0909 F0                 2247 	movx	@dptr,a
   090A                    2248 00105$:
                           2249 ;	../../core/net/mac/lpp.c:471: compower_accumulate(&compower_idle_activity);
   090A 90s00r00           2250 	mov	dptr,#_compower_idle_activity
   090D 75 F0 00           2251 	mov	b,#0x00
   0910 12s00r00           2252 	lcall	_compower_accumulate
   0913                    2253 00110$:
   0913 85*00 81           2254 	mov	sp,_bp
   0916 D0*00              2255 	pop	_bp
   0918 22                 2256 	ret
                           2257 ;------------------------------------------------------------
                           2258 ;Allocation info for local variables in function 'send_stream_probe'
                           2259 ;------------------------------------------------------------
                           2260 ;dummy                     Allocated to registers 
                           2261 ;------------------------------------------------------------
                           2262 ;	../../core/net/mac/lpp.c:475: send_stream_probe(void *dummy)
                           2263 ;	-----------------------------------------
                           2264 ;	 function send_stream_probe
                           2265 ;	-----------------------------------------
   0919                    2266 _send_stream_probe:
                           2267 ;	../../core/net/mac/lpp.c:479: turn_radio_on();
   0919 12s00r00           2268 	lcall	_turn_radio_on
                           2269 ;	../../core/net/mac/lpp.c:482: send_probe();
   091C 12s05rFD           2270 	lcall	_send_probe
                           2271 ;	../../core/net/mac/lpp.c:485: is_streaming = 1;
   091F 90s00r2B           2272 	mov	dptr,#_is_streaming
   0922 74 01              2273 	mov	a,#0x01
   0924 F0                 2274 	movx	@dptr,a
   0925 22                 2275 	ret
                           2276 ;------------------------------------------------------------
                           2277 ;Allocation info for local variables in function 'num_packets_to_send'
                           2278 ;------------------------------------------------------------
                           2279 ;	../../core/net/mac/lpp.c:490: num_packets_to_send(void)
                           2280 ;	-----------------------------------------
                           2281 ;	 function num_packets_to_send
                           2282 ;	-----------------------------------------
   0926                    2283 _num_packets_to_send:
                           2284 ;	../../core/net/mac/lpp.c:504: return list_length(queued_packets_list);
   0926 90s00r0E           2285 	mov	dptr,#_queued_packets_list
   0929 E0                 2286 	movx	a,@dptr
   092A FD                 2287 	mov	r5,a
   092B A3                 2288 	inc	dptr
   092C E0                 2289 	movx	a,@dptr
   092D FE                 2290 	mov	r6,a
   092E A3                 2291 	inc	dptr
   092F E0                 2292 	movx	a,@dptr
   0930 FF                 2293 	mov	r7,a
   0931 8D 82              2294 	mov	dpl,r5
   0933 8E 83              2295 	mov	dph,r6
   0935 8F F0              2296 	mov	b,r7
   0937 02s00r00           2297 	ljmp	_list_length
                           2298 ;------------------------------------------------------------
                           2299 ;Allocation info for local variables in function 'dutycycle'
                           2300 ;------------------------------------------------------------
                           2301 ;ptr                       Allocated to registers r5 r6 r7 
                           2302 ;t                         Allocated to stack - _bp +1
                           2303 ;PT_YIELD_FLAG             Allocated to registers r4 
                           2304 ;current_off_time          Allocated to registers r7 r4 
                           2305 ;sloc0                     Allocated to stack - _bp +4
                           2306 ;------------------------------------------------------------
                           2307 ;	../../core/net/mac/lpp.c:514: dutycycle(void *ptr)
                           2308 ;	-----------------------------------------
                           2309 ;	 function dutycycle
                           2310 ;	-----------------------------------------
   093A                    2311 _dutycycle:
   093A C0*00              2312 	push	_bp
   093C E5 81              2313 	mov	a,sp
   093E F5*00              2314 	mov	_bp,a
   0940 24 06              2315 	add	a,#0x06
   0942 F5 81              2316 	mov	sp,a
   0944 AD 82              2317 	mov	r5,dpl
   0946 AE 83              2318 	mov	r6,dph
   0948 AF F0              2319 	mov	r7,b
                           2320 ;	../../core/net/mac/lpp.c:516: struct ctimer *t = ptr;
   094A A8*00              2321 	mov	r0,_bp
   094C 08                 2322 	inc	r0
   094D A6 05              2323 	mov	@r0,ar5
   094F 08                 2324 	inc	r0
   0950 A6 06              2325 	mov	@r0,ar6
   0952 08                 2326 	inc	r0
   0953 A6 07              2327 	mov	@r0,ar7
                           2328 ;	../../core/net/mac/lpp.c:518: PT_BEGIN(&dutycycle_pt);
   0955 7C 01              2329 	mov	r4,#0x01
   0957 90s00r09           2330 	mov	dptr,#_dutycycle_pt
   095A E0                 2331 	movx	a,@dptr
   095B FA                 2332 	mov	r2,a
   095C A3                 2333 	inc	dptr
   095D E0                 2334 	movx	a,@dptr
   095E FB                 2335 	mov	r3,a
   095F BA 00 05           2336 	cjne	r2,#0x00,00170$
   0962 BB 00 02           2337 	cjne	r3,#0x00,00170$
   0965 80 26              2338 	sjmp	00137$
   0967                    2339 00170$:
   0967 BA 22 05           2340 	cjne	r2,#0x22,00171$
   096A BB 02 02           2341 	cjne	r3,#0x02,00171$
   096D 80 64              2342 	sjmp	00102$
   096F                    2343 00171$:
   096F BA 49 06           2344 	cjne	r2,#0x49,00172$
   0972 BB 02 03           2345 	cjne	r3,#0x02,00172$
   0975 02s0Ar9D           2346 	ljmp	00112$
   0978                    2347 00172$:
   0978 BA 57 06           2348 	cjne	r2,#0x57,00173$
   097B BB 02 03           2349 	cjne	r3,#0x02,00173$
   097E 02s0ArEF           2350 	ljmp	00118$
   0981                    2351 00173$:
   0981 BA 5D 06           2352 	cjne	r2,#0x5D,00174$
   0984 BB 02 03           2353 	cjne	r3,#0x02,00174$
   0987 02s0Br3D           2354 	ljmp	00127$
   098A                    2355 00174$:
   098A 02s0Br48           2356 	ljmp	00139$
                           2357 ;	../../core/net/mac/lpp.c:520: while(1) {
   098D                    2358 00137$:
                           2359 ;	../../core/net/mac/lpp.c:539: turn_radio_on();
   098D 12s00r00           2360 	lcall	_turn_radio_on
                           2361 ;	../../core/net/mac/lpp.c:542: send_probe();
   0990 12s05rFD           2362 	lcall	_send_probe
                           2363 ;	../../core/net/mac/lpp.c:545: ctimer_set(t, LISTEN_TIME, (void (*)(void *))dutycycle, t);
   0993 A8*00              2364 	mov	r0,_bp
   0995 08                 2365 	inc	r0
   0996 86 02              2366 	mov	ar2,@r0
   0998 08                 2367 	inc	r0
   0999 86 03              2368 	mov	ar3,@r0
   099B 08                 2369 	inc	r0
   099C 86 07              2370 	mov	ar7,@r0
   099E 7Dr3A              2371 	mov	r5,#_dutycycle
   09A0 7Es09              2372 	mov	r6,#(_dutycycle >> 8)
   09A2 C0 02              2373 	push	ar2
   09A4 C0 03              2374 	push	ar3
   09A6 C0 07              2375 	push	ar7
   09A8 C0 05              2376 	push	ar5
   09AA C0 06              2377 	push	ar6
   09AC 74 01              2378 	mov	a,#0x01
   09AE C0 E0              2379 	push	acc
   09B0 E4                 2380 	clr	a
   09B1 C0 E0              2381 	push	acc
   09B3 A8*00              2382 	mov	r0,_bp
   09B5 08                 2383 	inc	r0
   09B6 86 82              2384 	mov	dpl,@r0
   09B8 08                 2385 	inc	r0
   09B9 86 83              2386 	mov	dph,@r0
   09BB 08                 2387 	inc	r0
   09BC 86 F0              2388 	mov	b,@r0
   09BE 12s00r00           2389 	lcall	_ctimer_set
   09C1 E5 81              2390 	mov	a,sp
   09C3 24 F9              2391 	add	a,#0xf9
   09C5 F5 81              2392 	mov	sp,a
                           2393 ;	../../core/net/mac/lpp.c:546: PT_YIELD(&dutycycle_pt);
   09C7 7C 00              2394 	mov	r4,#0x00
   09C9 90s00r09           2395 	mov	dptr,#_dutycycle_pt
   09CC 74 22              2396 	mov	a,#0x22
   09CE F0                 2397 	movx	@dptr,a
   09CF A3                 2398 	inc	dptr
   09D0 74 02              2399 	mov	a,#0x02
   09D2 F0                 2400 	movx	@dptr,a
   09D3                    2401 00102$:
   09D3 EC                 2402 	mov	a,r4
   09D4 70 06              2403 	jnz	00106$
   09D6 90 00 01           2404 	mov	dptr,#0x0001
   09D9 02s0Br52           2405 	ljmp	00140$
   09DC                    2406 00106$:
                           2407 ;	../../core/net/mac/lpp.c:569: if(num_packets_to_send() == 0) {
   09DC 12s09r26           2408 	lcall	_num_packets_to_send
   09DF E5 82              2409 	mov	a,dpl
   09E1 85 83 F0           2410 	mov	b,dph
   09E4 45 F0              2411 	orl	a,b
   09E6 60 03              2412 	jz	00176$
   09E8 02s0ArFA           2413 	ljmp	00134$
   09EB                    2414 00176$:
                           2415 ;	../../core/net/mac/lpp.c:573: if(is_listening == 0) {
   09EB 90s00r00           2416 	mov	dptr,#_is_listening
   09EE E0                 2417 	movx	a,@dptr
   09EF FF                 2418 	mov	r7,a
   09F0 60 03              2419 	jz	00177$
   09F2 02s0ArA9           2420 	ljmp	00125$
   09F5                    2421 00177$:
                           2422 ;	../../core/net/mac/lpp.c:575: if(!NETSTACK_RADIO.receiving_packet()) {
   09F5 90s00r0C           2423 	mov	dptr,#(_cc2430_rf_driver + 0x000c)
   09F8 E4                 2424 	clr	a
   09F9 93                 2425 	movc	a,@a+dptr
   09FA FD                 2426 	mov	r5,a
   09FB A3                 2427 	inc	dptr
   09FC E4                 2428 	clr	a
   09FD 93                 2429 	movc	a,@a+dptr
   09FE FE                 2430 	mov	r6,a
   09FF 8D 82              2431 	mov	dpl,r5
   0A01 8E 83              2432 	mov	dph,r6
   0A03 12s00r00           2433 	lcall	__sdcc_call_dptr
   0A06 AD 82              2434 	mov	r5,dpl
   0A08 AE 83              2435 	mov	r6,dph
   0A0A ED                 2436 	mov	a,r5
   0A0B 4E                 2437 	orl	a,r6
   0A0C 70 0C              2438 	jnz	00109$
                           2439 ;	../../core/net/mac/lpp.c:576: turn_radio_off();
   0A0E 12s00r1A           2440 	lcall	_turn_radio_off
                           2441 ;	../../core/net/mac/lpp.c:577: compower_accumulate(&compower_idle_activity);
   0A11 90s00r00           2442 	mov	dptr,#_compower_idle_activity
   0A14 75 F0 00           2443 	mov	b,#0x00
   0A17 12s00r00           2444 	lcall	_compower_accumulate
   0A1A                    2445 00109$:
                           2446 ;	../../core/net/mac/lpp.c:579: current_off_time = off_time - off_time_adjustment;
   0A1A 90s00r01           2447 	mov	dptr,#_off_time_adjustment
   0A1D E0                 2448 	movx	a,@dptr
   0A1E FD                 2449 	mov	r5,a
   0A1F A3                 2450 	inc	dptr
   0A20 E0                 2451 	movx	a,@dptr
   0A21 FE                 2452 	mov	r6,a
   0A22 90s00r03           2453 	mov	dptr,#_off_time
   0A25 E0                 2454 	movx	a,@dptr
   0A26 FA                 2455 	mov	r2,a
   0A27 A3                 2456 	inc	dptr
   0A28 E0                 2457 	movx	a,@dptr
   0A29 FB                 2458 	mov	r3,a
   0A2A EA                 2459 	mov	a,r2
   0A2B C3                 2460 	clr	c
   0A2C 9D                 2461 	subb	a,r5
   0A2D FD                 2462 	mov	r5,a
   0A2E EB                 2463 	mov	a,r3
   0A2F 9E                 2464 	subb	a,r6
   0A30 FE                 2465 	mov	r6,a
   0A31 8D 07              2466 	mov	ar7,r5
   0A33 8E 04              2467 	mov	ar4,r6
                           2468 ;	../../core/net/mac/lpp.c:580: if(current_off_time < LISTEN_TIME * 2) {
   0A35 C3                 2469 	clr	c
   0A36 EF                 2470 	mov	a,r7
   0A37 94 02              2471 	subb	a,#0x02
   0A39 EC                 2472 	mov	a,r4
   0A3A 64 80              2473 	xrl	a,#0x80
   0A3C 94 80              2474 	subb	a,#0x80
   0A3E 50 04              2475 	jnc	00111$
                           2476 ;	../../core/net/mac/lpp.c:581: current_off_time = LISTEN_TIME * 2;
   0A40 7F 02              2477 	mov	r7,#0x02
   0A42 7C 00              2478 	mov	r4,#0x00
   0A44                    2479 00111$:
                           2480 ;	../../core/net/mac/lpp.c:583: off_time_adjustment = 0;
   0A44 90s00r01           2481 	mov	dptr,#_off_time_adjustment
   0A47 E4                 2482 	clr	a
   0A48 F0                 2483 	movx	@dptr,a
   0A49 A3                 2484 	inc	dptr
   0A4A F0                 2485 	movx	@dptr,a
                           2486 ;	../../core/net/mac/lpp.c:584: ctimer_set(t, current_off_time, (void (*)(void *))dutycycle, t);
   0A4B A8*00              2487 	mov	r0,_bp
   0A4D 08                 2488 	inc	r0
   0A4E E5*00              2489 	mov	a,_bp
   0A50 24 04              2490 	add	a,#0x04
   0A52 F9                 2491 	mov	r1,a
   0A53 E6                 2492 	mov	a,@r0
   0A54 F7                 2493 	mov	@r1,a
   0A55 08                 2494 	inc	r0
   0A56 09                 2495 	inc	r1
   0A57 E6                 2496 	mov	a,@r0
   0A58 F7                 2497 	mov	@r1,a
   0A59 08                 2498 	inc	r0
   0A5A 09                 2499 	inc	r1
   0A5B E6                 2500 	mov	a,@r0
   0A5C F7                 2501 	mov	@r1,a
   0A5D 7Dr3A              2502 	mov	r5,#_dutycycle
   0A5F 7Es09              2503 	mov	r6,#(_dutycycle >> 8)
   0A61 8F 02              2504 	mov	ar2,r7
   0A63 8C 03              2505 	mov	ar3,r4
   0A65 E5*00              2506 	mov	a,_bp
   0A67 24 04              2507 	add	a,#0x04
   0A69 F8                 2508 	mov	r0,a
   0A6A E6                 2509 	mov	a,@r0
   0A6B C0 E0              2510 	push	acc
   0A6D 08                 2511 	inc	r0
   0A6E E6                 2512 	mov	a,@r0
   0A6F C0 E0              2513 	push	acc
   0A71 08                 2514 	inc	r0
   0A72 E6                 2515 	mov	a,@r0
   0A73 C0 E0              2516 	push	acc
   0A75 C0 05              2517 	push	ar5
   0A77 C0 06              2518 	push	ar6
   0A79 C0 02              2519 	push	ar2
   0A7B C0 03              2520 	push	ar3
   0A7D A8*00              2521 	mov	r0,_bp
   0A7F 08                 2522 	inc	r0
   0A80 86 82              2523 	mov	dpl,@r0
   0A82 08                 2524 	inc	r0
   0A83 86 83              2525 	mov	dph,@r0
   0A85 08                 2526 	inc	r0
   0A86 86 F0              2527 	mov	b,@r0
   0A88 12s00r00           2528 	lcall	_ctimer_set
   0A8B E5 81              2529 	mov	a,sp
   0A8D 24 F9              2530 	add	a,#0xf9
   0A8F F5 81              2531 	mov	sp,a
                           2532 ;	../../core/net/mac/lpp.c:585: PT_YIELD(&dutycycle_pt);
   0A91 7C 00              2533 	mov	r4,#0x00
   0A93 90s00r09           2534 	mov	dptr,#_dutycycle_pt
   0A96 74 49              2535 	mov	a,#0x49
   0A98 F0                 2536 	movx	@dptr,a
   0A99 A3                 2537 	inc	dptr
   0A9A 74 02              2538 	mov	a,#0x02
   0A9C F0                 2539 	movx	@dptr,a
   0A9D                    2540 00112$:
   0A9D EC                 2541 	mov	a,r4
   0A9E 60 03              2542 	jz	00181$
   0AA0 02s09r8D           2543 	ljmp	00137$
   0AA3                    2544 00181$:
   0AA3 90 00 01           2545 	mov	dptr,#0x0001
   0AA6 02s0Br52           2546 	ljmp	00140$
   0AA9                    2547 00125$:
                           2548 ;	../../core/net/mac/lpp.c:597: is_listening--;
   0AA9 EF                 2549 	mov	a,r7
   0AAA 14                 2550 	dec	a
   0AAB 90s00r00           2551 	mov	dptr,#_is_listening
   0AAE F0                 2552 	movx	@dptr,a
                           2553 ;	../../core/net/mac/lpp.c:598: ctimer_set(t, OFF_TIME, (void (*)(void *))dutycycle, t);
   0AAF A8*00              2554 	mov	r0,_bp
   0AB1 08                 2555 	inc	r0
   0AB2 86 05              2556 	mov	ar5,@r0
   0AB4 08                 2557 	inc	r0
   0AB5 86 06              2558 	mov	ar6,@r0
   0AB7 08                 2559 	inc	r0
   0AB8 86 07              2560 	mov	ar7,@r0
   0ABA 7Ar3A              2561 	mov	r2,#_dutycycle
   0ABC 7Bs09              2562 	mov	r3,#(_dutycycle >> 8)
   0ABE C0 05              2563 	push	ar5
   0AC0 C0 06              2564 	push	ar6
   0AC2 C0 07              2565 	push	ar7
   0AC4 C0 02              2566 	push	ar2
   0AC6 C0 03              2567 	push	ar3
   0AC8 74 0F              2568 	mov	a,#0x0F
   0ACA C0 E0              2569 	push	acc
   0ACC E4                 2570 	clr	a
   0ACD C0 E0              2571 	push	acc
   0ACF A8*00              2572 	mov	r0,_bp
   0AD1 08                 2573 	inc	r0
   0AD2 86 82              2574 	mov	dpl,@r0
   0AD4 08                 2575 	inc	r0
   0AD5 86 83              2576 	mov	dph,@r0
   0AD7 08                 2577 	inc	r0
   0AD8 86 F0              2578 	mov	b,@r0
   0ADA 12s00r00           2579 	lcall	_ctimer_set
   0ADD E5 81              2580 	mov	a,sp
   0ADF 24 F9              2581 	add	a,#0xf9
   0AE1 F5 81              2582 	mov	sp,a
                           2583 ;	../../core/net/mac/lpp.c:599: PT_YIELD(&dutycycle_pt);
   0AE3 7C 00              2584 	mov	r4,#0x00
   0AE5 90s00r09           2585 	mov	dptr,#_dutycycle_pt
   0AE8 74 57              2586 	mov	a,#0x57
   0AEA F0                 2587 	movx	@dptr,a
   0AEB A3                 2588 	inc	dptr
   0AEC 74 02              2589 	mov	a,#0x02
   0AEE F0                 2590 	movx	@dptr,a
   0AEF                    2591 00118$:
   0AEF EC                 2592 	mov	a,r4
   0AF0 60 03              2593 	jz	00182$
   0AF2 02s09r8D           2594 	ljmp	00137$
   0AF5                    2595 00182$:
   0AF5 90 00 01           2596 	mov	dptr,#0x0001
   0AF8 80 58              2597 	sjmp	00140$
   0AFA                    2598 00134$:
                           2599 ;	../../core/net/mac/lpp.c:604: ctimer_set(t, off_time, (void (*)(void *))dutycycle, t);
   0AFA A8*00              2600 	mov	r0,_bp
   0AFC 08                 2601 	inc	r0
   0AFD 86 05              2602 	mov	ar5,@r0
   0AFF 08                 2603 	inc	r0
   0B00 86 06              2604 	mov	ar6,@r0
   0B02 08                 2605 	inc	r0
   0B03 86 07              2606 	mov	ar7,@r0
   0B05 7Ar3A              2607 	mov	r2,#_dutycycle
   0B07 7Bs09              2608 	mov	r3,#(_dutycycle >> 8)
   0B09 C0 05              2609 	push	ar5
   0B0B C0 06              2610 	push	ar6
   0B0D C0 07              2611 	push	ar7
   0B0F C0 02              2612 	push	ar2
   0B11 C0 03              2613 	push	ar3
   0B13 90s00r03           2614 	mov	dptr,#_off_time
   0B16 E0                 2615 	movx	a,@dptr
   0B17 C0 E0              2616 	push	acc
   0B19 A3                 2617 	inc	dptr
   0B1A E0                 2618 	movx	a,@dptr
   0B1B C0 E0              2619 	push	acc
   0B1D A8*00              2620 	mov	r0,_bp
   0B1F 08                 2621 	inc	r0
   0B20 86 82              2622 	mov	dpl,@r0
   0B22 08                 2623 	inc	r0
   0B23 86 83              2624 	mov	dph,@r0
   0B25 08                 2625 	inc	r0
   0B26 86 F0              2626 	mov	b,@r0
   0B28 12s00r00           2627 	lcall	_ctimer_set
   0B2B E5 81              2628 	mov	a,sp
   0B2D 24 F9              2629 	add	a,#0xf9
   0B2F F5 81              2630 	mov	sp,a
                           2631 ;	../../core/net/mac/lpp.c:605: PT_YIELD(&dutycycle_pt);
   0B31 7C 00              2632 	mov	r4,#0x00
   0B33 90s00r09           2633 	mov	dptr,#_dutycycle_pt
   0B36 74 5D              2634 	mov	a,#0x5D
   0B38 F0                 2635 	movx	@dptr,a
   0B39 A3                 2636 	inc	dptr
   0B3A 74 02              2637 	mov	a,#0x02
   0B3C F0                 2638 	movx	@dptr,a
   0B3D                    2639 00127$:
   0B3D EC                 2640 	mov	a,r4
   0B3E 60 03              2641 	jz	00183$
   0B40 02s09r8D           2642 	ljmp	00137$
   0B43                    2643 00183$:
   0B43 90 00 01           2644 	mov	dptr,#0x0001
                           2645 ;	../../core/net/mac/lpp.c:609: PT_END(&dutycycle_pt);
   0B46 80 0A              2646 	sjmp	00140$
   0B48                    2647 00139$:
   0B48 90s00r09           2648 	mov	dptr,#_dutycycle_pt
   0B4B E4                 2649 	clr	a
   0B4C F0                 2650 	movx	@dptr,a
   0B4D A3                 2651 	inc	dptr
   0B4E F0                 2652 	movx	@dptr,a
   0B4F 90 00 03           2653 	mov	dptr,#0x0003
   0B52                    2654 00140$:
   0B52 85*00 81           2655 	mov	sp,_bp
   0B55 D0*00              2656 	pop	_bp
   0B57 22                 2657 	ret
                           2658 ;------------------------------------------------------------
                           2659 ;Allocation info for local variables in function 'restart_dutycycle'
                           2660 ;------------------------------------------------------------
                           2661 ;initial_wait              Allocated to registers r6 r7 
                           2662 ;------------------------------------------------------------
                           2663 ;	../../core/net/mac/lpp.c:613: restart_dutycycle(clock_time_t initial_wait)
                           2664 ;	-----------------------------------------
                           2665 ;	 function restart_dutycycle
                           2666 ;	-----------------------------------------
   0B58                    2667 _restart_dutycycle:
   0B58 AE 82              2668 	mov	r6,dpl
   0B5A AF 83              2669 	mov	r7,dph
                           2670 ;	../../core/net/mac/lpp.c:615: PT_INIT(&dutycycle_pt);
   0B5C 90s00r09           2671 	mov	dptr,#_dutycycle_pt
   0B5F E4                 2672 	clr	a
   0B60 F0                 2673 	movx	@dptr,a
   0B61 A3                 2674 	inc	dptr
   0B62 F0                 2675 	movx	@dptr,a
                           2676 ;	../../core/net/mac/lpp.c:616: ctimer_set(&timer, initial_wait, (void (*)(void *))dutycycle, &timer);  
   0B63 7Cr3A              2677 	mov	r4,#_dutycycle
   0B65 7Ds09              2678 	mov	r5,#(_dutycycle >> 8)
   0B67 74r0B              2679 	mov	a,#_timer
   0B69 C0 E0              2680 	push	acc
   0B6B 74s00              2681 	mov	a,#(_timer >> 8)
   0B6D C0 E0              2682 	push	acc
   0B6F E4                 2683 	clr	a
   0B70 C0 E0              2684 	push	acc
   0B72 C0 04              2685 	push	ar4
   0B74 C0 05              2686 	push	ar5
   0B76 C0 06              2687 	push	ar6
   0B78 C0 07              2688 	push	ar7
   0B7A 90s00r0B           2689 	mov	dptr,#_timer
   0B7D 75 F0 00           2690 	mov	b,#0x00
   0B80 12s00r00           2691 	lcall	_ctimer_set
   0B83 E5 81              2692 	mov	a,sp
   0B85 24 F9              2693 	add	a,#0xf9
   0B87 F5 81              2694 	mov	sp,a
   0B89 22                 2695 	ret
                           2696 ;------------------------------------------------------------
                           2697 ;Allocation info for local variables in function 'send_packet'
                           2698 ;------------------------------------------------------------
                           2699 ;ptr                       Allocated to stack - _bp -5
                           2700 ;sent                      Allocated to stack - _bp +1
                           2701 ;hdr                       Allocated to stack - _bp +3
                           2702 ;timeout                   Allocated to stack - _bp +9
                           2703 ;is_broadcast              Allocated to stack - _bp +11
                           2704 ;hdrlen                    Allocated to registers r6 r7 
                           2705 ;i                         Allocated to stack - _bp +12
                           2706 ;------------------------------------------------------------
                           2707 ;	../../core/net/mac/lpp.c:634: send_packet(mac_callback_t sent, void *ptr)
                           2708 ;	-----------------------------------------
                           2709 ;	 function send_packet
                           2710 ;	-----------------------------------------
   0B8A                    2711 _send_packet:
   0B8A C0*00              2712 	push	_bp
   0B8C 85 81*00           2713 	mov	_bp,sp
   0B8F C0 82              2714 	push	dpl
   0B91 C0 83              2715 	push	dph
   0B93 E5 81              2716 	mov	a,sp
   0B95 24 0C              2717 	add	a,#0x0C
   0B97 F5 81              2718 	mov	sp,a
                           2719 ;	../../core/net/mac/lpp.c:638: uint8_t is_broadcast = 0;
   0B99 E5*00              2720 	mov	a,_bp
   0B9B 24 0B              2721 	add	a,#0x0b
   0B9D F8                 2722 	mov	r0,a
   0B9E 76 00              2723 	mov	@r0,#0x00
                           2724 ;	../../core/net/mac/lpp.c:640: rimeaddr_copy(&hdr.sender, &rimeaddr_node_addr);
   0BA0 E5*00              2725 	mov	a,_bp
   0BA2 24 03              2726 	add	a,#0x03
   0BA4 24 02              2727 	add	a,#0x02
   0BA6 FC                 2728 	mov	r4,a
   0BA7 7B 00              2729 	mov	r3,#0x00
   0BA9 7A 40              2730 	mov	r2,#0x40
   0BAB 74r00              2731 	mov	a,#_rimeaddr_node_addr
   0BAD C0 E0              2732 	push	acc
   0BAF 74s00              2733 	mov	a,#(_rimeaddr_node_addr >> 8)
   0BB1 C0 E0              2734 	push	acc
   0BB3 E4                 2735 	clr	a
   0BB4 C0 E0              2736 	push	acc
   0BB6 8C 82              2737 	mov	dpl,r4
   0BB8 8B 83              2738 	mov	dph,r3
   0BBA 8A F0              2739 	mov	b,r2
   0BBC 12s00r00           2740 	lcall	_rimeaddr_copy
   0BBF 15 81              2741 	dec	sp
   0BC1 15 81              2742 	dec	sp
   0BC3 15 81              2743 	dec	sp
                           2744 ;	../../core/net/mac/lpp.c:641: rimeaddr_copy(&hdr.receiver, packetbuf_addr(PACKETBUF_ADDR_RECEIVER));
   0BC5 75 82 19           2745 	mov	dpl,#0x19
   0BC8 12s00r00           2746 	lcall	_packetbuf_addr
   0BCB AA 82              2747 	mov	r2,dpl
   0BCD AB 83              2748 	mov	r3,dph
   0BCF AC F0              2749 	mov	r4,b
   0BD1 E5*00              2750 	mov	a,_bp
   0BD3 24 03              2751 	add	a,#0x03
   0BD5 24 04              2752 	add	a,#0x04
   0BD7 FD                 2753 	mov	r5,a
   0BD8 7E 00              2754 	mov	r6,#0x00
   0BDA 7F 40              2755 	mov	r7,#0x40
   0BDC C0 02              2756 	push	ar2
   0BDE C0 03              2757 	push	ar3
   0BE0 C0 04              2758 	push	ar4
   0BE2 8D 82              2759 	mov	dpl,r5
   0BE4 8E 83              2760 	mov	dph,r6
   0BE6 8F F0              2761 	mov	b,r7
   0BE8 12s00r00           2762 	lcall	_rimeaddr_copy
   0BEB 15 81              2763 	dec	sp
   0BED 15 81              2764 	dec	sp
   0BEF 15 81              2765 	dec	sp
                           2766 ;	../../core/net/mac/lpp.c:642: if(rimeaddr_cmp(&hdr.receiver, &rimeaddr_null)) {
   0BF1 E5*00              2767 	mov	a,_bp
   0BF3 24 03              2768 	add	a,#0x03
   0BF5 24 04              2769 	add	a,#0x04
   0BF7 FF                 2770 	mov	r7,a
   0BF8 7E 00              2771 	mov	r6,#0x00
   0BFA 7D 40              2772 	mov	r5,#0x40
   0BFC 74r00              2773 	mov	a,#_rimeaddr_null
   0BFE C0 E0              2774 	push	acc
   0C00 74s00              2775 	mov	a,#(_rimeaddr_null >> 8)
   0C02 C0 E0              2776 	push	acc
   0C04 74 80              2777 	mov	a,#0x80
   0C06 C0 E0              2778 	push	acc
   0C08 8F 82              2779 	mov	dpl,r7
   0C0A 8E 83              2780 	mov	dph,r6
   0C0C 8D F0              2781 	mov	b,r5
   0C0E 12s00r00           2782 	lcall	_rimeaddr_cmp
   0C11 AE 82              2783 	mov	r6,dpl
   0C13 AF 83              2784 	mov	r7,dph
   0C15 15 81              2785 	dec	sp
   0C17 15 81              2786 	dec	sp
   0C19 15 81              2787 	dec	sp
   0C1B EE                 2788 	mov	a,r6
   0C1C 4F                 2789 	orl	a,r7
   0C1D 60 07              2790 	jz	00102$
                           2791 ;	../../core/net/mac/lpp.c:643: is_broadcast = 1;
   0C1F E5*00              2792 	mov	a,_bp
   0C21 24 0B              2793 	add	a,#0x0b
   0C23 F8                 2794 	mov	r0,a
   0C24 76 01              2795 	mov	@r0,#0x01
   0C26                    2796 00102$:
                           2797 ;	../../core/net/mac/lpp.c:645: hdr.type = TYPE_DATA;
   0C26 E5*00              2798 	mov	a,_bp
   0C28 24 03              2799 	add	a,#0x03
   0C2A F8                 2800 	mov	r0,a
   0C2B 76 02              2801 	mov	@r0,#0x02
   0C2D 08                 2802 	inc	r0
   0C2E 76 00              2803 	mov	@r0,#0x00
                           2804 ;	../../core/net/mac/lpp.c:647: packetbuf_hdralloc(sizeof(struct lpp_hdr));
   0C30 90 00 06           2805 	mov	dptr,#0x0006
   0C33 12s00r00           2806 	lcall	_packetbuf_hdralloc
                           2807 ;	../../core/net/mac/lpp.c:648: memcpy(packetbuf_hdrptr(), &hdr, sizeof(struct lpp_hdr));
   0C36 E5*00              2808 	mov	a,_bp
   0C38 24 03              2809 	add	a,#0x03
   0C3A FF                 2810 	mov	r7,a
   0C3B 7E 00              2811 	mov	r6,#0x00
   0C3D 7D 40              2812 	mov	r5,#0x40
   0C3F C0 07              2813 	push	ar7
   0C41 C0 06              2814 	push	ar6
   0C43 C0 05              2815 	push	ar5
   0C45 12s00r00           2816 	lcall	_packetbuf_hdrptr
   0C48 AA 82              2817 	mov	r2,dpl
   0C4A AB 83              2818 	mov	r3,dph
   0C4C AC F0              2819 	mov	r4,b
   0C4E D0 05              2820 	pop	ar5
   0C50 D0 06              2821 	pop	ar6
   0C52 D0 07              2822 	pop	ar7
   0C54 74 06              2823 	mov	a,#0x06
   0C56 C0 E0              2824 	push	acc
   0C58 E4                 2825 	clr	a
   0C59 C0 E0              2826 	push	acc
   0C5B C0 07              2827 	push	ar7
   0C5D C0 06              2828 	push	ar6
   0C5F C0 05              2829 	push	ar5
   0C61 8A 82              2830 	mov	dpl,r2
   0C63 8B 83              2831 	mov	dph,r3
   0C65 8C F0              2832 	mov	b,r4
   0C67 12s00r00           2833 	lcall	_memcpy
   0C6A E5 81              2834 	mov	a,sp
   0C6C 24 FB              2835 	add	a,#0xfb
   0C6E F5 81              2836 	mov	sp,a
                           2837 ;	../../core/net/mac/lpp.c:649: packetbuf_compact();
   0C70 12s00r00           2838 	lcall	_packetbuf_compact
                           2839 ;	../../core/net/mac/lpp.c:651: packetbuf_set_attr(PACKETBUF_ATTR_MAC_ACK, 1);
   0C73 74 01              2840 	mov	a,#0x01
   0C75 C0 E0              2841 	push	acc
   0C77 E4                 2842 	clr	a
   0C78 C0 E0              2843 	push	acc
   0C7A 75 82 0B           2844 	mov	dpl,#0x0B
   0C7D 12s00r00           2845 	lcall	_packetbuf_set_attr
   0C80 15 81              2846 	dec	sp
   0C82 15 81              2847 	dec	sp
                           2848 ;	../../core/net/mac/lpp.c:654: int hdrlen = NETSTACK_FRAMER.create();
   0C84 90s00r00           2849 	mov	dptr,#_framer_802154
   0C87 E4                 2850 	clr	a
   0C88 93                 2851 	movc	a,@a+dptr
   0C89 FE                 2852 	mov	r6,a
   0C8A A3                 2853 	inc	dptr
   0C8B E4                 2854 	clr	a
   0C8C 93                 2855 	movc	a,@a+dptr
   0C8D FF                 2856 	mov	r7,a
   0C8E 8E 82              2857 	mov	dpl,r6
   0C90 8F 83              2858 	mov	dph,r7
   0C92 12s00r00           2859 	lcall	__sdcc_call_dptr
   0C95 AE 82              2860 	mov	r6,dpl
                           2861 ;	../../core/net/mac/lpp.c:655: if(hdrlen < 0) {
   0C97 E5 83              2862 	mov	a,dph
   0C99 FF                 2863 	mov	r7,a
   0C9A 30 E7 30           2864 	jnb	acc.7,00104$
                           2865 ;	../../core/net/mac/lpp.c:657: mac_call_sent_callback(sent, ptr, MAC_TX_ERR_FATAL, 0);
   0C9D E4                 2866 	clr	a
   0C9E C0 E0              2867 	push	acc
   0CA0 C0 E0              2868 	push	acc
   0CA2 74 05              2869 	mov	a,#0x05
   0CA4 C0 E0              2870 	push	acc
   0CA6 E4                 2871 	clr	a
   0CA7 C0 E0              2872 	push	acc
   0CA9 E5*00              2873 	mov	a,_bp
   0CAB 24 FB              2874 	add	a,#0xfb
   0CAD F8                 2875 	mov	r0,a
   0CAE E6                 2876 	mov	a,@r0
   0CAF C0 E0              2877 	push	acc
   0CB1 08                 2878 	inc	r0
   0CB2 E6                 2879 	mov	a,@r0
   0CB3 C0 E0              2880 	push	acc
   0CB5 08                 2881 	inc	r0
   0CB6 E6                 2882 	mov	a,@r0
   0CB7 C0 E0              2883 	push	acc
   0CB9 A8*00              2884 	mov	r0,_bp
   0CBB 08                 2885 	inc	r0
   0CBC 86 82              2886 	mov	dpl,@r0
   0CBE 08                 2887 	inc	r0
   0CBF 86 83              2888 	mov	dph,@r0
   0CC1 12s00r00           2889 	lcall	_mac_call_sent_callback
   0CC4 E5 81              2890 	mov	a,sp
   0CC6 24 F9              2891 	add	a,#0xf9
   0CC8 F5 81              2892 	mov	sp,a
                           2893 ;	../../core/net/mac/lpp.c:658: return;
   0CCA 02s0ErD4           2894 	ljmp	00114$
   0CCD                    2895 00104$:
                           2896 ;	../../core/net/mac/lpp.c:682: i = memb_alloc(&queued_packets_memb);
   0CCD 90s00r11           2897 	mov	dptr,#_queued_packets_memb
   0CD0 75 F0 00           2898 	mov	b,#0x00
   0CD3 12s00r00           2899 	lcall	_memb_alloc
   0CD6 AD 82              2900 	mov	r5,dpl
   0CD8 AE 83              2901 	mov	r6,dph
   0CDA AF F0              2902 	mov	r7,b
   0CDC E5*00              2903 	mov	a,_bp
   0CDE 24 0C              2904 	add	a,#0x0c
   0CE0 F8                 2905 	mov	r0,a
   0CE1 A6 05              2906 	mov	@r0,ar5
   0CE3 08                 2907 	inc	r0
   0CE4 A6 06              2908 	mov	@r0,ar6
   0CE6 08                 2909 	inc	r0
   0CE7 A6 07              2910 	mov	@r0,ar7
                           2911 ;	../../core/net/mac/lpp.c:683: if(i != NULL) {
   0CE9 E5*00              2912 	mov	a,_bp
   0CEB 24 0C              2913 	add	a,#0x0c
   0CED F8                 2914 	mov	r0,a
   0CEE E6                 2915 	mov	a,@r0
   0CEF 08                 2916 	inc	r0
   0CF0 46                 2917 	orl	a,@r0
   0CF1 70 03              2918 	jnz	00129$
   0CF3 02s0Er92           2919 	ljmp	00112$
   0CF6                    2920 00129$:
                           2921 ;	../../core/net/mac/lpp.c:684: i->sent_callback = sent;
   0CF6 E5*00              2922 	mov	a,_bp
   0CF8 24 0C              2923 	add	a,#0x0c
   0CFA F8                 2924 	mov	r0,a
   0CFB 74 23              2925 	mov	a,#0x23
   0CFD 26                 2926 	add	a,@r0
   0CFE FA                 2927 	mov	r2,a
   0CFF E4                 2928 	clr	a
   0D00 08                 2929 	inc	r0
   0D01 36                 2930 	addc	a,@r0
   0D02 FB                 2931 	mov	r3,a
   0D03 08                 2932 	inc	r0
   0D04 86 04              2933 	mov	ar4,@r0
   0D06 8A 82              2934 	mov	dpl,r2
   0D08 8B 83              2935 	mov	dph,r3
   0D0A 8C F0              2936 	mov	b,r4
   0D0C A8*00              2937 	mov	r0,_bp
   0D0E 08                 2938 	inc	r0
   0D0F E6                 2939 	mov	a,@r0
   0D10 12s00r00           2940 	lcall	__gptrput
   0D13 A3                 2941 	inc	dptr
   0D14 08                 2942 	inc	r0
   0D15 E6                 2943 	mov	a,@r0
   0D16 12s00r00           2944 	lcall	__gptrput
                           2945 ;	../../core/net/mac/lpp.c:685: i->sent_callback_ptr = ptr;
   0D19 E5*00              2946 	mov	a,_bp
   0D1B 24 0C              2947 	add	a,#0x0c
   0D1D F8                 2948 	mov	r0,a
   0D1E 74 25              2949 	mov	a,#0x25
   0D20 26                 2950 	add	a,@r0
   0D21 FA                 2951 	mov	r2,a
   0D22 E4                 2952 	clr	a
   0D23 08                 2953 	inc	r0
   0D24 36                 2954 	addc	a,@r0
   0D25 FB                 2955 	mov	r3,a
   0D26 08                 2956 	inc	r0
   0D27 86 04              2957 	mov	ar4,@r0
   0D29 8A 82              2958 	mov	dpl,r2
   0D2B 8B 83              2959 	mov	dph,r3
   0D2D 8C F0              2960 	mov	b,r4
   0D2F E5*00              2961 	mov	a,_bp
   0D31 24 FB              2962 	add	a,#0xfb
   0D33 F8                 2963 	mov	r0,a
   0D34 E6                 2964 	mov	a,@r0
   0D35 12s00r00           2965 	lcall	__gptrput
   0D38 A3                 2966 	inc	dptr
   0D39 08                 2967 	inc	r0
   0D3A E6                 2968 	mov	a,@r0
   0D3B 12s00r00           2969 	lcall	__gptrput
   0D3E A3                 2970 	inc	dptr
   0D3F 08                 2971 	inc	r0
   0D40 E6                 2972 	mov	a,@r0
   0D41 12s00r00           2973 	lcall	__gptrput
                           2974 ;	../../core/net/mac/lpp.c:686: i->num_transmissions = 0;
   0D44 E5*00              2975 	mov	a,_bp
   0D46 24 0C              2976 	add	a,#0x0c
   0D48 F8                 2977 	mov	r0,a
   0D49 74 28              2978 	mov	a,#0x28
   0D4B 26                 2979 	add	a,@r0
   0D4C FA                 2980 	mov	r2,a
   0D4D E4                 2981 	clr	a
   0D4E 08                 2982 	inc	r0
   0D4F 36                 2983 	addc	a,@r0
   0D50 FB                 2984 	mov	r3,a
   0D51 08                 2985 	inc	r0
   0D52 86 04              2986 	mov	ar4,@r0
   0D54 8A 82              2987 	mov	dpl,r2
   0D56 8B 83              2988 	mov	dph,r3
   0D58 8C F0              2989 	mov	b,r4
   0D5A E4                 2990 	clr	a
   0D5B 12s00r00           2991 	lcall	__gptrput
                           2992 ;	../../core/net/mac/lpp.c:687: i->packet = queuebuf_new_from_packetbuf();
   0D5E E5*00              2993 	mov	a,_bp
   0D60 24 0C              2994 	add	a,#0x0c
   0D62 F8                 2995 	mov	r0,a
   0D63 74 03              2996 	mov	a,#0x03
   0D65 26                 2997 	add	a,@r0
   0D66 FA                 2998 	mov	r2,a
   0D67 E4                 2999 	clr	a
   0D68 08                 3000 	inc	r0
   0D69 36                 3001 	addc	a,@r0
   0D6A FB                 3002 	mov	r3,a
   0D6B 08                 3003 	inc	r0
   0D6C 86 04              3004 	mov	ar4,@r0
   0D6E C0 04              3005 	push	ar4
   0D70 C0 03              3006 	push	ar3
   0D72 C0 02              3007 	push	ar2
   0D74 12s00r00           3008 	lcall	_queuebuf_new_from_packetbuf
   0D77 AD 82              3009 	mov	r5,dpl
   0D79 AE 83              3010 	mov	r6,dph
   0D7B AF F0              3011 	mov	r7,b
   0D7D D0 02              3012 	pop	ar2
   0D7F D0 03              3013 	pop	ar3
   0D81 D0 04              3014 	pop	ar4
   0D83 8A 82              3015 	mov	dpl,r2
   0D85 8B 83              3016 	mov	dph,r3
   0D87 8C F0              3017 	mov	b,r4
   0D89 ED                 3018 	mov	a,r5
   0D8A 12s00r00           3019 	lcall	__gptrput
   0D8D A3                 3020 	inc	dptr
   0D8E EE                 3021 	mov	a,r6
   0D8F 12s00r00           3022 	lcall	__gptrput
   0D92 A3                 3023 	inc	dptr
   0D93 EF                 3024 	mov	a,r7
   0D94 12s00r00           3025 	lcall	__gptrput
                           3026 ;	../../core/net/mac/lpp.c:688: if(i->packet == NULL) {
   0D97 ED                 3027 	mov	a,r5
   0D98 4E                 3028 	orl	a,r6
   0D99 70 67              3029 	jnz	00109$
                           3030 ;	../../core/net/mac/lpp.c:689: memb_free(&queued_packets_memb, i);
   0D9B E5*00              3031 	mov	a,_bp
   0D9D 24 0C              3032 	add	a,#0x0c
   0D9F F8                 3033 	mov	r0,a
   0DA0 86 05              3034 	mov	ar5,@r0
   0DA2 08                 3035 	inc	r0
   0DA3 86 06              3036 	mov	ar6,@r0
   0DA5 08                 3037 	inc	r0
   0DA6 86 07              3038 	mov	ar7,@r0
   0DA8 C0 05              3039 	push	ar5
   0DAA C0 06              3040 	push	ar6
   0DAC C0 07              3041 	push	ar7
   0DAE 90s00r11           3042 	mov	dptr,#_queued_packets_memb
   0DB1 75 F0 00           3043 	mov	b,#0x00
   0DB4 12s00r00           3044 	lcall	_memb_free
   0DB7 15 81              3045 	dec	sp
   0DB9 15 81              3046 	dec	sp
   0DBB 15 81              3047 	dec	sp
                           3048 ;	../../core/net/mac/lpp.c:690: printf("null packet\n");
   0DBD 74r00              3049 	mov	a,#__str_0
   0DBF C0 E0              3050 	push	acc
   0DC1 74s00              3051 	mov	a,#(__str_0 >> 8)
   0DC3 C0 E0              3052 	push	acc
   0DC5 74 80              3053 	mov	a,#0x80
   0DC7 C0 E0              3054 	push	acc
   0DC9 12s00r00           3055 	lcall	_printf
   0DCC 15 81              3056 	dec	sp
   0DCE 15 81              3057 	dec	sp
   0DD0 15 81              3058 	dec	sp
                           3059 ;	../../core/net/mac/lpp.c:691: mac_call_sent_callback(sent, ptr, MAC_TX_ERR, 0);
   0DD2 E4                 3060 	clr	a
   0DD3 C0 E0              3061 	push	acc
   0DD5 C0 E0              3062 	push	acc
   0DD7 74 04              3063 	mov	a,#0x04
   0DD9 C0 E0              3064 	push	acc
   0DDB E4                 3065 	clr	a
   0DDC C0 E0              3066 	push	acc
   0DDE E5*00              3067 	mov	a,_bp
   0DE0 24 FB              3068 	add	a,#0xfb
   0DE2 F8                 3069 	mov	r0,a
   0DE3 E6                 3070 	mov	a,@r0
   0DE4 C0 E0              3071 	push	acc
   0DE6 08                 3072 	inc	r0
   0DE7 E6                 3073 	mov	a,@r0
   0DE8 C0 E0              3074 	push	acc
   0DEA 08                 3075 	inc	r0
   0DEB E6                 3076 	mov	a,@r0
   0DEC C0 E0              3077 	push	acc
   0DEE A8*00              3078 	mov	r0,_bp
   0DF0 08                 3079 	inc	r0
   0DF1 86 82              3080 	mov	dpl,@r0
   0DF3 08                 3081 	inc	r0
   0DF4 86 83              3082 	mov	dph,@r0
   0DF6 12s00r00           3083 	lcall	_mac_call_sent_callback
   0DF9 E5 81              3084 	mov	a,sp
   0DFB 24 F9              3085 	add	a,#0xf9
   0DFD F5 81              3086 	mov	sp,a
                           3087 ;	../../core/net/mac/lpp.c:692: return;
   0DFF 02s0ErD4           3088 	ljmp	00114$
   0E02                    3089 00109$:
                           3090 ;	../../core/net/mac/lpp.c:694: if(is_broadcast) {
   0E02 E5*00              3091 	mov	a,_bp
   0E04 24 0B              3092 	add	a,#0x0b
   0E06 F8                 3093 	mov	r0,a
   0E07 E6                 3094 	mov	a,@r0
   0E08 60 0C              3095 	jz	00106$
                           3096 ;	../../core/net/mac/lpp.c:695: timeout = PACKET_LIFETIME;
   0E0A E5*00              3097 	mov	a,_bp
   0E0C 24 09              3098 	add	a,#0x09
   0E0E F8                 3099 	mov	r0,a
   0E0F 76 10              3100 	mov	@r0,#0x10
   0E11 08                 3101 	inc	r0
   0E12 76 00              3102 	mov	@r0,#0x00
   0E14 80 0A              3103 	sjmp	00107$
   0E16                    3104 00106$:
                           3105 ;	../../core/net/mac/lpp.c:709: timeout = UNICAST_TIMEOUT;
   0E16 E5*00              3106 	mov	a,_bp
   0E18 24 09              3107 	add	a,#0x09
   0E1A F8                 3108 	mov	r0,a
   0E1B 76 18              3109 	mov	@r0,#0x18
   0E1D 08                 3110 	inc	r0
   0E1E 76 00              3111 	mov	@r0,#0x00
   0E20                    3112 00107$:
                           3113 ;	../../core/net/mac/lpp.c:715: remove_queued_old_packet_callback, i);
   0E20 E5*00              3114 	mov	a,_bp
   0E22 24 0C              3115 	add	a,#0x0c
   0E24 F8                 3116 	mov	r0,a
   0E25 86 03              3117 	mov	ar3,@r0
   0E27 08                 3118 	inc	r0
   0E28 86 04              3119 	mov	ar4,@r0
   0E2A 08                 3120 	inc	r0
   0E2B 86 05              3121 	mov	ar5,@r0
                           3122 ;	../../core/net/mac/lpp.c:714: ctimer_set(&i->removal_timer, timeout,
   0E2D E5*00              3123 	mov	a,_bp
   0E2F 24 0C              3124 	add	a,#0x0c
   0E31 F8                 3125 	mov	r0,a
   0E32 74 06              3126 	mov	a,#0x06
   0E34 26                 3127 	add	a,@r0
   0E35 FA                 3128 	mov	r2,a
   0E36 E4                 3129 	clr	a
   0E37 08                 3130 	inc	r0
   0E38 36                 3131 	addc	a,@r0
   0E39 FE                 3132 	mov	r6,a
   0E3A 08                 3133 	inc	r0
   0E3B 86 07              3134 	mov	ar7,@r0
   0E3D C0 03              3135 	push	ar3
   0E3F C0 04              3136 	push	ar4
   0E41 C0 05              3137 	push	ar5
   0E43 74rDE              3138 	mov	a,#_remove_queued_old_packet_callback
   0E45 C0 E0              3139 	push	acc
   0E47 74s05              3140 	mov	a,#(_remove_queued_old_packet_callback >> 8)
   0E49 C0 E0              3141 	push	acc
   0E4B E5*00              3142 	mov	a,_bp
   0E4D 24 09              3143 	add	a,#0x09
   0E4F F8                 3144 	mov	r0,a
   0E50 E6                 3145 	mov	a,@r0
   0E51 C0 E0              3146 	push	acc
   0E53 08                 3147 	inc	r0
   0E54 E6                 3148 	mov	a,@r0
   0E55 C0 E0              3149 	push	acc
   0E57 8A 82              3150 	mov	dpl,r2
   0E59 8E 83              3151 	mov	dph,r6
   0E5B 8F F0              3152 	mov	b,r7
   0E5D 12s00r00           3153 	lcall	_ctimer_set
   0E60 E5 81              3154 	mov	a,sp
   0E62 24 F9              3155 	add	a,#0xf9
   0E64 F5 81              3156 	mov	sp,a
                           3157 ;	../../core/net/mac/lpp.c:720: turn_radio_on_for_neighbor(&hdr.receiver, i);
   0E66 E5*00              3158 	mov	a,_bp
   0E68 24 03              3159 	add	a,#0x03
   0E6A 24 04              3160 	add	a,#0x04
   0E6C FF                 3161 	mov	r7,a
   0E6D 7E 00              3162 	mov	r6,#0x00
   0E6F 7D 40              3163 	mov	r5,#0x40
   0E71 E5*00              3164 	mov	a,_bp
   0E73 24 0C              3165 	add	a,#0x0c
   0E75 F8                 3166 	mov	r0,a
   0E76 E6                 3167 	mov	a,@r0
   0E77 C0 E0              3168 	push	acc
   0E79 08                 3169 	inc	r0
   0E7A E6                 3170 	mov	a,@r0
   0E7B C0 E0              3171 	push	acc
   0E7D 08                 3172 	inc	r0
   0E7E E6                 3173 	mov	a,@r0
   0E7F C0 E0              3174 	push	acc
   0E81 8F 82              3175 	mov	dpl,r7
   0E83 8E 83              3176 	mov	dph,r6
   0E85 8D F0              3177 	mov	b,r5
   0E87 12s02rEA           3178 	lcall	_turn_radio_on_for_neighbor
   0E8A 15 81              3179 	dec	sp
   0E8C 15 81              3180 	dec	sp
   0E8E 15 81              3181 	dec	sp
   0E90 80 42              3182 	sjmp	00114$
   0E92                    3183 00112$:
                           3184 ;	../../core/net/mac/lpp.c:724: printf("i == NULL\n");
   0E92 74r0D              3185 	mov	a,#__str_1
   0E94 C0 E0              3186 	push	acc
   0E96 74s00              3187 	mov	a,#(__str_1 >> 8)
   0E98 C0 E0              3188 	push	acc
   0E9A 74 80              3189 	mov	a,#0x80
   0E9C C0 E0              3190 	push	acc
   0E9E 12s00r00           3191 	lcall	_printf
   0EA1 15 81              3192 	dec	sp
   0EA3 15 81              3193 	dec	sp
   0EA5 15 81              3194 	dec	sp
                           3195 ;	../../core/net/mac/lpp.c:725: mac_call_sent_callback(sent, ptr, MAC_TX_ERR, 0);
   0EA7 E4                 3196 	clr	a
   0EA8 C0 E0              3197 	push	acc
   0EAA C0 E0              3198 	push	acc
   0EAC 74 04              3199 	mov	a,#0x04
   0EAE C0 E0              3200 	push	acc
   0EB0 E4                 3201 	clr	a
   0EB1 C0 E0              3202 	push	acc
   0EB3 E5*00              3203 	mov	a,_bp
   0EB5 24 FB              3204 	add	a,#0xfb
   0EB7 F8                 3205 	mov	r0,a
   0EB8 E6                 3206 	mov	a,@r0
   0EB9 C0 E0              3207 	push	acc
   0EBB 08                 3208 	inc	r0
   0EBC E6                 3209 	mov	a,@r0
   0EBD C0 E0              3210 	push	acc
   0EBF 08                 3211 	inc	r0
   0EC0 E6                 3212 	mov	a,@r0
   0EC1 C0 E0              3213 	push	acc
   0EC3 A8*00              3214 	mov	r0,_bp
   0EC5 08                 3215 	inc	r0
   0EC6 86 82              3216 	mov	dpl,@r0
   0EC8 08                 3217 	inc	r0
   0EC9 86 83              3218 	mov	dph,@r0
   0ECB 12s00r00           3219 	lcall	_mac_call_sent_callback
   0ECE E5 81              3220 	mov	a,sp
   0ED0 24 F9              3221 	add	a,#0xf9
   0ED2 F5 81              3222 	mov	sp,a
   0ED4                    3223 00114$:
   0ED4 85*00 81           3224 	mov	sp,_bp
   0ED7 D0*00              3225 	pop	_bp
   0ED9 22                 3226 	ret
                           3227 ;------------------------------------------------------------
                           3228 ;Allocation info for local variables in function 'send_list'
                           3229 ;------------------------------------------------------------
                           3230 ;ptr                       Allocated to stack - _bp -5
                           3231 ;buf_list                  Allocated to stack - _bp -8
                           3232 ;sent                      Allocated to registers r6 r7 
                           3233 ;------------------------------------------------------------
                           3234 ;	../../core/net/mac/lpp.c:731: send_list(mac_callback_t sent, void *ptr, struct rdc_buf_list *buf_list)
                           3235 ;	-----------------------------------------
                           3236 ;	 function send_list
                           3237 ;	-----------------------------------------
   0EDA                    3238 _send_list:
   0EDA C0*00              3239 	push	_bp
   0EDC 85 81*00           3240 	mov	_bp,sp
   0EDF AE 82              3241 	mov	r6,dpl
   0EE1 AF 83              3242 	mov	r7,dph
                           3243 ;	../../core/net/mac/lpp.c:733: if(buf_list != NULL) {
   0EE3 E5*00              3244 	mov	a,_bp
   0EE5 24 F8              3245 	add	a,#0xf8
   0EE7 F8                 3246 	mov	r0,a
   0EE8 E6                 3247 	mov	a,@r0
   0EE9 08                 3248 	inc	r0
   0EEA 46                 3249 	orl	a,@r0
   0EEB 60 56              3250 	jz	00103$
                           3251 ;	../../core/net/mac/lpp.c:734: queuebuf_to_packetbuf(buf_list->buf);
   0EED E5*00              3252 	mov	a,_bp
   0EEF 24 F8              3253 	add	a,#0xf8
   0EF1 F8                 3254 	mov	r0,a
   0EF2 86 03              3255 	mov	ar3,@r0
   0EF4 08                 3256 	inc	r0
   0EF5 86 04              3257 	mov	ar4,@r0
   0EF7 08                 3258 	inc	r0
   0EF8 86 05              3259 	mov	ar5,@r0
   0EFA 74 03              3260 	mov	a,#0x03
   0EFC 2B                 3261 	add	a,r3
   0EFD FB                 3262 	mov	r3,a
   0EFE E4                 3263 	clr	a
   0EFF 3C                 3264 	addc	a,r4
   0F00 FC                 3265 	mov	r4,a
   0F01 8B 82              3266 	mov	dpl,r3
   0F03 8C 83              3267 	mov	dph,r4
   0F05 8D F0              3268 	mov	b,r5
   0F07 12s00r00           3269 	lcall	__gptrget
   0F0A FB                 3270 	mov	r3,a
   0F0B A3                 3271 	inc	dptr
   0F0C 12s00r00           3272 	lcall	__gptrget
   0F0F FC                 3273 	mov	r4,a
   0F10 A3                 3274 	inc	dptr
   0F11 12s00r00           3275 	lcall	__gptrget
   0F14 FD                 3276 	mov	r5,a
   0F15 8B 82              3277 	mov	dpl,r3
   0F17 8C 83              3278 	mov	dph,r4
   0F19 8D F0              3279 	mov	b,r5
   0F1B C0 07              3280 	push	ar7
   0F1D C0 06              3281 	push	ar6
   0F1F 12s00r00           3282 	lcall	_queuebuf_to_packetbuf
   0F22 D0 06              3283 	pop	ar6
   0F24 D0 07              3284 	pop	ar7
                           3285 ;	../../core/net/mac/lpp.c:735: send_packet(sent, ptr);
   0F26 E5*00              3286 	mov	a,_bp
   0F28 24 FB              3287 	add	a,#0xfb
   0F2A F8                 3288 	mov	r0,a
   0F2B E6                 3289 	mov	a,@r0
   0F2C C0 E0              3290 	push	acc
   0F2E 08                 3291 	inc	r0
   0F2F E6                 3292 	mov	a,@r0
   0F30 C0 E0              3293 	push	acc
   0F32 08                 3294 	inc	r0
   0F33 E6                 3295 	mov	a,@r0
   0F34 C0 E0              3296 	push	acc
   0F36 8E 82              3297 	mov	dpl,r6
   0F38 8F 83              3298 	mov	dph,r7
   0F3A 12s0Br8A           3299 	lcall	_send_packet
   0F3D 15 81              3300 	dec	sp
   0F3F 15 81              3301 	dec	sp
   0F41 15 81              3302 	dec	sp
   0F43                    3303 00103$:
   0F43 D0*00              3304 	pop	_bp
   0F45 22                 3305 	ret
                           3306 ;------------------------------------------------------------
                           3307 ;Allocation info for local variables in function 'detect_ack'
                           3308 ;------------------------------------------------------------
                           3309 ;wt                        Allocated to registers r5 r6 
                           3310 ;ack_received              Allocated to registers r7 
                           3311 ;len                       Allocated to registers r5 r6 
                           3312 ;ackbuf                    Allocated to stack - _bp +1
                           3313 ;sloc0                     Allocated to stack - _bp +6
                           3314 ;------------------------------------------------------------
                           3315 ;	../../core/net/mac/lpp.c:740: detect_ack(void)
                           3316 ;	-----------------------------------------
                           3317 ;	 function detect_ack
                           3318 ;	-----------------------------------------
   0F46                    3319 _detect_ack:
   0F46 C0*00              3320 	push	_bp
   0F48 E5 81              3321 	mov	a,sp
   0F4A F5*00              3322 	mov	_bp,a
   0F4C 24 07              3323 	add	a,#0x07
   0F4E F5 81              3324 	mov	sp,a
                           3325 ;	../../core/net/mac/lpp.c:746: uint8_t ack_received = 0;
   0F50 7F 00              3326 	mov	r7,#0x00
                           3327 ;	../../core/net/mac/lpp.c:748: wt = RTIMER_NOW();
   0F52 AD E2              3328 	mov	r5,_T1CNTL
   0F54 7E 00              3329 	mov	r6,#0x00
   0F56 AB E3              3330 	mov	r3,_T1CNTH
   0F58 8B 04              3331 	mov	ar4,r3
   0F5A E4                 3332 	clr	a
   0F5B 2D                 3333 	add	a,r5
   0F5C FD                 3334 	mov	r5,a
   0F5D EC                 3335 	mov	a,r4
   0F5E 3E                 3336 	addc	a,r6
   0F5F FE                 3337 	mov	r6,a
                           3338 ;	../../core/net/mac/lpp.c:749: leds_on(LEDS_GREEN);
   0F60 75 82 01           3339 	mov	dpl,#0x01
   0F63 C0 07              3340 	push	ar7
   0F65 C0 06              3341 	push	ar6
   0F67 C0 05              3342 	push	ar5
   0F69 12s00r00           3343 	lcall	_leds_on
   0F6C D0 05              3344 	pop	ar5
   0F6E D0 06              3345 	pop	ar6
   0F70 D0 07              3346 	pop	ar7
                           3347 ;	../../core/net/mac/lpp.c:750: while(RTIMER_CLOCK_LT(RTIMER_NOW(), wt + INTER_PACKET_INTERVAL)) { }
   0F72 E5*00              3348 	mov	a,_bp
   0F74 24 06              3349 	add	a,#0x06
   0F76 F8                 3350 	mov	r0,a
   0F77 74 03              3351 	mov	a,#0x03
   0F79 2D                 3352 	add	a,r5
   0F7A F6                 3353 	mov	@r0,a
   0F7B E4                 3354 	clr	a
   0F7C 3E                 3355 	addc	a,r6
   0F7D 08                 3356 	inc	r0
   0F7E F6                 3357 	mov	@r0,a
   0F7F                    3358 00101$:
   0F7F C0 07              3359 	push	ar7
   0F81 AA E2              3360 	mov	r2,_T1CNTL
   0F83 7F 00              3361 	mov	r7,#0x00
   0F85 AB E3              3362 	mov	r3,_T1CNTH
   0F87 8B 04              3363 	mov	ar4,r3
   0F89 E4                 3364 	clr	a
   0F8A FB                 3365 	mov	r3,a
   0F8B 2A                 3366 	add	a,r2
   0F8C FA                 3367 	mov	r2,a
   0F8D EC                 3368 	mov	a,r4
   0F8E 3F                 3369 	addc	a,r7
   0F8F FF                 3370 	mov	r7,a
   0F90 E5*00              3371 	mov	a,_bp
   0F92 24 06              3372 	add	a,#0x06
   0F94 F8                 3373 	mov	r0,a
   0F95 EA                 3374 	mov	a,r2
   0F96 C3                 3375 	clr	c
   0F97 96                 3376 	subb	a,@r0
   0F98 FA                 3377 	mov	r2,a
   0F99 EF                 3378 	mov	a,r7
   0F9A 08                 3379 	inc	r0
   0F9B 96                 3380 	subb	a,@r0
   0F9C D0 07              3381 	pop	ar7
   0F9E 20 E7 DE           3382 	jb	acc.7,00101$
                           3383 ;	../../core/net/mac/lpp.c:751: leds_off(LEDS_GREEN);
   0FA1 75 82 01           3384 	mov	dpl,#0x01
   0FA4 C0 07              3385 	push	ar7
   0FA6 12s00r00           3386 	lcall	_leds_off
                           3387 ;	../../core/net/mac/lpp.c:753: if((NETSTACK_RADIO.receiving_packet() ||
   0FA9 90s00r0C           3388 	mov	dptr,#(_cc2430_rf_driver + 0x000c)
   0FAC E4                 3389 	clr	a
   0FAD 93                 3390 	movc	a,@a+dptr
   0FAE FB                 3391 	mov	r3,a
   0FAF A3                 3392 	inc	dptr
   0FB0 E4                 3393 	clr	a
   0FB1 93                 3394 	movc	a,@a+dptr
   0FB2 FC                 3395 	mov	r4,a
   0FB3 8B 82              3396 	mov	dpl,r3
   0FB5 8C 83              3397 	mov	dph,r4
   0FB7 12s00r00           3398 	lcall	__sdcc_call_dptr
   0FBA AB 82              3399 	mov	r3,dpl
   0FBC AC 83              3400 	mov	r4,dph
   0FBE D0 07              3401 	pop	ar7
   0FC0 EB                 3402 	mov	a,r3
   0FC1 4C                 3403 	orl	a,r4
   0FC2 70 3D              3404 	jnz	00109$
                           3405 ;	../../core/net/mac/lpp.c:754: NETSTACK_RADIO.pending_packet() ||
   0FC4 90s00r0E           3406 	mov	dptr,#(_cc2430_rf_driver + 0x000e)
   0FC7 E4                 3407 	clr	a
   0FC8 93                 3408 	movc	a,@a+dptr
   0FC9 FB                 3409 	mov	r3,a
   0FCA A3                 3410 	inc	dptr
   0FCB E4                 3411 	clr	a
   0FCC 93                 3412 	movc	a,@a+dptr
   0FCD FC                 3413 	mov	r4,a
   0FCE C0 07              3414 	push	ar7
   0FD0 8B 82              3415 	mov	dpl,r3
   0FD2 8C 83              3416 	mov	dph,r4
   0FD4 12s00r00           3417 	lcall	__sdcc_call_dptr
   0FD7 AB 82              3418 	mov	r3,dpl
   0FD9 AC 83              3419 	mov	r4,dph
   0FDB D0 07              3420 	pop	ar7
   0FDD EB                 3421 	mov	a,r3
   0FDE 4C                 3422 	orl	a,r4
   0FDF 70 20              3423 	jnz	00109$
                           3424 ;	../../core/net/mac/lpp.c:755: NETSTACK_RADIO.channel_clear() == 0)) {
   0FE1 90s00r0A           3425 	mov	dptr,#(_cc2430_rf_driver + 0x000a)
   0FE4 E4                 3426 	clr	a
   0FE5 93                 3427 	movc	a,@a+dptr
   0FE6 FB                 3428 	mov	r3,a
   0FE7 A3                 3429 	inc	dptr
   0FE8 E4                 3430 	clr	a
   0FE9 93                 3431 	movc	a,@a+dptr
   0FEA FC                 3432 	mov	r4,a
   0FEB C0 07              3433 	push	ar7
   0FED 8B 82              3434 	mov	dpl,r3
   0FEF 8C 83              3435 	mov	dph,r4
   0FF1 12s00r00           3436 	lcall	__sdcc_call_dptr
   0FF4 AB 82              3437 	mov	r3,dpl
   0FF6 AC 83              3438 	mov	r4,dph
   0FF8 D0 07              3439 	pop	ar7
   0FFA EB                 3440 	mov	a,r3
   0FFB 4C                 3441 	orl	a,r4
   0FFC 60 03              3442 	jz	00139$
   0FFE 02s10r83           3443 	ljmp	00110$
   1001                    3444 00139$:
   1001                    3445 00109$:
                           3446 ;	../../core/net/mac/lpp.c:759: wt = RTIMER_NOW();
   1001 C0 07              3447 	push	ar7
   1003 AB E2              3448 	mov	r3,_T1CNTL
   1005 7C 00              3449 	mov	r4,#0x00
   1007 AA E3              3450 	mov	r2,_T1CNTH
   1009 8A 07              3451 	mov	ar7,r2
   100B E4                 3452 	clr	a
   100C FA                 3453 	mov	r2,a
   100D 2B                 3454 	add	a,r3
   100E FB                 3455 	mov	r3,a
   100F EF                 3456 	mov	a,r7
   1010 3C                 3457 	addc	a,r4
   1011 FC                 3458 	mov	r4,a
   1012 8B 05              3459 	mov	ar5,r3
   1014 8C 06              3460 	mov	ar6,r4
                           3461 ;	../../core/net/mac/lpp.c:760: while(RTIMER_CLOCK_LT(RTIMER_NOW(), wt + AFTER_ACK_DETECTECT_WAIT_TIME)) { }
   1016 E5*00              3462 	mov	a,_bp
   1018 24 06              3463 	add	a,#0x06
   101A F8                 3464 	mov	r0,a
   101B 74 0F              3465 	mov	a,#0x0F
   101D 2D                 3466 	add	a,r5
   101E F6                 3467 	mov	@r0,a
   101F E4                 3468 	clr	a
   1020 3E                 3469 	addc	a,r6
   1021 08                 3470 	inc	r0
   1022 F6                 3471 	mov	@r0,a
                           3472 ;	../../core/net/mac/lpp.c:770: return ack_received;
   1023 D0 07              3473 	pop	ar7
                           3474 ;	../../core/net/mac/lpp.c:760: while(RTIMER_CLOCK_LT(RTIMER_NOW(), wt + AFTER_ACK_DETECTECT_WAIT_TIME)) { }
   1025                    3475 00104$:
   1025 AD E2              3476 	mov	r5,_T1CNTL
   1027 7E 00              3477 	mov	r6,#0x00
   1029 AB E3              3478 	mov	r3,_T1CNTH
   102B 8B 04              3479 	mov	ar4,r3
   102D E4                 3480 	clr	a
   102E FB                 3481 	mov	r3,a
   102F 2D                 3482 	add	a,r5
   1030 FD                 3483 	mov	r5,a
   1031 EC                 3484 	mov	a,r4
   1032 3E                 3485 	addc	a,r6
   1033 FE                 3486 	mov	r6,a
   1034 E5*00              3487 	mov	a,_bp
   1036 24 06              3488 	add	a,#0x06
   1038 F8                 3489 	mov	r0,a
   1039 ED                 3490 	mov	a,r5
   103A C3                 3491 	clr	c
   103B 96                 3492 	subb	a,@r0
   103C FD                 3493 	mov	r5,a
   103D EE                 3494 	mov	a,r6
   103E 08                 3495 	inc	r0
   103F 96                 3496 	subb	a,@r0
   1040 FE                 3497 	mov	r6,a
   1041 20 E7 E1           3498 	jb	acc.7,00104$
                           3499 ;	../../core/net/mac/lpp.c:762: len = NETSTACK_RADIO.read(ackbuf, ACK_LEN);
   1044 90s00r08           3500 	mov	dptr,#(_cc2430_rf_driver + 0x0008)
   1047 E4                 3501 	clr	a
   1048 93                 3502 	movc	a,@a+dptr
   1049 FD                 3503 	mov	r5,a
   104A A3                 3504 	inc	dptr
   104B E4                 3505 	clr	a
   104C 93                 3506 	movc	a,@a+dptr
   104D FE                 3507 	mov	r6,a
   104E AC*00              3508 	mov	r4,_bp
   1050 0C                 3509 	inc	r4
   1051 7B 00              3510 	mov	r3,#0x00
   1053 7A 40              3511 	mov	r2,#0x40
   1055 C0 07              3512 	push	ar7
   1057 74 03              3513 	mov	a,#0x03
   1059 C0 E0              3514 	push	acc
   105B E4                 3515 	clr	a
   105C C0 E0              3516 	push	acc
   105E 74r71              3517 	mov	a,#00141$
   1060 C0 E0              3518 	push	acc
   1062 74s10              3519 	mov	a,#(00141$ >> 8)
   1064 C0 E0              3520 	push	acc
   1066 C0 05              3521 	push	ar5
   1068 C0 06              3522 	push	ar6
   106A 8C 82              3523 	mov	dpl,r4
   106C 8B 83              3524 	mov	dph,r3
   106E 8A F0              3525 	mov	b,r2
   1070 22                 3526 	ret
   1071                    3527 00141$:
   1071 AD 82              3528 	mov	r5,dpl
   1073 AE 83              3529 	mov	r6,dph
   1075 15 81              3530 	dec	sp
   1077 15 81              3531 	dec	sp
   1079 D0 07              3532 	pop	ar7
                           3533 ;	../../core/net/mac/lpp.c:763: if(len == ACK_LEN) {
   107B BD 03 05           3534 	cjne	r5,#0x03,00110$
   107E BE 00 02           3535 	cjne	r6,#0x00,00110$
                           3536 ;	../../core/net/mac/lpp.c:764: ack_received = 1;
   1081 7F 01              3537 	mov	r7,#0x01
   1083                    3538 00110$:
                           3539 ;	../../core/net/mac/lpp.c:767: if(ack_received) {
   1083 EF                 3540 	mov	a,r7
   1084 60 0A              3541 	jz	00114$
                           3542 ;	../../core/net/mac/lpp.c:768: leds_toggle(LEDS_RED);
   1086 75 82 04           3543 	mov	dpl,#0x04
   1089 C0 07              3544 	push	ar7
   108B 12s00r00           3545 	lcall	_leds_toggle
   108E D0 07              3546 	pop	ar7
   1090                    3547 00114$:
                           3548 ;	../../core/net/mac/lpp.c:770: return ack_received;
   1090 7E 00              3549 	mov	r6,#0x00
   1092 8F 82              3550 	mov	dpl,r7
   1094 8E 83              3551 	mov	dph,r6
   1096 85*00 81           3552 	mov	sp,_bp
   1099 D0*00              3553 	pop	_bp
   109B 22                 3554 	ret
                           3555 ;------------------------------------------------------------
                           3556 ;Allocation info for local variables in function 'input_packet'
                           3557 ;------------------------------------------------------------
                           3558 ;hdr                       Allocated to stack - _bp +1
                           3559 ;reception_time            Allocated to registers 
                           3560 ;ret                       Allocated to registers 
                           3561 ;adata                     Allocated to stack - _bp +7
                           3562 ;i                         Allocated to stack - _bp +9
                           3563 ;receiver                  Allocated to stack - _bp +12
                           3564 ;sent                      Allocated to registers 
                           3565 ;sloc0                     Allocated to stack - _bp +20
                           3566 ;sloc1                     Allocated to stack - _bp +15
                           3567 ;------------------------------------------------------------
                           3568 ;	../../core/net/mac/lpp.c:780: input_packet(void)
                           3569 ;	-----------------------------------------
                           3570 ;	 function input_packet
                           3571 ;	-----------------------------------------
   109C                    3572 _input_packet:
   109C C0*00              3573 	push	_bp
   109E E5 81              3574 	mov	a,sp
   10A0 F5*00              3575 	mov	_bp,a
   10A2 24 10              3576 	add	a,#0x10
   10A4 F5 81              3577 	mov	sp,a
                           3578 ;	../../core/net/mac/lpp.c:786: reception_time = clock_time();
   10A6 12s00r00           3579 	lcall	_clock_time
   10A9 AE 82              3580 	mov	r6,dpl
   10AB AF 83              3581 	mov	r7,dph
                           3582 ;	../../core/net/mac/lpp.c:788: if(NETSTACK_FRAMER.parse() < 0) {
   10AD 90s00r02           3583 	mov	dptr,#(_framer_802154 + 0x0002)
   10B0 E4                 3584 	clr	a
   10B1 93                 3585 	movc	a,@a+dptr
   10B2 FC                 3586 	mov	r4,a
   10B3 A3                 3587 	inc	dptr
   10B4 E4                 3588 	clr	a
   10B5 93                 3589 	movc	a,@a+dptr
   10B6 FD                 3590 	mov	r5,a
   10B7 C0 07              3591 	push	ar7
   10B9 C0 06              3592 	push	ar6
   10BB 8C 82              3593 	mov	dpl,r4
   10BD 8D 83              3594 	mov	dph,r5
   10BF 12s00r00           3595 	lcall	__sdcc_call_dptr
   10C2 AC 82              3596 	mov	r4,dpl
   10C4 AD 83              3597 	mov	r5,dph
   10C6 D0 06              3598 	pop	ar6
   10C8 D0 07              3599 	pop	ar7
   10CA ED                 3600 	mov	a,r5
   10CB 30 E7 1D           3601 	jnb	acc.7,00102$
                           3602 ;	../../core/net/mac/lpp.c:789: printf("lpp input_packet framer error\n");
   10CE C0 07              3603 	push	ar7
   10D0 C0 06              3604 	push	ar6
   10D2 74r18              3605 	mov	a,#__str_2
   10D4 C0 E0              3606 	push	acc
   10D6 74s00              3607 	mov	a,#(__str_2 >> 8)
   10D8 C0 E0              3608 	push	acc
   10DA 74 80              3609 	mov	a,#0x80
   10DC C0 E0              3610 	push	acc
   10DE 12s00r00           3611 	lcall	_printf
   10E1 15 81              3612 	dec	sp
   10E3 15 81              3613 	dec	sp
   10E5 15 81              3614 	dec	sp
   10E7 D0 06              3615 	pop	ar6
   10E9 D0 07              3616 	pop	ar7
   10EB                    3617 00102$:
                           3618 ;	../../core/net/mac/lpp.c:792: memcpy(&hdr, packetbuf_dataptr(), sizeof(struct lpp_hdr));;
   10EB C0 06              3619 	push	ar6
   10ED C0 07              3620 	push	ar7
   10EF C0 07              3621 	push	ar7
   10F1 C0 06              3622 	push	ar6
   10F3 12s00r00           3623 	lcall	_packetbuf_dataptr
   10F6 AB 82              3624 	mov	r3,dpl
   10F8 AC 83              3625 	mov	r4,dph
   10FA AD F0              3626 	mov	r5,b
   10FC D0 06              3627 	pop	ar6
   10FE D0 07              3628 	pop	ar7
   1100 AA*00              3629 	mov	r2,_bp
   1102 0A                 3630 	inc	r2
   1103 7E 00              3631 	mov	r6,#0x00
   1105 7F 40              3632 	mov	r7,#0x40
   1107 C0 07              3633 	push	ar7
   1109 C0 06              3634 	push	ar6
   110B 74 06              3635 	mov	a,#0x06
   110D C0 E0              3636 	push	acc
   110F E4                 3637 	clr	a
   1110 C0 E0              3638 	push	acc
   1112 C0 03              3639 	push	ar3
   1114 C0 04              3640 	push	ar4
   1116 C0 05              3641 	push	ar5
   1118 8A 82              3642 	mov	dpl,r2
   111A 8E 83              3643 	mov	dph,r6
   111C 8F F0              3644 	mov	b,r7
   111E 12s00r00           3645 	lcall	_memcpy
   1121 E5 81              3646 	mov	a,sp
   1123 24 FB              3647 	add	a,#0xfb
   1125 F5 81              3648 	mov	sp,a
                           3649 ;	../../core/net/mac/lpp.c:793: packetbuf_hdrreduce(sizeof(struct lpp_hdr));
   1127 90 00 06           3650 	mov	dptr,#0x0006
   112A 12s00r00           3651 	lcall	_packetbuf_hdrreduce
   112D D0 06              3652 	pop	ar6
   112F D0 07              3653 	pop	ar7
                           3654 ;	../../core/net/mac/lpp.c:796: if(hdr.type == TYPE_PROBE) {
   1131 A9*00              3655 	mov	r1,_bp
   1133 09                 3656 	inc	r1
   1134 87 05              3657 	mov	ar5,@r1
   1136 09                 3658 	inc	r1
   1137 87 04              3659 	mov	ar4,@r1
   1139 BD 01 05           3660 	cjne	r5,#0x01,00163$
   113C BC 00 02           3661 	cjne	r4,#0x00,00163$
   113F 80 07              3662 	sjmp	00164$
   1141                    3663 00163$:
   1141 D0 07              3664 	pop	ar7
   1143 D0 06              3665 	pop	ar6
   1145 02s14r85           3666 	ljmp	00124$
   1148                    3667 00164$:
                           3668 ;	../../core/net/mac/lpp.c:801: register_encounter(&hdr.sender, reception_time);
   1148 E5*00              3669 	mov	a,_bp
   114A 04                 3670 	inc	a
   114B 24 02              3671 	add	a,#0x02
   114D FD                 3672 	mov	r5,a
   114E 7C 00              3673 	mov	r4,#0x00
   1150 7B 40              3674 	mov	r3,#0x40
   1152 8D 82              3675 	mov	dpl,r5
   1154 8C 83              3676 	mov	dph,r4
   1156 8B F0              3677 	mov	b,r3
   1158 12s00rDD           3678 	lcall	_register_encounter
   115B 15 81              3679 	dec	sp
   115D 15 81              3680 	dec	sp
                           3681 ;	../../core/net/mac/lpp.c:805: MIN(packetbuf_datalen(), sizeof(adata)));
   115F 12s00r00           3682 	lcall	_packetbuf_datalen
   1162 AE 82              3683 	mov	r6,dpl
   1164 AF 83              3684 	mov	r7,dph
   1166 C3                 3685 	clr	c
   1167 EE                 3686 	mov	a,r6
   1168 94 02              3687 	subb	a,#0x02
   116A EF                 3688 	mov	a,r7
   116B 94 00              3689 	subb	a,#0x00
   116D 50 10              3690 	jnc	00132$
   116F 12s00r00           3691 	lcall	_packetbuf_datalen
   1172 C8                 3692 	xch	a,r0
   1173 E5*00              3693 	mov	a,_bp
   1175 24 0F              3694 	add	a,#0x0f
   1177 C8                 3695 	xch	a,r0
   1178 A6 82              3696 	mov	@r0,dpl
   117A 08                 3697 	inc	r0
   117B A6 83              3698 	mov	@r0,dph
   117D 80 0A              3699 	sjmp	00133$
   117F                    3700 00132$:
   117F E5*00              3701 	mov	a,_bp
   1181 24 0F              3702 	add	a,#0x0f
   1183 F8                 3703 	mov	r0,a
   1184 76 02              3704 	mov	@r0,#0x02
   1186 08                 3705 	inc	r0
   1187 76 00              3706 	mov	@r0,#0x00
   1189                    3707 00133$:
                           3708 ;	../../core/net/mac/lpp.c:804: memcpy(&adata, packetbuf_dataptr(),
   1189 12s00r00           3709 	lcall	_packetbuf_dataptr
   118C AB 82              3710 	mov	r3,dpl
   118E AC 83              3711 	mov	r4,dph
   1190 AD F0              3712 	mov	r5,b
   1192 E5*00              3713 	mov	a,_bp
   1194 24 07              3714 	add	a,#0x07
   1196 FA                 3715 	mov	r2,a
   1197 7E 00              3716 	mov	r6,#0x00
   1199 7F 40              3717 	mov	r7,#0x40
   119B E5*00              3718 	mov	a,_bp
   119D 24 0F              3719 	add	a,#0x0f
   119F F8                 3720 	mov	r0,a
   11A0 E6                 3721 	mov	a,@r0
   11A1 C0 E0              3722 	push	acc
   11A3 08                 3723 	inc	r0
   11A4 E6                 3724 	mov	a,@r0
   11A5 C0 E0              3725 	push	acc
   11A7 C0 03              3726 	push	ar3
   11A9 C0 04              3727 	push	ar4
   11AB C0 05              3728 	push	ar5
   11AD 8A 82              3729 	mov	dpl,r2
   11AF 8E 83              3730 	mov	dph,r6
   11B1 8F F0              3731 	mov	b,r7
   11B3 12s00r00           3732 	lcall	_memcpy
   11B6 E5 81              3733 	mov	a,sp
   11B8 24 FB              3734 	add	a,#0xfb
   11BA F5 81              3735 	mov	sp,a
                           3736 ;	../../core/net/mac/lpp.c:832: if(list_length(queued_packets_list) > 0) {
   11BC 90s00r0E           3737 	mov	dptr,#_queued_packets_list
   11BF E0                 3738 	movx	a,@dptr
   11C0 FD                 3739 	mov	r5,a
   11C1 A3                 3740 	inc	dptr
   11C2 E0                 3741 	movx	a,@dptr
   11C3 FE                 3742 	mov	r6,a
   11C4 A3                 3743 	inc	dptr
   11C5 E0                 3744 	movx	a,@dptr
   11C6 FF                 3745 	mov	r7,a
   11C7 8D 82              3746 	mov	dpl,r5
   11C9 8E 83              3747 	mov	dph,r6
   11CB 8F F0              3748 	mov	b,r7
   11CD 12s00r00           3749 	lcall	_list_length
   11D0 AE 82              3750 	mov	r6,dpl
   11D2 AF 83              3751 	mov	r7,dph
   11D4 C3                 3752 	clr	c
   11D5 E4                 3753 	clr	a
   11D6 9E                 3754 	subb	a,r6
   11D7 E4                 3755 	clr	a
   11D8 64 80              3756 	xrl	a,#0x80
   11DA 8F F0              3757 	mov	b,r7
   11DC 63 F0 80           3758 	xrl	b,#0x80
   11DF 95 F0              3759 	subb	a,b
   11E1 40 03              3760 	jc	00166$
   11E3 02s15r58           3761 	ljmp	00130$
   11E6                    3762 00166$:
                           3763 ;	../../core/net/mac/lpp.c:834: for(i = list_head(queued_packets_list); i != NULL; i = list_item_next(i)) {
   11E6 90s00r0E           3764 	mov	dptr,#_queued_packets_list
   11E9 E0                 3765 	movx	a,@dptr
   11EA FD                 3766 	mov	r5,a
   11EB A3                 3767 	inc	dptr
   11EC E0                 3768 	movx	a,@dptr
   11ED FE                 3769 	mov	r6,a
   11EE A3                 3770 	inc	dptr
   11EF E0                 3771 	movx	a,@dptr
   11F0 FF                 3772 	mov	r7,a
   11F1 8D 82              3773 	mov	dpl,r5
   11F3 8E 83              3774 	mov	dph,r6
   11F5 8F F0              3775 	mov	b,r7
   11F7 12s00r00           3776 	lcall	_list_head
   11FA AD 82              3777 	mov	r5,dpl
   11FC AE 83              3778 	mov	r6,dph
   11FE AF F0              3779 	mov	r7,b
   1200 E5*00              3780 	mov	a,_bp
   1202 24 09              3781 	add	a,#0x09
   1204 F8                 3782 	mov	r0,a
   1205 A6 05              3783 	mov	@r0,ar5
   1207 08                 3784 	inc	r0
   1208 A6 06              3785 	mov	@r0,ar6
   120A 08                 3786 	inc	r0
   120B A6 07              3787 	mov	@r0,ar7
   120D                    3788 00126$:
   120D E5*00              3789 	mov	a,_bp
   120F 24 09              3790 	add	a,#0x09
   1211 F8                 3791 	mov	r0,a
   1212 E4                 3792 	clr	a
   1213 C0 E0              3793 	push	acc
   1215 E4                 3794 	clr	a
   1216 C0 E0              3795 	push	acc
   1218 E4                 3796 	clr	a
   1219 C0 E0              3797 	push	acc
   121B 86 82              3798 	mov	dpl,@r0
   121D 08                 3799 	inc	r0
   121E 86 83              3800 	mov	dph,@r0
   1220 08                 3801 	inc	r0
   1221 86 F0              3802 	mov	b,@r0
   1223 12s00r00           3803 	lcall	___gptr_cmp
   1226 15 81              3804 	dec	sp
   1228 15 81              3805 	dec	sp
   122A 15 81              3806 	dec	sp
   122C 70 03              3807 	jnz	00167$
   122E 02s15r58           3808 	ljmp	00130$
   1231                    3809 00167$:
                           3810 ;	../../core/net/mac/lpp.c:840: receiver = queuebuf_addr(i->packet, PACKETBUF_ADDR_RECEIVER);
   1231 E5*00              3811 	mov	a,_bp
   1233 24 09              3812 	add	a,#0x09
   1235 F8                 3813 	mov	r0,a
   1236 74 03              3814 	mov	a,#0x03
   1238 26                 3815 	add	a,@r0
   1239 FA                 3816 	mov	r2,a
   123A E4                 3817 	clr	a
   123B 08                 3818 	inc	r0
   123C 36                 3819 	addc	a,@r0
   123D FB                 3820 	mov	r3,a
   123E 08                 3821 	inc	r0
   123F 86 04              3822 	mov	ar4,@r0
   1241 8A 82              3823 	mov	dpl,r2
   1243 8B 83              3824 	mov	dph,r3
   1245 8C F0              3825 	mov	b,r4
   1247 12s00r00           3826 	lcall	__gptrget
   124A FA                 3827 	mov	r2,a
   124B A3                 3828 	inc	dptr
   124C 12s00r00           3829 	lcall	__gptrget
   124F FB                 3830 	mov	r3,a
   1250 A3                 3831 	inc	dptr
   1251 12s00r00           3832 	lcall	__gptrget
   1254 FC                 3833 	mov	r4,a
   1255 74 19              3834 	mov	a,#0x19
   1257 C0 E0              3835 	push	acc
   1259 8A 82              3836 	mov	dpl,r2
   125B 8B 83              3837 	mov	dph,r3
   125D 8C F0              3838 	mov	b,r4
   125F 12s00r00           3839 	lcall	_queuebuf_addr
   1262 AA 82              3840 	mov	r2,dpl
   1264 AB 83              3841 	mov	r3,dph
   1266 AC F0              3842 	mov	r4,b
   1268 15 81              3843 	dec	sp
   126A E5*00              3844 	mov	a,_bp
   126C 24 0C              3845 	add	a,#0x0c
   126E F8                 3846 	mov	r0,a
   126F A6 02              3847 	mov	@r0,ar2
   1271 08                 3848 	inc	r0
   1272 A6 03              3849 	mov	@r0,ar3
   1274 08                 3850 	inc	r0
   1275 A6 04              3851 	mov	@r0,ar4
                           3852 ;	../../core/net/mac/lpp.c:841: if(rimeaddr_cmp(receiver, &hdr.sender) ||
   1277 E5*00              3853 	mov	a,_bp
   1279 04                 3854 	inc	a
   127A 24 02              3855 	add	a,#0x02
   127C FF                 3856 	mov	r7,a
   127D 7E 00              3857 	mov	r6,#0x00
   127F 7D 40              3858 	mov	r5,#0x40
   1281 C0 07              3859 	push	ar7
   1283 C0 06              3860 	push	ar6
   1285 C0 05              3861 	push	ar5
   1287 E5*00              3862 	mov	a,_bp
   1289 24 0C              3863 	add	a,#0x0c
   128B F8                 3864 	mov	r0,a
   128C 86 82              3865 	mov	dpl,@r0
   128E 08                 3866 	inc	r0
   128F 86 83              3867 	mov	dph,@r0
   1291 08                 3868 	inc	r0
   1292 86 F0              3869 	mov	b,@r0
   1294 12s00r00           3870 	lcall	_rimeaddr_cmp
   1297 AE 82              3871 	mov	r6,dpl
   1299 AF 83              3872 	mov	r7,dph
   129B 15 81              3873 	dec	sp
   129D 15 81              3874 	dec	sp
   129F 15 81              3875 	dec	sp
   12A1 EE                 3876 	mov	a,r6
   12A2 4F                 3877 	orl	a,r7
   12A3 70 2D              3878 	jnz	00112$
                           3879 ;	../../core/net/mac/lpp.c:842: rimeaddr_cmp(receiver, &rimeaddr_null)) {
   12A5 74r00              3880 	mov	a,#_rimeaddr_null
   12A7 C0 E0              3881 	push	acc
   12A9 74s00              3882 	mov	a,#(_rimeaddr_null >> 8)
   12AB C0 E0              3883 	push	acc
   12AD 74 80              3884 	mov	a,#0x80
   12AF C0 E0              3885 	push	acc
   12B1 E5*00              3886 	mov	a,_bp
   12B3 24 0C              3887 	add	a,#0x0c
   12B5 F8                 3888 	mov	r0,a
   12B6 86 82              3889 	mov	dpl,@r0
   12B8 08                 3890 	inc	r0
   12B9 86 83              3891 	mov	dph,@r0
   12BB 08                 3892 	inc	r0
   12BC 86 F0              3893 	mov	b,@r0
   12BE 12s00r00           3894 	lcall	_rimeaddr_cmp
   12C1 AB 82              3895 	mov	r3,dpl
   12C3 AC 83              3896 	mov	r4,dph
   12C5 15 81              3897 	dec	sp
   12C7 15 81              3898 	dec	sp
   12C9 15 81              3899 	dec	sp
   12CB EB                 3900 	mov	a,r3
   12CC 4C                 3901 	orl	a,r4
   12CD 70 03              3902 	jnz	00169$
   12CF 02s14r59           3903 	ljmp	00128$
   12D2                    3904 00169$:
   12D2                    3905 00112$:
                           3906 ;	../../core/net/mac/lpp.c:843: queuebuf_to_packetbuf(i->packet);
   12D2 E5*00              3907 	mov	a,_bp
   12D4 24 09              3908 	add	a,#0x09
   12D6 F8                 3909 	mov	r0,a
   12D7 74 03              3910 	mov	a,#0x03
   12D9 26                 3911 	add	a,@r0
   12DA FA                 3912 	mov	r2,a
   12DB E4                 3913 	clr	a
   12DC 08                 3914 	inc	r0
   12DD 36                 3915 	addc	a,@r0
   12DE FB                 3916 	mov	r3,a
   12DF 08                 3917 	inc	r0
   12E0 86 04              3918 	mov	ar4,@r0
   12E2 8A 82              3919 	mov	dpl,r2
   12E4 8B 83              3920 	mov	dph,r3
   12E6 8C F0              3921 	mov	b,r4
   12E8 12s00r00           3922 	lcall	__gptrget
   12EB FD                 3923 	mov	r5,a
   12EC A3                 3924 	inc	dptr
   12ED 12s00r00           3925 	lcall	__gptrget
   12F0 FE                 3926 	mov	r6,a
   12F1 A3                 3927 	inc	dptr
   12F2 12s00r00           3928 	lcall	__gptrget
   12F5 FF                 3929 	mov	r7,a
   12F6 8D 82              3930 	mov	dpl,r5
   12F8 8E 83              3931 	mov	dph,r6
   12FA 8F F0              3932 	mov	b,r7
   12FC C0 04              3933 	push	ar4
   12FE C0 03              3934 	push	ar3
   1300 C0 02              3935 	push	ar2
   1302 12s00r00           3936 	lcall	_queuebuf_to_packetbuf
   1305 D0 02              3937 	pop	ar2
   1307 D0 03              3938 	pop	ar3
   1309 D0 04              3939 	pop	ar4
                           3940 ;	../../core/net/mac/lpp.c:863: i->num_transmissions = 1;
   130B E5*00              3941 	mov	a,_bp
   130D 24 09              3942 	add	a,#0x09
   130F F8                 3943 	mov	r0,a
   1310 74 28              3944 	mov	a,#0x28
   1312 26                 3945 	add	a,@r0
   1313 FD                 3946 	mov	r5,a
   1314 E4                 3947 	clr	a
   1315 08                 3948 	inc	r0
   1316 36                 3949 	addc	a,@r0
   1317 FE                 3950 	mov	r6,a
   1318 08                 3951 	inc	r0
   1319 86 07              3952 	mov	ar7,@r0
   131B 8D 82              3953 	mov	dpl,r5
   131D 8E 83              3954 	mov	dph,r6
   131F 8F F0              3955 	mov	b,r7
   1321 74 01              3956 	mov	a,#0x01
   1323 12s00r00           3957 	lcall	__gptrput
                           3958 ;	../../core/net/mac/lpp.c:864: ret = NETSTACK_RADIO.send(queuebuf_dataptr(i->packet),
   1326 90s00r06           3959 	mov	dptr,#(_cc2430_rf_driver + 0x0006)
   1329 E5*00              3960 	mov	a,_bp
   132B 24 0F              3961 	add	a,#0x0f
   132D F8                 3962 	mov	r0,a
   132E E4                 3963 	clr	a
   132F 93                 3964 	movc	a,@a+dptr
   1330 F6                 3965 	mov	@r0,a
   1331 A3                 3966 	inc	dptr
   1332 E4                 3967 	clr	a
   1333 93                 3968 	movc	a,@a+dptr
   1334 08                 3969 	inc	r0
   1335 F6                 3970 	mov	@r0,a
                           3971 ;	../../core/net/mac/lpp.c:865: queuebuf_datalen(i->packet));
   1336 8A 82              3972 	mov	dpl,r2
   1338 8B 83              3973 	mov	dph,r3
   133A 8C F0              3974 	mov	b,r4
   133C 12s00r00           3975 	lcall	__gptrget
   133F FD                 3976 	mov	r5,a
   1340 A3                 3977 	inc	dptr
   1341 12s00r00           3978 	lcall	__gptrget
   1344 FE                 3979 	mov	r6,a
   1345 A3                 3980 	inc	dptr
   1346 12s00r00           3981 	lcall	__gptrget
   1349 FF                 3982 	mov	r7,a
   134A 8D 82              3983 	mov	dpl,r5
   134C 8E 83              3984 	mov	dph,r6
   134E 8F F0              3985 	mov	b,r7
   1350 C0 04              3986 	push	ar4
   1352 C0 03              3987 	push	ar3
   1354 C0 02              3988 	push	ar2
   1356 12s00r00           3989 	lcall	_queuebuf_datalen
   1359 AE 82              3990 	mov	r6,dpl
   135B AF 83              3991 	mov	r7,dph
   135D D0 02              3992 	pop	ar2
   135F D0 03              3993 	pop	ar3
   1361 D0 04              3994 	pop	ar4
                           3995 ;	../../core/net/mac/lpp.c:864: ret = NETSTACK_RADIO.send(queuebuf_dataptr(i->packet),
   1363 8A 82              3996 	mov	dpl,r2
   1365 8B 83              3997 	mov	dph,r3
   1367 8C F0              3998 	mov	b,r4
   1369 12s00r00           3999 	lcall	__gptrget
   136C FA                 4000 	mov	r2,a
   136D A3                 4001 	inc	dptr
   136E 12s00r00           4002 	lcall	__gptrget
   1371 FB                 4003 	mov	r3,a
   1372 A3                 4004 	inc	dptr
   1373 12s00r00           4005 	lcall	__gptrget
   1376 FC                 4006 	mov	r4,a
   1377 8A 82              4007 	mov	dpl,r2
   1379 8B 83              4008 	mov	dph,r3
   137B 8C F0              4009 	mov	b,r4
   137D C0 07              4010 	push	ar7
   137F C0 06              4011 	push	ar6
   1381 12s00r00           4012 	lcall	_queuebuf_dataptr
   1384 AB 82              4013 	mov	r3,dpl
   1386 AC 83              4014 	mov	r4,dph
   1388 AD F0              4015 	mov	r5,b
   138A D0 06              4016 	pop	ar6
   138C D0 07              4017 	pop	ar7
   138E C0 06              4018 	push	ar6
   1390 C0 07              4019 	push	ar7
   1392 74rAD              4020 	mov	a,#00170$
   1394 C0 E0              4021 	push	acc
   1396 74s13              4022 	mov	a,#(00170$ >> 8)
   1398 C0 E0              4023 	push	acc
   139A E5*00              4024 	mov	a,_bp
   139C 24 0F              4025 	add	a,#0x0f
   139E F8                 4026 	mov	r0,a
   139F E6                 4027 	mov	a,@r0
   13A0 C0 E0              4028 	push	acc
   13A2 08                 4029 	inc	r0
   13A3 E6                 4030 	mov	a,@r0
   13A4 C0 E0              4031 	push	acc
   13A6 8B 82              4032 	mov	dpl,r3
   13A8 8C 83              4033 	mov	dph,r4
   13AA 8D F0              4034 	mov	b,r5
   13AC 22                 4035 	ret
   13AD                    4036 00170$:
   13AD 15 81              4037 	dec	sp
   13AF 15 81              4038 	dec	sp
                           4039 ;	../../core/net/mac/lpp.c:876: compower_accumulate(&i->compower);
   13B1 E5*00              4040 	mov	a,_bp
   13B3 24 09              4041 	add	a,#0x09
   13B5 F8                 4042 	mov	r0,a
   13B6 74 1B              4043 	mov	a,#0x1B
   13B8 26                 4044 	add	a,@r0
   13B9 FD                 4045 	mov	r5,a
   13BA E4                 4046 	clr	a
   13BB 08                 4047 	inc	r0
   13BC 36                 4048 	addc	a,@r0
   13BD FE                 4049 	mov	r6,a
   13BE 08                 4050 	inc	r0
   13BF 86 07              4051 	mov	ar7,@r0
   13C1 8D 82              4052 	mov	dpl,r5
   13C3 8E 83              4053 	mov	dph,r6
   13C5 8F F0              4054 	mov	b,r7
   13C7 12s00r00           4055 	lcall	_compower_accumulate
                           4056 ;	../../core/net/mac/lpp.c:882: if(!rimeaddr_cmp(receiver, &rimeaddr_null)) {
   13CA 74r00              4057 	mov	a,#_rimeaddr_null
   13CC C0 E0              4058 	push	acc
   13CE 74s00              4059 	mov	a,#(_rimeaddr_null >> 8)
   13D0 C0 E0              4060 	push	acc
   13D2 74 80              4061 	mov	a,#0x80
   13D4 C0 E0              4062 	push	acc
   13D6 E5*00              4063 	mov	a,_bp
   13D8 24 0C              4064 	add	a,#0x0c
   13DA F8                 4065 	mov	r0,a
   13DB 86 82              4066 	mov	dpl,@r0
   13DD 08                 4067 	inc	r0
   13DE 86 83              4068 	mov	dph,@r0
   13E0 08                 4069 	inc	r0
   13E1 86 F0              4070 	mov	b,@r0
   13E3 12s00r00           4071 	lcall	_rimeaddr_cmp
   13E6 AE 82              4072 	mov	r6,dpl
   13E8 AF 83              4073 	mov	r7,dph
   13EA 15 81              4074 	dec	sp
   13EC 15 81              4075 	dec	sp
   13EE 15 81              4076 	dec	sp
   13F0 EE                 4077 	mov	a,r6
   13F1 4F                 4078 	orl	a,r7
   13F2 70 65              4079 	jnz	00128$
                           4080 ;	../../core/net/mac/lpp.c:891: if(detect_ack()) {
   13F4 12s0Fr46           4081 	lcall	_detect_ack
   13F7 E5 82              4082 	mov	a,dpl
   13F9 85 83 F0           4083 	mov	b,dph
   13FC 45 F0              4084 	orl	a,b
   13FE 60 18              4085 	jz	00104$
                           4086 ;	../../core/net/mac/lpp.c:892: remove_queued_packet(i, 1);
   1400 74 01              4087 	mov	a,#0x01
   1402 C0 E0              4088 	push	acc
   1404 E5*00              4089 	mov	a,_bp
   1406 24 09              4090 	add	a,#0x09
   1408 F8                 4091 	mov	r0,a
   1409 86 82              4092 	mov	dpl,@r0
   140B 08                 4093 	inc	r0
   140C 86 83              4094 	mov	dph,@r0
   140E 08                 4095 	inc	r0
   140F 86 F0              4096 	mov	b,@r0
   1411 12s03rF7           4097 	lcall	_remove_queued_packet
   1414 15 81              4098 	dec	sp
   1416 80 15              4099 	sjmp	00105$
   1418                    4100 00104$:
                           4101 ;	../../core/net/mac/lpp.c:894: remove_queued_packet(i, 0);
   1418 E4                 4102 	clr	a
   1419 C0 E0              4103 	push	acc
   141B E5*00              4104 	mov	a,_bp
   141D 24 09              4105 	add	a,#0x09
   141F F8                 4106 	mov	r0,a
   1420 86 82              4107 	mov	dpl,@r0
   1422 08                 4108 	inc	r0
   1423 86 83              4109 	mov	dph,@r0
   1425 08                 4110 	inc	r0
   1426 86 F0              4111 	mov	b,@r0
   1428 12s03rF7           4112 	lcall	_remove_queued_packet
   142B 15 81              4113 	dec	sp
   142D                    4114 00105$:
                           4115 ;	../../core/net/mac/lpp.c:906: if(is_streaming) {
   142D 90s00r2B           4116 	mov	dptr,#_is_streaming
   1430 E0                 4117 	movx	a,@dptr
   1431 FF                 4118 	mov	r7,a
   1432 60 25              4119 	jz	00128$
                           4120 ;	../../core/net/mac/lpp.c:907: ctimer_set(&stream_probe_timer, STREAM_PROBE_TIME,
   1434 E4                 4121 	clr	a
   1435 C0 E0              4122 	push	acc
   1437 C0 E0              4123 	push	acc
   1439 C0 E0              4124 	push	acc
   143B 74r19              4125 	mov	a,#_send_stream_probe
   143D C0 E0              4126 	push	acc
   143F 74s09              4127 	mov	a,#(_send_stream_probe >> 8)
   1441 C0 E0              4128 	push	acc
   1443 74 01              4129 	mov	a,#0x01
   1445 C0 E0              4130 	push	acc
   1447 E4                 4131 	clr	a
   1448 C0 E0              4132 	push	acc
   144A 90s01r90           4133 	mov	dptr,#_stream_probe_timer
   144D 75 F0 00           4134 	mov	b,#0x00
   1450 12s00r00           4135 	lcall	_ctimer_set
   1453 E5 81              4136 	mov	a,sp
   1455 24 F9              4137 	add	a,#0xf9
   1457 F5 81              4138 	mov	sp,a
                           4139 ;	../../core/net/mac/lpp.c:914: turn_radio_off();
   1459                    4140 00128$:
                           4141 ;	../../core/net/mac/lpp.c:834: for(i = list_head(queued_packets_list); i != NULL; i = list_item_next(i)) {
   1459 E5*00              4142 	mov	a,_bp
   145B 24 09              4143 	add	a,#0x09
   145D F8                 4144 	mov	r0,a
   145E 86 05              4145 	mov	ar5,@r0
   1460 08                 4146 	inc	r0
   1461 86 06              4147 	mov	ar6,@r0
   1463 08                 4148 	inc	r0
   1464 86 07              4149 	mov	ar7,@r0
   1466 8D 82              4150 	mov	dpl,r5
   1468 8E 83              4151 	mov	dph,r6
   146A 8F F0              4152 	mov	b,r7
   146C 12s00r00           4153 	lcall	_list_item_next
   146F AD 82              4154 	mov	r5,dpl
   1471 AE 83              4155 	mov	r6,dph
   1473 AF F0              4156 	mov	r7,b
   1475 E5*00              4157 	mov	a,_bp
   1477 24 09              4158 	add	a,#0x09
   1479 F8                 4159 	mov	r0,a
   147A A6 05              4160 	mov	@r0,ar5
   147C 08                 4161 	inc	r0
   147D A6 06              4162 	mov	@r0,ar6
   147F 08                 4163 	inc	r0
   1480 A6 07              4164 	mov	@r0,ar7
   1482 02s12r0D           4165 	ljmp	00126$
   1485                    4166 00124$:
                           4167 ;	../../core/net/mac/lpp.c:930: } else if(hdr.type == TYPE_DATA) {
   1485 BD 02 05           4168 	cjne	r5,#0x02,00174$
   1488 BC 00 02           4169 	cjne	r4,#0x00,00174$
   148B 80 03              4170 	sjmp	00175$
   148D                    4171 00174$:
   148D 02s15r58           4172 	ljmp	00130$
   1490                    4173 00175$:
                           4174 ;	../../core/net/mac/lpp.c:931: turn_radio_off();
   1490 12s00r1A           4175 	lcall	_turn_radio_off
                           4176 ;	../../core/net/mac/lpp.c:932: if(!rimeaddr_cmp(&hdr.receiver, &rimeaddr_null)) {
   1493 E5*00              4177 	mov	a,_bp
   1495 04                 4178 	inc	a
   1496 24 04              4179 	add	a,#0x04
   1498 FF                 4180 	mov	r7,a
   1499 7E 00              4181 	mov	r6,#0x00
   149B 7D 40              4182 	mov	r5,#0x40
   149D 74r00              4183 	mov	a,#_rimeaddr_null
   149F C0 E0              4184 	push	acc
   14A1 74s00              4185 	mov	a,#(_rimeaddr_null >> 8)
   14A3 C0 E0              4186 	push	acc
   14A5 74 80              4187 	mov	a,#0x80
   14A7 C0 E0              4188 	push	acc
   14A9 8F 82              4189 	mov	dpl,r7
   14AB 8E 83              4190 	mov	dph,r6
   14AD 8D F0              4191 	mov	b,r5
   14AF 12s00r00           4192 	lcall	_rimeaddr_cmp
   14B2 AE 82              4193 	mov	r6,dpl
   14B4 AF 83              4194 	mov	r7,dph
   14B6 15 81              4195 	dec	sp
   14B8 15 81              4196 	dec	sp
   14BA 15 81              4197 	dec	sp
   14BC EE                 4198 	mov	a,r6
   14BD 4F                 4199 	orl	a,r7
   14BE 70 48              4200 	jnz	00120$
                           4201 ;	../../core/net/mac/lpp.c:933: if(!rimeaddr_cmp(&hdr.receiver, &rimeaddr_node_addr)) {
   14C0 E5*00              4202 	mov	a,_bp
   14C2 04                 4203 	inc	a
   14C3 24 04              4204 	add	a,#0x04
   14C5 FF                 4205 	mov	r7,a
   14C6 7E 00              4206 	mov	r6,#0x00
   14C8 7D 40              4207 	mov	r5,#0x40
   14CA 74r00              4208 	mov	a,#_rimeaddr_node_addr
   14CC C0 E0              4209 	push	acc
   14CE 74s00              4210 	mov	a,#(_rimeaddr_node_addr >> 8)
   14D0 C0 E0              4211 	push	acc
   14D2 E4                 4212 	clr	a
   14D3 C0 E0              4213 	push	acc
   14D5 8F 82              4214 	mov	dpl,r7
   14D7 8E 83              4215 	mov	dph,r6
   14D9 8D F0              4216 	mov	b,r5
   14DB 12s00r00           4217 	lcall	_rimeaddr_cmp
   14DE AE 82              4218 	mov	r6,dpl
   14E0 AF 83              4219 	mov	r7,dph
   14E2 15 81              4220 	dec	sp
   14E4 15 81              4221 	dec	sp
   14E6 15 81              4222 	dec	sp
   14E8 EE                 4223 	mov	a,r6
   14E9 4F                 4224 	orl	a,r7
                           4225 ;	../../core/net/mac/lpp.c:938: return;
   14EA 60 6C              4226 	jz	00130$
                           4227 ;	../../core/net/mac/lpp.c:940: packetbuf_set_addr(PACKETBUF_ADDR_RECEIVER, &hdr.receiver);
   14EC E5*00              4228 	mov	a,_bp
   14EE 04                 4229 	inc	a
   14EF 24 04              4230 	add	a,#0x04
   14F1 FF                 4231 	mov	r7,a
   14F2 7E 00              4232 	mov	r6,#0x00
   14F4 7D 40              4233 	mov	r5,#0x40
   14F6 C0 07              4234 	push	ar7
   14F8 C0 06              4235 	push	ar6
   14FA C0 05              4236 	push	ar5
   14FC 75 82 19           4237 	mov	dpl,#0x19
   14FF 12s00r00           4238 	lcall	_packetbuf_set_addr
   1502 15 81              4239 	dec	sp
   1504 15 81              4240 	dec	sp
   1506 15 81              4241 	dec	sp
   1508                    4242 00120$:
                           4243 ;	../../core/net/mac/lpp.c:942: packetbuf_set_addr(PACKETBUF_ADDR_SENDER, &hdr.sender);
   1508 E5*00              4244 	mov	a,_bp
   150A 04                 4245 	inc	a
   150B 24 02              4246 	add	a,#0x02
   150D FF                 4247 	mov	r7,a
   150E 7E 00              4248 	mov	r6,#0x00
   1510 7D 40              4249 	mov	r5,#0x40
   1512 C0 07              4250 	push	ar7
   1514 C0 06              4251 	push	ar6
   1516 C0 05              4252 	push	ar5
   1518 75 82 18           4253 	mov	dpl,#0x18
   151B 12s00r00           4254 	lcall	_packetbuf_set_addr
   151E 15 81              4255 	dec	sp
   1520 15 81              4256 	dec	sp
   1522 15 81              4257 	dec	sp
                           4258 ;	../../core/net/mac/lpp.c:949: compower_accumulate(&current_packet);
   1524 90s00r01           4259 	mov	dptr,#_current_packet
   1527 75 F0 00           4260 	mov	b,#0x00
   152A 12s00r00           4261 	lcall	_compower_accumulate
                           4262 ;	../../core/net/mac/lpp.c:954: compower_attrconv(&current_packet);
   152D 90s00r01           4263 	mov	dptr,#_current_packet
   1530 75 F0 00           4264 	mov	b,#0x00
   1533 12s00r00           4265 	lcall	_compower_attrconv
                           4266 ;	../../core/net/mac/lpp.c:958: compower_clear(&current_packet);
   1536 90s00r01           4267 	mov	dptr,#_current_packet
   1539 75 F0 00           4268 	mov	b,#0x00
   153C 12s00r00           4269 	lcall	_compower_clear
                           4270 ;	../../core/net/mac/lpp.c:1001: NETSTACK_MAC.input();
   153F 90s00r07           4271 	mov	dptr,#(_csma_driver + 0x0007)
   1542 E4                 4272 	clr	a
   1543 93                 4273 	movc	a,@a+dptr
   1544 FE                 4274 	mov	r6,a
   1545 A3                 4275 	inc	dptr
   1546 E4                 4276 	clr	a
   1547 93                 4277 	movc	a,@a+dptr
   1548 FF                 4278 	mov	r7,a
   1549 C0 07              4279 	push	ar7
   154B C0 06              4280 	push	ar6
   154D 8E 82              4281 	mov	dpl,r6
   154F 8F 83              4282 	mov	dph,r7
   1551 12s00r00           4283 	lcall	__sdcc_call_dptr
   1554 D0 06              4284 	pop	ar6
   1556 D0 07              4285 	pop	ar7
   1558                    4286 00130$:
   1558 85*00 81           4287 	mov	sp,_bp
   155B D0*00              4288 	pop	_bp
   155D 22                 4289 	ret
                           4290 ;------------------------------------------------------------
                           4291 ;Allocation info for local variables in function 'on'
                           4292 ;------------------------------------------------------------
                           4293 ;	../../core/net/mac/lpp.c:1006: on(void)
                           4294 ;	-----------------------------------------
                           4295 ;	 function on
                           4296 ;	-----------------------------------------
   155E                    4297 _on:
                           4298 ;	../../core/net/mac/lpp.c:1008: lpp_is_on = 1;
   155E 90s00r00           4299 	mov	dptr,#_lpp_is_on
   1561 74 01              4300 	mov	a,#0x01
   1563 F0                 4301 	movx	@dptr,a
                           4302 ;	../../core/net/mac/lpp.c:1009: turn_radio_on();
   1564 12s00r00           4303 	lcall	_turn_radio_on
                           4304 ;	../../core/net/mac/lpp.c:1010: return 1;
   1567 90 00 01           4305 	mov	dptr,#0x0001
   156A 22                 4306 	ret
                           4307 ;------------------------------------------------------------
                           4308 ;Allocation info for local variables in function 'off'
                           4309 ;------------------------------------------------------------
                           4310 ;keep_radio_on             Allocated to registers r6 r7 
                           4311 ;------------------------------------------------------------
                           4312 ;	../../core/net/mac/lpp.c:1014: off(int keep_radio_on)
                           4313 ;	-----------------------------------------
                           4314 ;	 function off
                           4315 ;	-----------------------------------------
   156B                    4316 _off:
   156B AE 82              4317 	mov	r6,dpl
   156D AF 83              4318 	mov	r7,dph
                           4319 ;	../../core/net/mac/lpp.c:1016: lpp_is_on = 0;
   156F 90s00r00           4320 	mov	dptr,#_lpp_is_on
   1572 E4                 4321 	clr	a
   1573 F0                 4322 	movx	@dptr,a
                           4323 ;	../../core/net/mac/lpp.c:1017: if(keep_radio_on) {
   1574 EE                 4324 	mov	a,r6
   1575 4F                 4325 	orl	a,r7
   1576 60 05              4326 	jz	00102$
                           4327 ;	../../core/net/mac/lpp.c:1018: turn_radio_on();
   1578 12s00r00           4328 	lcall	_turn_radio_on
   157B 80 03              4329 	sjmp	00103$
   157D                    4330 00102$:
                           4331 ;	../../core/net/mac/lpp.c:1020: turn_radio_off();
   157D 12s00r1A           4332 	lcall	_turn_radio_off
   1580                    4333 00103$:
                           4334 ;	../../core/net/mac/lpp.c:1022: return 1;
   1580 90 00 01           4335 	mov	dptr,#0x0001
   1583 22                 4336 	ret
                           4337 ;------------------------------------------------------------
                           4338 ;Allocation info for local variables in function 'channel_check_interval'
                           4339 ;------------------------------------------------------------
                           4340 ;	../../core/net/mac/lpp.c:1026: channel_check_interval(void)
                           4341 ;	-----------------------------------------
                           4342 ;	 function channel_check_interval
                           4343 ;	-----------------------------------------
   1584                    4344 _channel_check_interval:
                           4345 ;	../../core/net/mac/lpp.c:1028: return OFF_TIME + LISTEN_TIME;
   1584 90 00 10           4346 	mov	dptr,#0x0010
   1587 22                 4347 	ret
                           4348 ;------------------------------------------------------------
                           4349 ;Allocation info for local variables in function 'init'
                           4350 ;------------------------------------------------------------
                           4351 ;	../../core/net/mac/lpp.c:1032: init(void)
                           4352 ;	-----------------------------------------
                           4353 ;	 function init
                           4354 ;	-----------------------------------------
   1588                    4355 _init:
                           4356 ;	../../core/net/mac/lpp.c:1034: restart_dutycycle(random_rand() % OFF_TIME);
   1588 12s00r00           4357 	lcall	_random_rand
   158B AE 82              4358 	mov	r6,dpl
   158D AF 83              4359 	mov	r7,dph
   158F 74 0F              4360 	mov	a,#0x0F
   1591 C0 E0              4361 	push	acc
   1593 E4                 4362 	clr	a
   1594 C0 E0              4363 	push	acc
   1596 8E 82              4364 	mov	dpl,r6
   1598 8F 83              4365 	mov	dph,r7
   159A 12s00r00           4366 	lcall	__moduint
   159D AE 82              4367 	mov	r6,dpl
   159F AF 83              4368 	mov	r7,dph
   15A1 15 81              4369 	dec	sp
   15A3 15 81              4370 	dec	sp
   15A5 8E 82              4371 	mov	dpl,r6
   15A7 8F 83              4372 	mov	dph,r7
   15A9 12s0Br58           4373 	lcall	_restart_dutycycle
                           4374 ;	../../core/net/mac/lpp.c:1036: lpp_is_on = 1;
   15AC 90s00r00           4375 	mov	dptr,#_lpp_is_on
   15AF 74 01              4376 	mov	a,#0x01
   15B1 F0                 4377 	movx	@dptr,a
                           4378 ;	../../core/net/mac/lpp.c:1038: announcement_register_listen_callback(listen_callback);
   15B2 90s05rF3           4379 	mov	dptr,#_listen_callback
   15B5 12s00r00           4380 	lcall	_announcement_register_listen_callback
                           4381 ;	../../core/net/mac/lpp.c:1040: memb_init(&queued_packets_memb);
   15B8 90s00r11           4382 	mov	dptr,#_queued_packets_memb
   15BB 75 F0 00           4383 	mov	b,#0x00
   15BE 12s00r00           4384 	lcall	_memb_init
                           4385 ;	../../core/net/mac/lpp.c:1041: list_init(queued_packets_list);
   15C1 90s00r0E           4386 	mov	dptr,#_queued_packets_list
   15C4 E0                 4387 	movx	a,@dptr
   15C5 FD                 4388 	mov	r5,a
   15C6 A3                 4389 	inc	dptr
   15C7 E0                 4390 	movx	a,@dptr
   15C8 FE                 4391 	mov	r6,a
   15C9 A3                 4392 	inc	dptr
   15CA E0                 4393 	movx	a,@dptr
   15CB FF                 4394 	mov	r7,a
   15CC 8D 82              4395 	mov	dpl,r5
   15CE 8E 83              4396 	mov	dph,r6
   15D0 8F F0              4397 	mov	b,r7
   15D2 12s00r00           4398 	lcall	_list_init
                           4399 ;	../../core/net/mac/lpp.c:1042: list_init(pending_packets_list);
   15D5 90s00r08           4400 	mov	dptr,#_pending_packets_list
   15D8 E0                 4401 	movx	a,@dptr
   15D9 FD                 4402 	mov	r5,a
   15DA A3                 4403 	inc	dptr
   15DB E0                 4404 	movx	a,@dptr
   15DC FE                 4405 	mov	r6,a
   15DD A3                 4406 	inc	dptr
   15DE E0                 4407 	movx	a,@dptr
   15DF FF                 4408 	mov	r7,a
   15E0 8D 82              4409 	mov	dpl,r5
   15E2 8E 83              4410 	mov	dph,r6
   15E4 8F F0              4411 	mov	b,r7
   15E6 02s00r00           4412 	ljmp	_list_init
                           4413 	.area CSEG    (CODE)
                           4414 	.area CONST   (CODE)
   0000                    4415 __str_0:
   0000 6E 75 6C 6C 20 70  4416 	.ascii "null packet"
        61 63 6B 65 74
   000B 0A                 4417 	.db 0x0A
   000C 00                 4418 	.db 0x00
   000D                    4419 __str_1:
   000D 69 20 3D 3D 20 4E  4420 	.ascii "i == NULL"
        55 4C 4C
   0016 0A                 4421 	.db 0x0A
   0017 00                 4422 	.db 0x00
   0018                    4423 __str_2:
   0018 6C 70 70 20 69 6E  4424 	.ascii "lpp input_packet framer error"
        70 75 74 5F 70 61
        63 6B 65 74 20 66
        72 61 6D 65 72 20
        65 72 72 6F 72
   0035 0A                 4425 	.db 0x0A
   0036 00                 4426 	.db 0x00
   0037                    4427 _lpp_driver:
   0037r48s00 80           4428 	.byte _str_3,(_str_3 >> 8),#0x80
   003Ar88s15              4429 	.byte _init,(_init >> 8)
   003Cr8As0B              4430 	.byte _send_packet,(_send_packet >> 8)
   003ErDAs0E              4431 	.byte _send_list,(_send_list >> 8)
   0040r9Cs10              4432 	.byte _input_packet,(_input_packet >> 8)
   0042r5Es15              4433 	.byte _on,(_on >> 8)
   0044r6Bs15              4434 	.byte _off,(_off >> 8)
   0046r84s15              4435 	.byte _channel_check_interval,(_channel_check_interval >> 8)
   0048                    4436 _str_3:
   0048 4C 50 50           4437 	.ascii "LPP"
   004B 00                 4438 	.db 0x00
                           4439 	.area XINIT   (CODE)
   0000                    4440 __xinit__is_listening:
   0000 00                 4441 	.db #0x00	; 0
   0001                    4442 __xinit__off_time_adjustment:
   0001 00 00              4443 	.byte #0x00,#0x00	; 0
   0003                    4444 __xinit__off_time:
   0003 0F 00              4445 	.byte #0x0F,#0x00	; 15
   0005                    4446 __xinit__pending_packets_list_list:
                           4447 ; generic printIvalPtr
   0005 00 00 00           4448 	.byte #0x00,#0x00,#0x00
   0008                    4449 __xinit__pending_packets_list:
   0008r05s00 00           4450 	.byte _pending_packets_list_list,(_pending_packets_list_list >> 8),#0x00
   000B                    4451 __xinit__queued_packets_list_list:
                           4452 ; generic printIvalPtr
   000B 00 00 00           4453 	.byte #0x00,#0x00,#0x00
   000E                    4454 __xinit__queued_packets_list:
   000Er0Bs00 00           4455 	.byte _queued_packets_list_list,(_queued_packets_list_list >> 8),#0x00
   0011                    4456 __xinit__queued_packets_memb:
   0011 29 00              4457 	.byte #0x29,#0x00	; 41
   0013 04 00              4458 	.byte #0x04,#0x00	; 4
   0015r20s00 00           4459 	.byte _queued_packets_memb_memb_count,(_queued_packets_memb_memb_count >> 8),#0x00
   0018r24s00 00           4460 	.byte _queued_packets_memb_memb_mem,(_queued_packets_memb_memb_mem >> 8),#0x00
   001B                    4461 __xinit__encounter_list_list:
                           4462 ; generic printIvalPtr
   001B 00 00 00           4463 	.byte #0x00,#0x00,#0x00
   001E                    4464 __xinit__encounter_list:
   001Er1Bs00 00           4465 	.byte _encounter_list_list,(_encounter_list_list >> 8),#0x00
   0021                    4466 __xinit__encounter_memb:
   0021 31 00              4467 	.byte #0x31,#0x00	; 49
   0023 04 00              4468 	.byte #0x04,#0x00	; 4
   0025rC8s00 00           4469 	.byte _encounter_memb_memb_count,(_encounter_memb_memb_count >> 8),#0x00
   0028rCCs00 00           4470 	.byte _encounter_memb_memb_mem,(_encounter_memb_memb_mem >> 8),#0x00
   002B                    4471 __xinit__is_streaming:
   002B 00                 4472 	.db #0x00	; 0
                           4473 	.area CABS    (ABS,CODE)
