                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.1 #7100 (Apr  1 2013) (Linux)
                              4 ; This file was generated Tue Apr 23 09:41:18 2013
                              5 ;--------------------------------------------------------
                              6 	.module rudolph1
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _trickle_send
                             13 	.globl _trickle_close
                             14 	.globl _trickle_open
                             15 	.globl _ipolite_send
                             16 	.globl _ipolite_close
                             17 	.globl _ipolite_open
                             18 	.globl _packetbuf_hdralloc
                             19 	.globl _packetbuf_set_datalen
                             20 	.globl _packetbuf_hdrptr
                             21 	.globl _packetbuf_dataptr
                             22 	.globl _packetbuf_clear
                             23 	.globl _ctimer_stop
                             24 	.globl _ctimer_set
                             25 	.globl _IRCON2_P2IF
                             26 	.globl _IRCON2_UTX0IF
                             27 	.globl _IRCON2_UTX1IF
                             28 	.globl _IRCON2_P1IF
                             29 	.globl _IRCON2_WDTIF
                             30 	.globl _CY
                             31 	.globl _AC
                             32 	.globl _F0
                             33 	.globl _RS1
                             34 	.globl _RS0
                             35 	.globl _OV
                             36 	.globl _F1
                             37 	.globl _P
                             38 	.globl _IRCON_DMAIF
                             39 	.globl _IRCON_T1IF
                             40 	.globl _IRCON_T2IF
                             41 	.globl _IRCON_T3IF
                             42 	.globl _IRCON_T4IF
                             43 	.globl _IRCON_P0IF
                             44 	.globl _IRCON_STIF
                             45 	.globl _IEN1_DMAIE
                             46 	.globl _IEN1_T1IE
                             47 	.globl _IEN1_T2IE
                             48 	.globl _IEN1_T3IE
                             49 	.globl _IEN1_T4IE
                             50 	.globl _IEN1_P0IE
                             51 	.globl _IEN0_RFERRIE
                             52 	.globl _IEN0_ADCIE
                             53 	.globl _IEN0_URX0IE
                             54 	.globl _IEN0_URX1IE
                             55 	.globl _IEN0_ENCIE
                             56 	.globl _IEN0_STIE
                             57 	.globl _IEN0_EA
                             58 	.globl _EA
                             59 	.globl _P2_4
                             60 	.globl _P2_3
                             61 	.globl _P2_2
                             62 	.globl _P2_1
                             63 	.globl _P2_0
                             64 	.globl _S0CON_ENCIF_0
                             65 	.globl _S0CON_ENCIF_1
                             66 	.globl _P1_7
                             67 	.globl _P1_6
                             68 	.globl _P1_5
                             69 	.globl _P1_4
                             70 	.globl _P1_3
                             71 	.globl _P1_2
                             72 	.globl _P1_1
                             73 	.globl _P1_0
                             74 	.globl _TCON_IT0
                             75 	.globl _TCON_RFERRIF
                             76 	.globl _TCON_IT1
                             77 	.globl _TCON_URX0IF
                             78 	.globl _TCON_ADCIF
                             79 	.globl _TCON_URX1IF
                             80 	.globl _P0_0
                             81 	.globl _P0_1
                             82 	.globl _P0_2
                             83 	.globl _P0_3
                             84 	.globl _P0_4
                             85 	.globl _P0_5
                             86 	.globl _P0_6
                             87 	.globl _P0_7
                             88 	.globl _P2DIR
                             89 	.globl _P1DIR
                             90 	.globl _P0DIR
                             91 	.globl _U1GCR
                             92 	.globl _U1UCR
                             93 	.globl _U1BAUD
                             94 	.globl _U1BUF
                             95 	.globl _U1CSR
                             96 	.globl _P2INP
                             97 	.globl _P1INP
                             98 	.globl _P2SEL
                             99 	.globl _P1SEL
                            100 	.globl _P0SEL
                            101 	.globl _ADCCFG
                            102 	.globl _PERCFG
                            103 	.globl _B
                            104 	.globl _T4CC1
                            105 	.globl _T4CCTL1
                            106 	.globl _T4CC0
                            107 	.globl _T4CCTL0
                            108 	.globl _T4CTL
                            109 	.globl _T4CNT
                            110 	.globl _RFIF
                            111 	.globl _IRCON2
                            112 	.globl _T1CCTL2
                            113 	.globl _T1CCTL1
                            114 	.globl _T1CCTL0
                            115 	.globl _T1CTL
                            116 	.globl _T1CNTH
                            117 	.globl _T1CNTL
                            118 	.globl _RFST
                            119 	.globl _ACC
                            120 	.globl _T1CC2H
                            121 	.globl _T1CC2L
                            122 	.globl _T1CC1H
                            123 	.globl _T1CC1L
                            124 	.globl _T1CC0H
                            125 	.globl _T1CC0L
                            126 	.globl _RFD
                            127 	.globl _TIMIF
                            128 	.globl _DMAREQ
                            129 	.globl _DMAARM
                            130 	.globl _DMA0CFGH
                            131 	.globl _DMA0CFGL
                            132 	.globl _DMA1CFGH
                            133 	.globl _DMA1CFGL
                            134 	.globl _DMAIRQ
                            135 	.globl _PSW
                            136 	.globl _T3CC1
                            137 	.globl _T3CCTL1
                            138 	.globl _T3CC0
                            139 	.globl _T3CCTL0
                            140 	.globl _T3CTL
                            141 	.globl _T3CNT
                            142 	.globl _WDCTL
                            143 	.globl _T2CON
                            144 	.globl _MEMCTR
                            145 	.globl _CLKCON
                            146 	.globl _U0GCR
                            147 	.globl _U0UCR
                            148 	.globl _T2CNF
                            149 	.globl _U0BAUD
                            150 	.globl _U0BUF
                            151 	.globl _IRCON
                            152 	.globl _SLEEP
                            153 	.globl _RNDH
                            154 	.globl _RNDL
                            155 	.globl _ADCH
                            156 	.globl _ADCL
                            157 	.globl _IP1
                            158 	.globl _IEN1
                            159 	.globl _RCCTL
                            160 	.globl _ADCCON3
                            161 	.globl _ADCCON2
                            162 	.globl _ADCCON1
                            163 	.globl _ENCCS
                            164 	.globl _ENCDO
                            165 	.globl _ENCDI
                            166 	.globl _FWDATA
                            167 	.globl _FCTL
                            168 	.globl _FADDRH
                            169 	.globl _FADDRL
                            170 	.globl _FWT
                            171 	.globl _IP0
                            172 	.globl _IEN0
                            173 	.globl _IE
                            174 	.globl _T2THD
                            175 	.globl _T2TLD
                            176 	.globl _T2CAPHPH
                            177 	.globl _T2CAPLPL
                            178 	.globl _T2OF2
                            179 	.globl _T2OF1
                            180 	.globl _T2OF0
                            181 	.globl _P2
                            182 	.globl _PSBANK
                            183 	.globl _FMAP
                            184 	.globl _T2PEROF2
                            185 	.globl _T2PEROF1
                            186 	.globl _T2PEROF0
                            187 	.globl _S1CON
                            188 	.globl _IEN2
                            189 	.globl _HSRC
                            190 	.globl _S0CON
                            191 	.globl _ST2
                            192 	.globl _ST1
                            193 	.globl _ST0
                            194 	.globl _T2CMP
                            195 	.globl __XPAGE
                            196 	.globl _DPS
                            197 	.globl _RFIM
                            198 	.globl _P1
                            199 	.globl _P0INP
                            200 	.globl _P1IEN
                            201 	.globl _PICTL
                            202 	.globl _P2IFG
                            203 	.globl _P1IFG
                            204 	.globl _P0IFG
                            205 	.globl _TCON
                            206 	.globl _PCON
                            207 	.globl _U0CSR
                            208 	.globl _DPH1
                            209 	.globl _DPL1
                            210 	.globl _DPH0
                            211 	.globl _DPL0
                            212 	.globl _SP
                            213 	.globl _P0
                            214 	.globl _ADC_SHADOW
                            215 	.globl _U1BUF_SHADOW
                            216 	.globl _RFD_SHADOW
                            217 	.globl _U0BUF_SHADOW
                            218 	.globl _RFSTATUS
                            219 	.globl _CHIPID
                            220 	.globl _CHVER
                            221 	.globl _FSMTC1
                            222 	.globl _RXFIFOCNT
                            223 	.globl _IOCFG3
                            224 	.globl _IOCFG2
                            225 	.globl _IOCFG1
                            226 	.globl _IOCFG0
                            227 	.globl _SHORTADDRL
                            228 	.globl _SHORTADDRH
                            229 	.globl _PANIDL
                            230 	.globl _PANIDH
                            231 	.globl _IEEE_ADDR7
                            232 	.globl _IEEE_ADDR6
                            233 	.globl _IEEE_ADDR5
                            234 	.globl _IEEE_ADDR4
                            235 	.globl _IEEE_ADDR3
                            236 	.globl _IEEE_ADDR2
                            237 	.globl _IEEE_ADDR1
                            238 	.globl _IEEE_ADDR0
                            239 	.globl _DACTSTL
                            240 	.globl _DACTSTH
                            241 	.globl _ADCTSTL
                            242 	.globl _ADCTSTH
                            243 	.globl _FSMSTATE
                            244 	.globl _AGCCTRLL
                            245 	.globl _AGCCTRLH
                            246 	.globl _MANORL
                            247 	.globl _MANORH
                            248 	.globl _MANANDL
                            249 	.globl _MANANDH
                            250 	.globl _FSMTCL
                            251 	.globl _FSMTCH
                            252 	.globl _RFPWR
                            253 	.globl _CSPT
                            254 	.globl _CSPCTRL
                            255 	.globl _CSPZ
                            256 	.globl _CSPY
                            257 	.globl _CSPX
                            258 	.globl _FSCTRLL
                            259 	.globl _FSCTRLH
                            260 	.globl _RXCTRL1L
                            261 	.globl _RXCTRL1H
                            262 	.globl _RXCTRL0L
                            263 	.globl _RXCTRL0H
                            264 	.globl _TXCTRLL
                            265 	.globl _TXCTRLH
                            266 	.globl _SYNCWORDL
                            267 	.globl _SYNCWORDH
                            268 	.globl _RSSIL
                            269 	.globl _RSSIH
                            270 	.globl _MDMCTRL1L
                            271 	.globl _MDMCTRL1H
                            272 	.globl _MDMCTRL0L
                            273 	.globl _MDMCTRL0H
                            274 	.globl _rudolph1_open
                            275 	.globl _rudolph1_close
                            276 	.globl _rudolph1_send
                            277 	.globl _rudolph1_stop
                            278 ;--------------------------------------------------------
                            279 ; special function registers
                            280 ;--------------------------------------------------------
                            281 	.area RSEG    (ABS,DATA)
   0000                     282 	.org 0x0000
                    0080    283 _P0	=	0x0080
                    0081    284 _SP	=	0x0081
                    0082    285 _DPL0	=	0x0082
                    0083    286 _DPH0	=	0x0083
                    0084    287 _DPL1	=	0x0084
                    0085    288 _DPH1	=	0x0085
                    0086    289 _U0CSR	=	0x0086
                    0087    290 _PCON	=	0x0087
                    0088    291 _TCON	=	0x0088
                    0089    292 _P0IFG	=	0x0089
                    008A    293 _P1IFG	=	0x008a
                    008B    294 _P2IFG	=	0x008b
                    008C    295 _PICTL	=	0x008c
                    008D    296 _P1IEN	=	0x008d
                    008F    297 _P0INP	=	0x008f
                    0090    298 _P1	=	0x0090
                    0091    299 _RFIM	=	0x0091
                    0092    300 _DPS	=	0x0092
                    0093    301 __XPAGE	=	0x0093
                    0094    302 _T2CMP	=	0x0094
                    0095    303 _ST0	=	0x0095
                    0096    304 _ST1	=	0x0096
                    0097    305 _ST2	=	0x0097
                    0098    306 _S0CON	=	0x0098
                    0099    307 _HSRC	=	0x0099
                    009A    308 _IEN2	=	0x009a
                    009B    309 _S1CON	=	0x009b
                    009C    310 _T2PEROF0	=	0x009c
                    009D    311 _T2PEROF1	=	0x009d
                    009E    312 _T2PEROF2	=	0x009e
                    009F    313 _FMAP	=	0x009f
                    009F    314 _PSBANK	=	0x009f
                    00A0    315 _P2	=	0x00a0
                    00A1    316 _T2OF0	=	0x00a1
                    00A2    317 _T2OF1	=	0x00a2
                    00A3    318 _T2OF2	=	0x00a3
                    00A4    319 _T2CAPLPL	=	0x00a4
                    00A5    320 _T2CAPHPH	=	0x00a5
                    00A6    321 _T2TLD	=	0x00a6
                    00A7    322 _T2THD	=	0x00a7
                    00A8    323 _IE	=	0x00a8
                    00A8    324 _IEN0	=	0x00a8
                    00A9    325 _IP0	=	0x00a9
                    00AB    326 _FWT	=	0x00ab
                    00AC    327 _FADDRL	=	0x00ac
                    00AD    328 _FADDRH	=	0x00ad
                    00AE    329 _FCTL	=	0x00ae
                    00AF    330 _FWDATA	=	0x00af
                    00B1    331 _ENCDI	=	0x00b1
                    00B2    332 _ENCDO	=	0x00b2
                    00B3    333 _ENCCS	=	0x00b3
                    00B4    334 _ADCCON1	=	0x00b4
                    00B5    335 _ADCCON2	=	0x00b5
                    00B6    336 _ADCCON3	=	0x00b6
                    00B7    337 _RCCTL	=	0x00b7
                    00B8    338 _IEN1	=	0x00b8
                    00B9    339 _IP1	=	0x00b9
                    00BA    340 _ADCL	=	0x00ba
                    00BB    341 _ADCH	=	0x00bb
                    00BC    342 _RNDL	=	0x00bc
                    00BD    343 _RNDH	=	0x00bd
                    00BE    344 _SLEEP	=	0x00be
                    00C0    345 _IRCON	=	0x00c0
                    00C1    346 _U0BUF	=	0x00c1
                    00C2    347 _U0BAUD	=	0x00c2
                    00C3    348 _T2CNF	=	0x00c3
                    00C4    349 _U0UCR	=	0x00c4
                    00C5    350 _U0GCR	=	0x00c5
                    00C6    351 _CLKCON	=	0x00c6
                    00C7    352 _MEMCTR	=	0x00c7
                    00C8    353 _T2CON	=	0x00c8
                    00C9    354 _WDCTL	=	0x00c9
                    00CA    355 _T3CNT	=	0x00ca
                    00CB    356 _T3CTL	=	0x00cb
                    00CC    357 _T3CCTL0	=	0x00cc
                    00CD    358 _T3CC0	=	0x00cd
                    00CE    359 _T3CCTL1	=	0x00ce
                    00CF    360 _T3CC1	=	0x00cf
                    00D0    361 _PSW	=	0x00d0
                    00D1    362 _DMAIRQ	=	0x00d1
                    00D2    363 _DMA1CFGL	=	0x00d2
                    00D3    364 _DMA1CFGH	=	0x00d3
                    00D4    365 _DMA0CFGL	=	0x00d4
                    00D5    366 _DMA0CFGH	=	0x00d5
                    00D6    367 _DMAARM	=	0x00d6
                    00D7    368 _DMAREQ	=	0x00d7
                    00D8    369 _TIMIF	=	0x00d8
                    00D9    370 _RFD	=	0x00d9
                    00DA    371 _T1CC0L	=	0x00da
                    00DB    372 _T1CC0H	=	0x00db
                    00DC    373 _T1CC1L	=	0x00dc
                    00DD    374 _T1CC1H	=	0x00dd
                    00DE    375 _T1CC2L	=	0x00de
                    00DF    376 _T1CC2H	=	0x00df
                    00E0    377 _ACC	=	0x00e0
                    00E1    378 _RFST	=	0x00e1
                    00E2    379 _T1CNTL	=	0x00e2
                    00E3    380 _T1CNTH	=	0x00e3
                    00E4    381 _T1CTL	=	0x00e4
                    00E5    382 _T1CCTL0	=	0x00e5
                    00E6    383 _T1CCTL1	=	0x00e6
                    00E7    384 _T1CCTL2	=	0x00e7
                    00E8    385 _IRCON2	=	0x00e8
                    00E9    386 _RFIF	=	0x00e9
                    00EA    387 _T4CNT	=	0x00ea
                    00EB    388 _T4CTL	=	0x00eb
                    00EC    389 _T4CCTL0	=	0x00ec
                    00ED    390 _T4CC0	=	0x00ed
                    00EE    391 _T4CCTL1	=	0x00ee
                    00EF    392 _T4CC1	=	0x00ef
                    00F0    393 _B	=	0x00f0
                    00F1    394 _PERCFG	=	0x00f1
                    00F2    395 _ADCCFG	=	0x00f2
                    00F3    396 _P0SEL	=	0x00f3
                    00F4    397 _P1SEL	=	0x00f4
                    00F5    398 _P2SEL	=	0x00f5
                    00F6    399 _P1INP	=	0x00f6
                    00F7    400 _P2INP	=	0x00f7
                    00F8    401 _U1CSR	=	0x00f8
                    00F9    402 _U1BUF	=	0x00f9
                    00FA    403 _U1BAUD	=	0x00fa
                    00FB    404 _U1UCR	=	0x00fb
                    00FC    405 _U1GCR	=	0x00fc
                    00FD    406 _P0DIR	=	0x00fd
                    00FE    407 _P1DIR	=	0x00fe
                    00FF    408 _P2DIR	=	0x00ff
                            409 ;--------------------------------------------------------
                            410 ; special function bits
                            411 ;--------------------------------------------------------
                            412 	.area RSEG    (ABS,DATA)
   0000                     413 	.org 0x0000
                    0087    414 _P0_7	=	0x0087
                    0086    415 _P0_6	=	0x0086
                    0085    416 _P0_5	=	0x0085
                    0084    417 _P0_4	=	0x0084
                    0083    418 _P0_3	=	0x0083
                    0082    419 _P0_2	=	0x0082
                    0081    420 _P0_1	=	0x0081
                    0080    421 _P0_0	=	0x0080
                    008F    422 _TCON_URX1IF	=	0x008f
                    008D    423 _TCON_ADCIF	=	0x008d
                    008B    424 _TCON_URX0IF	=	0x008b
                    008A    425 _TCON_IT1	=	0x008a
                    0089    426 _TCON_RFERRIF	=	0x0089
                    0088    427 _TCON_IT0	=	0x0088
                    0090    428 _P1_0	=	0x0090
                    0091    429 _P1_1	=	0x0091
                    0092    430 _P1_2	=	0x0092
                    0093    431 _P1_3	=	0x0093
                    0094    432 _P1_4	=	0x0094
                    0095    433 _P1_5	=	0x0095
                    0096    434 _P1_6	=	0x0096
                    0097    435 _P1_7	=	0x0097
                    0099    436 _S0CON_ENCIF_1	=	0x0099
                    0098    437 _S0CON_ENCIF_0	=	0x0098
                    00A0    438 _P2_0	=	0x00a0
                    00A1    439 _P2_1	=	0x00a1
                    00A2    440 _P2_2	=	0x00a2
                    00A3    441 _P2_3	=	0x00a3
                    00A4    442 _P2_4	=	0x00a4
                    00AF    443 _EA	=	0x00af
                    00AF    444 _IEN0_EA	=	0x00af
                    00AD    445 _IEN0_STIE	=	0x00ad
                    00AC    446 _IEN0_ENCIE	=	0x00ac
                    00AB    447 _IEN0_URX1IE	=	0x00ab
                    00AA    448 _IEN0_URX0IE	=	0x00aa
                    00A9    449 _IEN0_ADCIE	=	0x00a9
                    00A8    450 _IEN0_RFERRIE	=	0x00a8
                    00BD    451 _IEN1_P0IE	=	0x00bd
                    00BC    452 _IEN1_T4IE	=	0x00bc
                    00BB    453 _IEN1_T3IE	=	0x00bb
                    00BA    454 _IEN1_T2IE	=	0x00ba
                    00B9    455 _IEN1_T1IE	=	0x00b9
                    00B8    456 _IEN1_DMAIE	=	0x00b8
                    00C7    457 _IRCON_STIF	=	0x00c7
                    00C5    458 _IRCON_P0IF	=	0x00c5
                    00C4    459 _IRCON_T4IF	=	0x00c4
                    00C3    460 _IRCON_T3IF	=	0x00c3
                    00C2    461 _IRCON_T2IF	=	0x00c2
                    00C1    462 _IRCON_T1IF	=	0x00c1
                    00C0    463 _IRCON_DMAIF	=	0x00c0
                    00D0    464 _P	=	0x00d0
                    00D1    465 _F1	=	0x00d1
                    00D2    466 _OV	=	0x00d2
                    00D3    467 _RS0	=	0x00d3
                    00D4    468 _RS1	=	0x00d4
                    00D5    469 _F0	=	0x00d5
                    00D6    470 _AC	=	0x00d6
                    00D7    471 _CY	=	0x00d7
                    00EC    472 _IRCON2_WDTIF	=	0x00ec
                    00EB    473 _IRCON2_P1IF	=	0x00eb
                    00EA    474 _IRCON2_UTX1IF	=	0x00ea
                    00E9    475 _IRCON2_UTX0IF	=	0x00e9
                    00E8    476 _IRCON2_P2IF	=	0x00e8
                            477 ;--------------------------------------------------------
                            478 ; overlayable register banks
                            479 ;--------------------------------------------------------
                            480 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     481 	.ds 8
                            482 ;--------------------------------------------------------
                            483 ; internal ram data
                            484 ;--------------------------------------------------------
                            485 	.area DSEG    (DATA)
                            486 ;--------------------------------------------------------
                            487 ; overlayable items in internal ram 
                            488 ;--------------------------------------------------------
                            489 	.area OSEG    (OVR,DATA)
                            490 ;--------------------------------------------------------
                            491 ; indirectly addressable internal ram data
                            492 ;--------------------------------------------------------
                            493 	.area ISEG    (DATA)
                            494 ;--------------------------------------------------------
                            495 ; absolute internal ram data
                            496 ;--------------------------------------------------------
                            497 	.area IABS    (ABS,DATA)
                            498 	.area IABS    (ABS,DATA)
                            499 ;--------------------------------------------------------
                            500 ; bit data
                            501 ;--------------------------------------------------------
                            502 	.area BSEG    (BIT)
                            503 ;--------------------------------------------------------
                            504 ; paged external ram data
                            505 ;--------------------------------------------------------
                            506 	.area PSEG    (PAG,XDATA)
                            507 ;--------------------------------------------------------
                            508 ; external ram data
                            509 ;--------------------------------------------------------
                            510 	.area XSEG    (XDATA)
                    DF02    511 _MDMCTRL0H	=	0xdf02
                    DF03    512 _MDMCTRL0L	=	0xdf03
                    DF04    513 _MDMCTRL1H	=	0xdf04
                    DF05    514 _MDMCTRL1L	=	0xdf05
                    DF06    515 _RSSIH	=	0xdf06
                    DF07    516 _RSSIL	=	0xdf07
                    DF08    517 _SYNCWORDH	=	0xdf08
                    DF09    518 _SYNCWORDL	=	0xdf09
                    DF0A    519 _TXCTRLH	=	0xdf0a
                    DF0B    520 _TXCTRLL	=	0xdf0b
                    DF0C    521 _RXCTRL0H	=	0xdf0c
                    DF0D    522 _RXCTRL0L	=	0xdf0d
                    DF0E    523 _RXCTRL1H	=	0xdf0e
                    DF0F    524 _RXCTRL1L	=	0xdf0f
                    DF10    525 _FSCTRLH	=	0xdf10
                    DF11    526 _FSCTRLL	=	0xdf11
                    DF12    527 _CSPX	=	0xdf12
                    DF13    528 _CSPY	=	0xdf13
                    DF14    529 _CSPZ	=	0xdf14
                    DF15    530 _CSPCTRL	=	0xdf15
                    DF16    531 _CSPT	=	0xdf16
                    DF17    532 _RFPWR	=	0xdf17
                    DF20    533 _FSMTCH	=	0xdf20
                    DF21    534 _FSMTCL	=	0xdf21
                    DF22    535 _MANANDH	=	0xdf22
                    DF23    536 _MANANDL	=	0xdf23
                    DF24    537 _MANORH	=	0xdf24
                    DF25    538 _MANORL	=	0xdf25
                    DF26    539 _AGCCTRLH	=	0xdf26
                    DF27    540 _AGCCTRLL	=	0xdf27
                    DF39    541 _FSMSTATE	=	0xdf39
                    DF3A    542 _ADCTSTH	=	0xdf3a
                    DF3B    543 _ADCTSTL	=	0xdf3b
                    DF3C    544 _DACTSTH	=	0xdf3c
                    DF3D    545 _DACTSTL	=	0xdf3d
                    DF43    546 _IEEE_ADDR0	=	0xdf43
                    DF44    547 _IEEE_ADDR1	=	0xdf44
                    DF45    548 _IEEE_ADDR2	=	0xdf45
                    DF46    549 _IEEE_ADDR3	=	0xdf46
                    DF47    550 _IEEE_ADDR4	=	0xdf47
                    DF48    551 _IEEE_ADDR5	=	0xdf48
                    DF49    552 _IEEE_ADDR6	=	0xdf49
                    DF4A    553 _IEEE_ADDR7	=	0xdf4a
                    DF4B    554 _PANIDH	=	0xdf4b
                    DF4C    555 _PANIDL	=	0xdf4c
                    DF4D    556 _SHORTADDRH	=	0xdf4d
                    DF4E    557 _SHORTADDRL	=	0xdf4e
                    DF4F    558 _IOCFG0	=	0xdf4f
                    DF50    559 _IOCFG1	=	0xdf50
                    DF51    560 _IOCFG2	=	0xdf51
                    DF52    561 _IOCFG3	=	0xdf52
                    DF53    562 _RXFIFOCNT	=	0xdf53
                    DF54    563 _FSMTC1	=	0xdf54
                    DF60    564 _CHVER	=	0xdf60
                    DF61    565 _CHIPID	=	0xdf61
                    DF62    566 _RFSTATUS	=	0xdf62
                    DFC1    567 _U0BUF_SHADOW	=	0xdfc1
                    DFD9    568 _RFD_SHADOW	=	0xdfd9
                    DFF9    569 _U1BUF_SHADOW	=	0xdff9
                    DFBA    570 _ADC_SHADOW	=	0xdfba
                            571 ;--------------------------------------------------------
                            572 ; absolute external ram data
                            573 ;--------------------------------------------------------
                            574 	.area XABS    (ABS,XDATA)
                            575 ;--------------------------------------------------------
                            576 ; external initialized ram data
                            577 ;--------------------------------------------------------
                            578 	.area XISEG   (XDATA)
                            579 	.area HOME    (CODE)
                            580 	.area GSINIT0 (CODE)
                            581 	.area GSINIT1 (CODE)
                            582 	.area GSINIT2 (CODE)
                            583 	.area GSINIT3 (CODE)
                            584 	.area GSINIT4 (CODE)
                            585 	.area GSINIT5 (CODE)
                            586 	.area GSINIT  (CODE)
                            587 	.area GSFINAL (CODE)
                            588 	.area CSEG    (CODE)
                            589 ;--------------------------------------------------------
                            590 ; global & static initialisations
                            591 ;--------------------------------------------------------
                            592 	.area HOME    (CODE)
                            593 	.area GSINIT  (CODE)
                            594 	.area GSFINAL (CODE)
                            595 	.area GSINIT  (CODE)
                            596 ;--------------------------------------------------------
                            597 ; Home
                            598 ;--------------------------------------------------------
                            599 	.area HOME    (CODE)
                            600 	.area HOME    (CODE)
                            601 ;--------------------------------------------------------
                            602 ; code
                            603 ;--------------------------------------------------------
                            604 	.area CSEG    (CODE)
                            605 ;------------------------------------------------------------
                            606 ;Allocation info for local variables in function 'read_data'
                            607 ;------------------------------------------------------------
                            608 ;dataptr                   Allocated to stack - _bp -5
                            609 ;chunk                     Allocated to stack - _bp -7
                            610 ;c                         Allocated to stack - _bp +1
                            611 ;len                       Allocated to registers r3 r4 
                            612 ;------------------------------------------------------------
                            613 ;	../../core/net/rime/rudolph1.c:89: read_data(struct rudolph1_conn *c, uint8_t *dataptr, int chunk)
                            614 ;	-----------------------------------------
                            615 ;	 function read_data
                            616 ;	-----------------------------------------
   0000                     617 _read_data:
                    0007    618 	ar7 = 0x07
                    0006    619 	ar6 = 0x06
                    0005    620 	ar5 = 0x05
                    0004    621 	ar4 = 0x04
                    0003    622 	ar3 = 0x03
                    0002    623 	ar2 = 0x02
                    0001    624 	ar1 = 0x01
                    0000    625 	ar0 = 0x00
   0000 C0*00               626 	push	_bp
   0002 85 81*00            627 	mov	_bp,sp
   0005 C0 82               628 	push	dpl
   0007 C0 83               629 	push	dph
   0009 C0 F0               630 	push	b
                            631 ;	../../core/net/rime/rudolph1.c:91: int len = 0;
   000B 7B 00               632 	mov	r3,#0x00
   000D 7C 00               633 	mov	r4,#0x00
                            634 ;	../../core/net/rime/rudolph1.c:93: if(c->cb->read_chunk) {
   000F A8*00               635 	mov	r0,_bp
   0011 08                  636 	inc	r0
   0012 74 88               637 	mov	a,#0x88
   0014 26                  638 	add	a,@r0
   0015 FA                  639 	mov	r2,a
   0016 E4                  640 	clr	a
   0017 08                  641 	inc	r0
   0018 36                  642 	addc	a,@r0
   0019 FE                  643 	mov	r6,a
   001A 08                  644 	inc	r0
   001B 86 07               645 	mov	ar7,@r0
   001D 8A 82               646 	mov	dpl,r2
   001F 8E 83               647 	mov	dph,r6
   0021 8F F0               648 	mov	b,r7
   0023 12s00r00            649 	lcall	__gptrget
   0026 FA                  650 	mov	r2,a
   0027 A3                  651 	inc	dptr
   0028 12s00r00            652 	lcall	__gptrget
   002B FE                  653 	mov	r6,a
   002C A3                  654 	inc	dptr
   002D 12s00r00            655 	lcall	__gptrget
   0030 FF                  656 	mov	r7,a
   0031 74 02               657 	mov	a,#0x02
   0033 2A                  658 	add	a,r2
   0034 FA                  659 	mov	r2,a
   0035 E4                  660 	clr	a
   0036 3E                  661 	addc	a,r6
   0037 FE                  662 	mov	r6,a
   0038 8A 82               663 	mov	dpl,r2
   003A 8E 83               664 	mov	dph,r6
   003C 8F F0               665 	mov	b,r7
   003E 12s00r00            666 	lcall	__gptrget
   0041 FE                  667 	mov	r6,a
   0042 A3                  668 	inc	dptr
   0043 12s00r00            669 	lcall	__gptrget
   0046 FF                  670 	mov	r7,a
   0047 4E                  671 	orl	a,r6
   0048 60 5A               672 	jz	00102$
                            673 ;	../../core/net/rime/rudolph1.c:94: len = c->cb->read_chunk(c, chunk * RUDOLPH1_DATASIZE,
   004A E5*00               674 	mov	a,_bp
   004C 24 F9               675 	add	a,#0xf9
   004E F8                  676 	mov	r0,a
   004F 86 02               677 	mov	ar2,@r0
   0051 08                  678 	inc	r0
   0052 E6                  679 	mov	a,@r0
   0053 54 03               680 	anl	a,#0x03
   0055 A2 E0               681 	mov	c,acc.0
   0057 CA                  682 	xch	a,r2
   0058 13                  683 	rrc	a
   0059 CA                  684 	xch	a,r2
   005A 13                  685 	rrc	a
   005B A2 E0               686 	mov	c,acc.0
   005D CA                  687 	xch	a,r2
   005E 13                  688 	rrc	a
   005F CA                  689 	xch	a,r2
   0060 13                  690 	rrc	a
   0061 CA                  691 	xch	a,r2
   0062 FD                  692 	mov	r5,a
   0063 74 40               693 	mov	a,#0x40
   0065 C0 E0               694 	push	acc
   0067 E4                  695 	clr	a
   0068 C0 E0               696 	push	acc
   006A E5*00               697 	mov	a,_bp
   006C 24 FB               698 	add	a,#0xfb
   006E F8                  699 	mov	r0,a
   006F E6                  700 	mov	a,@r0
   0070 C0 E0               701 	push	acc
   0072 08                  702 	inc	r0
   0073 E6                  703 	mov	a,@r0
   0074 C0 E0               704 	push	acc
   0076 08                  705 	inc	r0
   0077 E6                  706 	mov	a,@r0
   0078 C0 E0               707 	push	acc
   007A C0 02               708 	push	ar2
   007C C0 05               709 	push	ar5
   007E 74r96               710 	mov	a,#00108$
   0080 C0 E0               711 	push	acc
   0082 74s00               712 	mov	a,#(00108$ >> 8)
   0084 C0 E0               713 	push	acc
   0086 C0 06               714 	push	ar6
   0088 C0 07               715 	push	ar7
   008A A8*00               716 	mov	r0,_bp
   008C 08                  717 	inc	r0
   008D 86 82               718 	mov	dpl,@r0
   008F 08                  719 	inc	r0
   0090 86 83               720 	mov	dph,@r0
   0092 08                  721 	inc	r0
   0093 86 F0               722 	mov	b,@r0
   0095 22                  723 	ret
   0096                     724 00108$:
   0096 AE 82               725 	mov	r6,dpl
   0098 AF 83               726 	mov	r7,dph
   009A E5 81               727 	mov	a,sp
   009C 24 F9               728 	add	a,#0xf9
   009E F5 81               729 	mov	sp,a
   00A0 8E 03               730 	mov	ar3,r6
   00A2 8F 04               731 	mov	ar4,r7
   00A4                     732 00102$:
                            733 ;	../../core/net/rime/rudolph1.c:97: return len;
   00A4 8B 82               734 	mov	dpl,r3
   00A6 8C 83               735 	mov	dph,r4
   00A8 85*00 81            736 	mov	sp,_bp
   00AB D0*00               737 	pop	_bp
   00AD 22                  738 	ret
                            739 ;------------------------------------------------------------
                            740 ;Allocation info for local variables in function 'format_data'
                            741 ;------------------------------------------------------------
                            742 ;chunk                     Allocated to stack - _bp -4
                            743 ;c                         Allocated to stack - _bp +1
                            744 ;p                         Allocated to stack - _bp +4
                            745 ;------------------------------------------------------------
                            746 ;	../../core/net/rime/rudolph1.c:101: format_data(struct rudolph1_conn *c, int chunk)
                            747 ;	-----------------------------------------
                            748 ;	 function format_data
                            749 ;	-----------------------------------------
   00AE                     750 _format_data:
   00AE C0*00               751 	push	_bp
   00B0 85 81*00            752 	mov	_bp,sp
   00B3 C0 82               753 	push	dpl
   00B5 C0 83               754 	push	dph
   00B7 C0 F0               755 	push	b
   00B9 05 81               756 	inc	sp
   00BB 05 81               757 	inc	sp
   00BD 05 81               758 	inc	sp
                            759 ;	../../core/net/rime/rudolph1.c:105: packetbuf_clear();
   00BF 12s00r00            760 	lcall	_packetbuf_clear
                            761 ;	../../core/net/rime/rudolph1.c:106: p = packetbuf_dataptr();
   00C2 12s00r00            762 	lcall	_packetbuf_dataptr
   00C5 AA 82               763 	mov	r2,dpl
   00C7 AB 83               764 	mov	r3,dph
   00C9 AC F0               765 	mov	r4,b
   00CB E5*00               766 	mov	a,_bp
   00CD 24 04               767 	add	a,#0x04
   00CF F8                  768 	mov	r0,a
   00D0 A6 02               769 	mov	@r0,ar2
   00D2 08                  770 	inc	r0
   00D3 A6 03               771 	mov	@r0,ar3
   00D5 08                  772 	inc	r0
   00D6 A6 04               773 	mov	@r0,ar4
                            774 ;	../../core/net/rime/rudolph1.c:107: p->h.type = TYPE_DATA;
   00D8 E5*00               775 	mov	a,_bp
   00DA 24 04               776 	add	a,#0x04
   00DC F8                  777 	mov	r0,a
   00DD 86 82               778 	mov	dpl,@r0
   00DF 08                  779 	inc	r0
   00E0 86 83               780 	mov	dph,@r0
   00E2 08                  781 	inc	r0
   00E3 86 F0               782 	mov	b,@r0
   00E5 E4                  783 	clr	a
   00E6 12s00r00            784 	lcall	__gptrput
                            785 ;	../../core/net/rime/rudolph1.c:108: p->h.version = c->version;
   00E9 E5*00               786 	mov	a,_bp
   00EB 24 04               787 	add	a,#0x04
   00ED F8                  788 	mov	r0,a
   00EE 74 01               789 	mov	a,#0x01
   00F0 26                  790 	add	a,@r0
   00F1 FD                  791 	mov	r5,a
   00F2 E4                  792 	clr	a
   00F3 08                  793 	inc	r0
   00F4 36                  794 	addc	a,@r0
   00F5 FE                  795 	mov	r6,a
   00F6 08                  796 	inc	r0
   00F7 86 07               797 	mov	ar7,@r0
   00F9 A8*00               798 	mov	r0,_bp
   00FB 08                  799 	inc	r0
   00FC 74 A6               800 	mov	a,#0xA6
   00FE 26                  801 	add	a,@r0
   00FF FA                  802 	mov	r2,a
   0100 E4                  803 	clr	a
   0101 08                  804 	inc	r0
   0102 36                  805 	addc	a,@r0
   0103 FB                  806 	mov	r3,a
   0104 08                  807 	inc	r0
   0105 86 04               808 	mov	ar4,@r0
   0107 8A 82               809 	mov	dpl,r2
   0109 8B 83               810 	mov	dph,r3
   010B 8C F0               811 	mov	b,r4
   010D 12s00r00            812 	lcall	__gptrget
   0110 8D 82               813 	mov	dpl,r5
   0112 8E 83               814 	mov	dph,r6
   0114 8F F0               815 	mov	b,r7
   0116 12s00r00            816 	lcall	__gptrput
                            817 ;	../../core/net/rime/rudolph1.c:109: p->h.chunk = chunk;
   0119 E5*00               818 	mov	a,_bp
   011B 24 04               819 	add	a,#0x04
   011D F8                  820 	mov	r0,a
   011E 74 02               821 	mov	a,#0x02
   0120 26                  822 	add	a,@r0
   0121 FD                  823 	mov	r5,a
   0122 E4                  824 	clr	a
   0123 08                  825 	inc	r0
   0124 36                  826 	addc	a,@r0
   0125 FE                  827 	mov	r6,a
   0126 08                  828 	inc	r0
   0127 86 07               829 	mov	ar7,@r0
   0129 E5*00               830 	mov	a,_bp
   012B 24 FC               831 	add	a,#0xfc
   012D F8                  832 	mov	r0,a
   012E 86 03               833 	mov	ar3,@r0
   0130 08                  834 	inc	r0
   0131 86 04               835 	mov	ar4,@r0
   0133 8D 82               836 	mov	dpl,r5
   0135 8E 83               837 	mov	dph,r6
   0137 8F F0               838 	mov	b,r7
   0139 EB                  839 	mov	a,r3
   013A 12s00r00            840 	lcall	__gptrput
   013D A3                  841 	inc	dptr
   013E EC                  842 	mov	a,r4
   013F 12s00r00            843 	lcall	__gptrput
                            844 ;	../../core/net/rime/rudolph1.c:110: p->datalen = read_data(c, p->data, chunk);
   0142 E5*00               845 	mov	a,_bp
   0144 24 04               846 	add	a,#0x04
   0146 F8                  847 	mov	r0,a
   0147 74 04               848 	mov	a,#0x04
   0149 26                  849 	add	a,@r0
   014A FD                  850 	mov	r5,a
   014B E4                  851 	clr	a
   014C 08                  852 	inc	r0
   014D 36                  853 	addc	a,@r0
   014E FE                  854 	mov	r6,a
   014F 08                  855 	inc	r0
   0150 86 07               856 	mov	ar7,@r0
   0152 E5*00               857 	mov	a,_bp
   0154 24 04               858 	add	a,#0x04
   0156 F8                  859 	mov	r0,a
   0157 74 05               860 	mov	a,#0x05
   0159 26                  861 	add	a,@r0
   015A FA                  862 	mov	r2,a
   015B E4                  863 	clr	a
   015C 08                  864 	inc	r0
   015D 36                  865 	addc	a,@r0
   015E FB                  866 	mov	r3,a
   015F 08                  867 	inc	r0
   0160 86 04               868 	mov	ar4,@r0
   0162 C0 07               869 	push	ar7
   0164 C0 06               870 	push	ar6
   0166 C0 05               871 	push	ar5
   0168 E5*00               872 	mov	a,_bp
   016A 24 FC               873 	add	a,#0xfc
   016C F8                  874 	mov	r0,a
   016D E6                  875 	mov	a,@r0
   016E C0 E0               876 	push	acc
   0170 08                  877 	inc	r0
   0171 E6                  878 	mov	a,@r0
   0172 C0 E0               879 	push	acc
   0174 C0 02               880 	push	ar2
   0176 C0 03               881 	push	ar3
   0178 C0 04               882 	push	ar4
   017A A8*00               883 	mov	r0,_bp
   017C 08                  884 	inc	r0
   017D 86 82               885 	mov	dpl,@r0
   017F 08                  886 	inc	r0
   0180 86 83               887 	mov	dph,@r0
   0182 08                  888 	inc	r0
   0183 86 F0               889 	mov	b,@r0
   0185 12s00r00            890 	lcall	_read_data
   0188 AB 82               891 	mov	r3,dpl
   018A E5 81               892 	mov	a,sp
   018C 24 FB               893 	add	a,#0xfb
   018E F5 81               894 	mov	sp,a
   0190 D0 05               895 	pop	ar5
   0192 D0 06               896 	pop	ar6
   0194 D0 07               897 	pop	ar7
   0196 8D 82               898 	mov	dpl,r5
   0198 8E 83               899 	mov	dph,r6
   019A 8F F0               900 	mov	b,r7
   019C EB                  901 	mov	a,r3
   019D 12s00r00            902 	lcall	__gptrput
                            903 ;	../../core/net/rime/rudolph1.c:112: (RUDOLPH1_DATASIZE - p->datalen));
   01A0 7C 00               904 	mov	r4,#0x00
   01A2 74 40               905 	mov	a,#0x40
   01A4 C3                  906 	clr	c
   01A5 9B                  907 	subb	a,r3
   01A6 FB                  908 	mov	r3,a
   01A7 E4                  909 	clr	a
   01A8 9C                  910 	subb	a,r4
   01A9 FC                  911 	mov	r4,a
   01AA 74 45               912 	mov	a,#0x45
   01AC C3                  913 	clr	c
   01AD 9B                  914 	subb	a,r3
   01AE FB                  915 	mov	r3,a
   01AF E4                  916 	clr	a
   01B0 9C                  917 	subb	a,r4
   01B1 FC                  918 	mov	r4,a
   01B2 8B 82               919 	mov	dpl,r3
   01B4 8C 83               920 	mov	dph,r4
   01B6 C0 07               921 	push	ar7
   01B8 C0 06               922 	push	ar6
   01BA C0 05               923 	push	ar5
   01BC 12s00r00            924 	lcall	_packetbuf_set_datalen
   01BF D0 05               925 	pop	ar5
   01C1 D0 06               926 	pop	ar6
   01C3 D0 07               927 	pop	ar7
                            928 ;	../../core/net/rime/rudolph1.c:114: return p->datalen;
   01C5 8D 82               929 	mov	dpl,r5
   01C7 8E 83               930 	mov	dph,r6
   01C9 8F F0               931 	mov	b,r7
   01CB 12s00r00            932 	lcall	__gptrget
   01CE FD                  933 	mov	r5,a
   01CF 7F 00               934 	mov	r7,#0x00
   01D1 8D 82               935 	mov	dpl,r5
   01D3 8F 83               936 	mov	dph,r7
   01D5 85*00 81            937 	mov	sp,_bp
   01D8 D0*00               938 	pop	_bp
   01DA 22                  939 	ret
                            940 ;------------------------------------------------------------
                            941 ;Allocation info for local variables in function 'write_data'
                            942 ;------------------------------------------------------------
                            943 ;chunk                     Allocated to stack - _bp -4
                            944 ;data                      Allocated to stack - _bp -7
                            945 ;datalen                   Allocated to stack - _bp -9
                            946 ;c                         Allocated to stack - _bp +1
                            947 ;------------------------------------------------------------
                            948 ;	../../core/net/rime/rudolph1.c:118: write_data(struct rudolph1_conn *c, int chunk, uint8_t *data, int datalen)
                            949 ;	-----------------------------------------
                            950 ;	 function write_data
                            951 ;	-----------------------------------------
   01DB                     952 _write_data:
   01DB C0*00               953 	push	_bp
   01DD 85 81*00            954 	mov	_bp,sp
   01E0 C0 82               955 	push	dpl
   01E2 C0 83               956 	push	dph
   01E4 C0 F0               957 	push	b
                            958 ;	../../core/net/rime/rudolph1.c:120: if(chunk == 0) {
   01E6 E5*00               959 	mov	a,_bp
   01E8 24 FC               960 	add	a,#0xfc
   01EA F8                  961 	mov	r0,a
   01EB E6                  962 	mov	a,@r0
   01EC 08                  963 	inc	r0
   01ED 46                  964 	orl	a,@r0
   01EE 70 78               965 	jnz	00102$
                            966 ;	../../core/net/rime/rudolph1.c:121: c->cb->write_chunk(c, 0, RUDOLPH1_FLAG_NEWFILE, data, 0);
   01F0 A8*00               967 	mov	r0,_bp
   01F2 08                  968 	inc	r0
   01F3 74 88               969 	mov	a,#0x88
   01F5 26                  970 	add	a,@r0
   01F6 FA                  971 	mov	r2,a
   01F7 E4                  972 	clr	a
   01F8 08                  973 	inc	r0
   01F9 36                  974 	addc	a,@r0
   01FA FB                  975 	mov	r3,a
   01FB 08                  976 	inc	r0
   01FC 86 04               977 	mov	ar4,@r0
   01FE 8A 82               978 	mov	dpl,r2
   0200 8B 83               979 	mov	dph,r3
   0202 8C F0               980 	mov	b,r4
   0204 12s00r00            981 	lcall	__gptrget
   0207 FA                  982 	mov	r2,a
   0208 A3                  983 	inc	dptr
   0209 12s00r00            984 	lcall	__gptrget
   020C FB                  985 	mov	r3,a
   020D A3                  986 	inc	dptr
   020E 12s00r00            987 	lcall	__gptrget
   0211 FC                  988 	mov	r4,a
   0212 8A 82               989 	mov	dpl,r2
   0214 8B 83               990 	mov	dph,r3
   0216 8C F0               991 	mov	b,r4
   0218 12s00r00            992 	lcall	__gptrget
   021B FA                  993 	mov	r2,a
   021C A3                  994 	inc	dptr
   021D 12s00r00            995 	lcall	__gptrget
   0220 FB                  996 	mov	r3,a
   0221 C0 03               997 	push	ar3
   0223 C0 02               998 	push	ar2
   0225 E4                  999 	clr	a
   0226 C0 E0              1000 	push	acc
   0228 C0 E0              1001 	push	acc
   022A E5*00              1002 	mov	a,_bp
   022C 24 F9              1003 	add	a,#0xf9
   022E F8                 1004 	mov	r0,a
   022F E6                 1005 	mov	a,@r0
   0230 C0 E0              1006 	push	acc
   0232 08                 1007 	inc	r0
   0233 E6                 1008 	mov	a,@r0
   0234 C0 E0              1009 	push	acc
   0236 08                 1010 	inc	r0
   0237 E6                 1011 	mov	a,@r0
   0238 C0 E0              1012 	push	acc
   023A 74 01              1013 	mov	a,#0x01
   023C C0 E0              1014 	push	acc
   023E E4                 1015 	clr	a
   023F C0 E0              1016 	push	acc
   0241 E4                 1017 	clr	a
   0242 C0 E0              1018 	push	acc
   0244 C0 E0              1019 	push	acc
   0246 74r5E              1020 	mov	a,#00113$
   0248 C0 E0              1021 	push	acc
   024A 74s02              1022 	mov	a,#(00113$ >> 8)
   024C C0 E0              1023 	push	acc
   024E C0 02              1024 	push	ar2
   0250 C0 03              1025 	push	ar3
   0252 A8*00              1026 	mov	r0,_bp
   0254 08                 1027 	inc	r0
   0255 86 82              1028 	mov	dpl,@r0
   0257 08                 1029 	inc	r0
   0258 86 83              1030 	mov	dph,@r0
   025A 08                 1031 	inc	r0
   025B 86 F0              1032 	mov	b,@r0
   025D 22                 1033 	ret
   025E                    1034 00113$:
   025E E5 81              1035 	mov	a,sp
   0260 24 F7              1036 	add	a,#0xf7
   0262 F5 81              1037 	mov	sp,a
   0264 D0 02              1038 	pop	ar2
   0266 D0 03              1039 	pop	ar3
   0268                    1040 00102$:
                           1041 ;	../../core/net/rime/rudolph1.c:124: if(datalen < RUDOLPH1_DATASIZE) {
   0268 E5*00              1042 	mov	a,_bp
   026A 24 F7              1043 	add	a,#0xf7
   026C F8                 1044 	mov	r0,a
   026D C3                 1045 	clr	c
   026E E6                 1046 	mov	a,@r0
   026F 94 40              1047 	subb	a,#0x40
   0271 08                 1048 	inc	r0
   0272 E6                 1049 	mov	a,@r0
   0273 64 80              1050 	xrl	a,#0x80
   0275 94 80              1051 	subb	a,#0x80
   0277 40 03              1052 	jc	00114$
   0279 02s03r16           1053 	ljmp	00104$
   027C                    1054 00114$:
                           1055 ;	../../core/net/rime/rudolph1.c:128: c->cb->write_chunk(c, chunk * RUDOLPH1_DATASIZE,
   027C A8*00              1056 	mov	r0,_bp
   027E 08                 1057 	inc	r0
   027F 74 88              1058 	mov	a,#0x88
   0281 26                 1059 	add	a,@r0
   0282 FA                 1060 	mov	r2,a
   0283 E4                 1061 	clr	a
   0284 08                 1062 	inc	r0
   0285 36                 1063 	addc	a,@r0
   0286 FB                 1064 	mov	r3,a
   0287 08                 1065 	inc	r0
   0288 86 04              1066 	mov	ar4,@r0
   028A 8A 82              1067 	mov	dpl,r2
   028C 8B 83              1068 	mov	dph,r3
   028E 8C F0              1069 	mov	b,r4
   0290 12s00r00           1070 	lcall	__gptrget
   0293 FA                 1071 	mov	r2,a
   0294 A3                 1072 	inc	dptr
   0295 12s00r00           1073 	lcall	__gptrget
   0298 FB                 1074 	mov	r3,a
   0299 A3                 1075 	inc	dptr
   029A 12s00r00           1076 	lcall	__gptrget
   029D FC                 1077 	mov	r4,a
   029E 8A 82              1078 	mov	dpl,r2
   02A0 8B 83              1079 	mov	dph,r3
   02A2 8C F0              1080 	mov	b,r4
   02A4 12s00r00           1081 	lcall	__gptrget
   02A7 FA                 1082 	mov	r2,a
   02A8 A3                 1083 	inc	dptr
   02A9 12s00r00           1084 	lcall	__gptrget
   02AC FB                 1085 	mov	r3,a
   02AD E5*00              1086 	mov	a,_bp
   02AF 24 FC              1087 	add	a,#0xfc
   02B1 F8                 1088 	mov	r0,a
   02B2 86 04              1089 	mov	ar4,@r0
   02B4 08                 1090 	inc	r0
   02B5 E6                 1091 	mov	a,@r0
   02B6 54 03              1092 	anl	a,#0x03
   02B8 A2 E0              1093 	mov	c,acc.0
   02BA CC                 1094 	xch	a,r4
   02BB 13                 1095 	rrc	a
   02BC CC                 1096 	xch	a,r4
   02BD 13                 1097 	rrc	a
   02BE A2 E0              1098 	mov	c,acc.0
   02C0 CC                 1099 	xch	a,r4
   02C1 13                 1100 	rrc	a
   02C2 CC                 1101 	xch	a,r4
   02C3 13                 1102 	rrc	a
   02C4 CC                 1103 	xch	a,r4
   02C5 FF                 1104 	mov	r7,a
   02C6 C0 03              1105 	push	ar3
   02C8 C0 02              1106 	push	ar2
   02CA E5*00              1107 	mov	a,_bp
   02CC 24 F7              1108 	add	a,#0xf7
   02CE F8                 1109 	mov	r0,a
   02CF E6                 1110 	mov	a,@r0
   02D0 C0 E0              1111 	push	acc
   02D2 08                 1112 	inc	r0
   02D3 E6                 1113 	mov	a,@r0
   02D4 C0 E0              1114 	push	acc
   02D6 E5*00              1115 	mov	a,_bp
   02D8 24 F9              1116 	add	a,#0xf9
   02DA F8                 1117 	mov	r0,a
   02DB E6                 1118 	mov	a,@r0
   02DC C0 E0              1119 	push	acc
   02DE 08                 1120 	inc	r0
   02DF E6                 1121 	mov	a,@r0
   02E0 C0 E0              1122 	push	acc
   02E2 08                 1123 	inc	r0
   02E3 E6                 1124 	mov	a,@r0
   02E4 C0 E0              1125 	push	acc
   02E6 74 02              1126 	mov	a,#0x02
   02E8 C0 E0              1127 	push	acc
   02EA E4                 1128 	clr	a
   02EB C0 E0              1129 	push	acc
   02ED C0 04              1130 	push	ar4
   02EF C0 07              1131 	push	ar7
   02F1 74r09              1132 	mov	a,#00115$
   02F3 C0 E0              1133 	push	acc
   02F5 74s03              1134 	mov	a,#(00115$ >> 8)
   02F7 C0 E0              1135 	push	acc
   02F9 C0 02              1136 	push	ar2
   02FB C0 03              1137 	push	ar3
   02FD A8*00              1138 	mov	r0,_bp
   02FF 08                 1139 	inc	r0
   0300 86 82              1140 	mov	dpl,@r0
   0302 08                 1141 	inc	r0
   0303 86 83              1142 	mov	dph,@r0
   0305 08                 1143 	inc	r0
   0306 86 F0              1144 	mov	b,@r0
   0308 22                 1145 	ret
   0309                    1146 00115$:
   0309 E5 81              1147 	mov	a,sp
   030B 24 F7              1148 	add	a,#0xf7
   030D F5 81              1149 	mov	sp,a
   030F D0 02              1150 	pop	ar2
   0311 D0 03              1151 	pop	ar3
   0313 02s03rAB           1152 	ljmp	00106$
   0316                    1153 00104$:
                           1154 ;	../../core/net/rime/rudolph1.c:131: c->cb->write_chunk(c, chunk * RUDOLPH1_DATASIZE,
   0316 A8*00              1155 	mov	r0,_bp
   0318 08                 1156 	inc	r0
   0319 74 88              1157 	mov	a,#0x88
   031B 26                 1158 	add	a,@r0
   031C FD                 1159 	mov	r5,a
   031D E4                 1160 	clr	a
   031E 08                 1161 	inc	r0
   031F 36                 1162 	addc	a,@r0
   0320 FE                 1163 	mov	r6,a
   0321 08                 1164 	inc	r0
   0322 86 07              1165 	mov	ar7,@r0
   0324 8D 82              1166 	mov	dpl,r5
   0326 8E 83              1167 	mov	dph,r6
   0328 8F F0              1168 	mov	b,r7
   032A 12s00r00           1169 	lcall	__gptrget
   032D FD                 1170 	mov	r5,a
   032E A3                 1171 	inc	dptr
   032F 12s00r00           1172 	lcall	__gptrget
   0332 FE                 1173 	mov	r6,a
   0333 A3                 1174 	inc	dptr
   0334 12s00r00           1175 	lcall	__gptrget
   0337 FF                 1176 	mov	r7,a
   0338 8D 82              1177 	mov	dpl,r5
   033A 8E 83              1178 	mov	dph,r6
   033C 8F F0              1179 	mov	b,r7
   033E 12s00r00           1180 	lcall	__gptrget
   0341 FD                 1181 	mov	r5,a
   0342 A3                 1182 	inc	dptr
   0343 12s00r00           1183 	lcall	__gptrget
   0346 FE                 1184 	mov	r6,a
   0347 E5*00              1185 	mov	a,_bp
   0349 24 FC              1186 	add	a,#0xfc
   034B F8                 1187 	mov	r0,a
   034C 86 04              1188 	mov	ar4,@r0
   034E 08                 1189 	inc	r0
   034F E6                 1190 	mov	a,@r0
   0350 54 03              1191 	anl	a,#0x03
   0352 A2 E0              1192 	mov	c,acc.0
   0354 CC                 1193 	xch	a,r4
   0355 13                 1194 	rrc	a
   0356 CC                 1195 	xch	a,r4
   0357 13                 1196 	rrc	a
   0358 A2 E0              1197 	mov	c,acc.0
   035A CC                 1198 	xch	a,r4
   035B 13                 1199 	rrc	a
   035C CC                 1200 	xch	a,r4
   035D 13                 1201 	rrc	a
   035E CC                 1202 	xch	a,r4
   035F FF                 1203 	mov	r7,a
   0360 C0 06              1204 	push	ar6
   0362 C0 05              1205 	push	ar5
   0364 E5*00              1206 	mov	a,_bp
   0366 24 F7              1207 	add	a,#0xf7
   0368 F8                 1208 	mov	r0,a
   0369 E6                 1209 	mov	a,@r0
   036A C0 E0              1210 	push	acc
   036C 08                 1211 	inc	r0
   036D E6                 1212 	mov	a,@r0
   036E C0 E0              1213 	push	acc
   0370 E5*00              1214 	mov	a,_bp
   0372 24 F9              1215 	add	a,#0xf9
   0374 F8                 1216 	mov	r0,a
   0375 E6                 1217 	mov	a,@r0
   0376 C0 E0              1218 	push	acc
   0378 08                 1219 	inc	r0
   0379 E6                 1220 	mov	a,@r0
   037A C0 E0              1221 	push	acc
   037C 08                 1222 	inc	r0
   037D E6                 1223 	mov	a,@r0
   037E C0 E0              1224 	push	acc
   0380 E4                 1225 	clr	a
   0381 C0 E0              1226 	push	acc
   0383 C0 E0              1227 	push	acc
   0385 C0 04              1228 	push	ar4
   0387 C0 07              1229 	push	ar7
   0389 74rA1              1230 	mov	a,#00116$
   038B C0 E0              1231 	push	acc
   038D 74s03              1232 	mov	a,#(00116$ >> 8)
   038F C0 E0              1233 	push	acc
   0391 C0 05              1234 	push	ar5
   0393 C0 06              1235 	push	ar6
   0395 A8*00              1236 	mov	r0,_bp
   0397 08                 1237 	inc	r0
   0398 86 82              1238 	mov	dpl,@r0
   039A 08                 1239 	inc	r0
   039B 86 83              1240 	mov	dph,@r0
   039D 08                 1241 	inc	r0
   039E 86 F0              1242 	mov	b,@r0
   03A0 22                 1243 	ret
   03A1                    1244 00116$:
   03A1 E5 81              1245 	mov	a,sp
   03A3 24 F7              1246 	add	a,#0xf7
   03A5 F5 81              1247 	mov	sp,a
   03A7 D0 05              1248 	pop	ar5
   03A9 D0 06              1249 	pop	ar6
   03AB                    1250 00106$:
   03AB 85*00 81           1251 	mov	sp,_bp
   03AE D0*00              1252 	pop	_bp
   03B0 22                 1253 	ret
                           1254 ;------------------------------------------------------------
                           1255 ;Allocation info for local variables in function 'send_nack'
                           1256 ;------------------------------------------------------------
                           1257 ;c                         Allocated to stack - _bp +1
                           1258 ;hdr                       Allocated to stack - _bp +4
                           1259 ;------------------------------------------------------------
                           1260 ;	../../core/net/rime/rudolph1.c:137: send_nack(struct rudolph1_conn *c)
                           1261 ;	-----------------------------------------
                           1262 ;	 function send_nack
                           1263 ;	-----------------------------------------
   03B1                    1264 _send_nack:
   03B1 C0*00              1265 	push	_bp
   03B3 85 81*00           1266 	mov	_bp,sp
   03B6 C0 82              1267 	push	dpl
   03B8 C0 83              1268 	push	dph
   03BA C0 F0              1269 	push	b
   03BC 05 81              1270 	inc	sp
   03BE 05 81              1271 	inc	sp
   03C0 05 81              1272 	inc	sp
                           1273 ;	../../core/net/rime/rudolph1.c:140: packetbuf_clear();
   03C2 12s00r00           1274 	lcall	_packetbuf_clear
                           1275 ;	../../core/net/rime/rudolph1.c:141: packetbuf_hdralloc(sizeof(struct rudolph1_hdr));
   03C5 90 00 04           1276 	mov	dptr,#0x0004
   03C8 12s00r00           1277 	lcall	_packetbuf_hdralloc
                           1278 ;	../../core/net/rime/rudolph1.c:142: hdr = packetbuf_hdrptr();
   03CB 12s00r00           1279 	lcall	_packetbuf_hdrptr
   03CE AA 82              1280 	mov	r2,dpl
   03D0 AB 83              1281 	mov	r3,dph
   03D2 AC F0              1282 	mov	r4,b
   03D4 E5*00              1283 	mov	a,_bp
   03D6 24 04              1284 	add	a,#0x04
   03D8 F8                 1285 	mov	r0,a
   03D9 A6 02              1286 	mov	@r0,ar2
   03DB 08                 1287 	inc	r0
   03DC A6 03              1288 	mov	@r0,ar3
   03DE 08                 1289 	inc	r0
   03DF A6 04              1290 	mov	@r0,ar4
                           1291 ;	../../core/net/rime/rudolph1.c:144: hdr->type = TYPE_NACK;
   03E1 E5*00              1292 	mov	a,_bp
   03E3 24 04              1293 	add	a,#0x04
   03E5 F8                 1294 	mov	r0,a
   03E6 86 82              1295 	mov	dpl,@r0
   03E8 08                 1296 	inc	r0
   03E9 86 83              1297 	mov	dph,@r0
   03EB 08                 1298 	inc	r0
   03EC 86 F0              1299 	mov	b,@r0
   03EE 74 01              1300 	mov	a,#0x01
   03F0 12s00r00           1301 	lcall	__gptrput
                           1302 ;	../../core/net/rime/rudolph1.c:145: hdr->version = c->version;
   03F3 E5*00              1303 	mov	a,_bp
   03F5 24 04              1304 	add	a,#0x04
   03F7 F8                 1305 	mov	r0,a
   03F8 74 01              1306 	mov	a,#0x01
   03FA 26                 1307 	add	a,@r0
   03FB FD                 1308 	mov	r5,a
   03FC E4                 1309 	clr	a
   03FD 08                 1310 	inc	r0
   03FE 36                 1311 	addc	a,@r0
   03FF FE                 1312 	mov	r6,a
   0400 08                 1313 	inc	r0
   0401 86 07              1314 	mov	ar7,@r0
   0403 A8*00              1315 	mov	r0,_bp
   0405 08                 1316 	inc	r0
   0406 74 A6              1317 	mov	a,#0xA6
   0408 26                 1318 	add	a,@r0
   0409 FA                 1319 	mov	r2,a
   040A E4                 1320 	clr	a
   040B 08                 1321 	inc	r0
   040C 36                 1322 	addc	a,@r0
   040D FB                 1323 	mov	r3,a
   040E 08                 1324 	inc	r0
   040F 86 04              1325 	mov	ar4,@r0
   0411 8A 82              1326 	mov	dpl,r2
   0413 8B 83              1327 	mov	dph,r3
   0415 8C F0              1328 	mov	b,r4
   0417 12s00r00           1329 	lcall	__gptrget
   041A 8D 82              1330 	mov	dpl,r5
   041C 8E 83              1331 	mov	dph,r6
   041E 8F F0              1332 	mov	b,r7
   0420 12s00r00           1333 	lcall	__gptrput
                           1334 ;	../../core/net/rime/rudolph1.c:146: hdr->chunk = c->chunk;
   0423 E5*00              1335 	mov	a,_bp
   0425 24 04              1336 	add	a,#0x04
   0427 F8                 1337 	mov	r0,a
   0428 74 02              1338 	mov	a,#0x02
   042A 26                 1339 	add	a,@r0
   042B FD                 1340 	mov	r5,a
   042C E4                 1341 	clr	a
   042D 08                 1342 	inc	r0
   042E 36                 1343 	addc	a,@r0
   042F FE                 1344 	mov	r6,a
   0430 08                 1345 	inc	r0
   0431 86 07              1346 	mov	ar7,@r0
   0433 A8*00              1347 	mov	r0,_bp
   0435 08                 1348 	inc	r0
   0436 74 A2              1349 	mov	a,#0xA2
   0438 26                 1350 	add	a,@r0
   0439 FA                 1351 	mov	r2,a
   043A E4                 1352 	clr	a
   043B 08                 1353 	inc	r0
   043C 36                 1354 	addc	a,@r0
   043D FB                 1355 	mov	r3,a
   043E 08                 1356 	inc	r0
   043F 86 04              1357 	mov	ar4,@r0
   0441 8A 82              1358 	mov	dpl,r2
   0443 8B 83              1359 	mov	dph,r3
   0445 8C F0              1360 	mov	b,r4
   0447 12s00r00           1361 	lcall	__gptrget
   044A FA                 1362 	mov	r2,a
   044B A3                 1363 	inc	dptr
   044C 12s00r00           1364 	lcall	__gptrget
   044F FB                 1365 	mov	r3,a
   0450 8D 82              1366 	mov	dpl,r5
   0452 8E 83              1367 	mov	dph,r6
   0454 8F F0              1368 	mov	b,r7
   0456 EA                 1369 	mov	a,r2
   0457 12s00r00           1370 	lcall	__gptrput
   045A A3                 1371 	inc	dptr
   045B EB                 1372 	mov	a,r3
   045C 12s00r00           1373 	lcall	__gptrput
                           1374 ;	../../core/net/rime/rudolph1.c:151: ipolite_send(&c->ipolite, NACK_TIMEOUT, sizeof(struct rudolph1_hdr));
   045F A8*00              1375 	mov	r0,_bp
   0461 08                 1376 	inc	r0
   0462 74 5B              1377 	mov	a,#0x5B
   0464 26                 1378 	add	a,@r0
   0465 FD                 1379 	mov	r5,a
   0466 E4                 1380 	clr	a
   0467 08                 1381 	inc	r0
   0468 36                 1382 	addc	a,@r0
   0469 FE                 1383 	mov	r6,a
   046A 08                 1384 	inc	r0
   046B 86 07              1385 	mov	ar7,@r0
   046D 74 04              1386 	mov	a,#0x04
   046F C0 E0              1387 	push	acc
   0471 74 20              1388 	mov	a,#0x20
   0473 C0 E0              1389 	push	acc
   0475 E4                 1390 	clr	a
   0476 C0 E0              1391 	push	acc
   0478 8D 82              1392 	mov	dpl,r5
   047A 8E 83              1393 	mov	dph,r6
   047C 8F F0              1394 	mov	b,r7
   047E 12s00r00           1395 	lcall	_ipolite_send
   0481 15 81              1396 	dec	sp
   0483 15 81              1397 	dec	sp
   0485 15 81              1398 	dec	sp
   0487 85*00 81           1399 	mov	sp,_bp
   048A D0*00              1400 	pop	_bp
   048C 22                 1401 	ret
                           1402 ;------------------------------------------------------------
                           1403 ;Allocation info for local variables in function 'handle_data'
                           1404 ;------------------------------------------------------------
                           1405 ;p                         Allocated to stack - _bp -5
                           1406 ;c                         Allocated to stack - _bp +1
                           1407 ;sloc0                     Allocated to stack - _bp +4
                           1408 ;sloc1                     Allocated to stack - _bp +5
                           1409 ;sloc2                     Allocated to stack - _bp +8
                           1410 ;sloc3                     Allocated to stack - _bp +11
                           1411 ;sloc4                     Allocated to stack - _bp +13
                           1412 ;------------------------------------------------------------
                           1413 ;	../../core/net/rime/rudolph1.c:155: handle_data(struct rudolph1_conn *c, struct rudolph1_datapacket *p)
                           1414 ;	-----------------------------------------
                           1415 ;	 function handle_data
                           1416 ;	-----------------------------------------
   048D                    1417 _handle_data:
   048D C0*00              1418 	push	_bp
   048F 85 81*00           1419 	mov	_bp,sp
   0492 C0 82              1420 	push	dpl
   0494 C0 83              1421 	push	dph
   0496 C0 F0              1422 	push	b
   0498 E5 81              1423 	mov	a,sp
   049A 24 0C              1424 	add	a,#0x0C
   049C F5 81              1425 	mov	sp,a
                           1426 ;	../../core/net/rime/rudolph1.c:157: if(LT(c->version, p->h.version)) {
   049E A8*00              1427 	mov	r0,_bp
   04A0 08                 1428 	inc	r0
   04A1 74 A6              1429 	mov	a,#0xA6
   04A3 26                 1430 	add	a,@r0
   04A4 FA                 1431 	mov	r2,a
   04A5 E4                 1432 	clr	a
   04A6 08                 1433 	inc	r0
   04A7 36                 1434 	addc	a,@r0
   04A8 FB                 1435 	mov	r3,a
   04A9 08                 1436 	inc	r0
   04AA 86 04              1437 	mov	ar4,@r0
   04AC 8A 82              1438 	mov	dpl,r2
   04AE 8B 83              1439 	mov	dph,r3
   04B0 8C F0              1440 	mov	b,r4
   04B2 E5*00              1441 	mov	a,_bp
   04B4 24 04              1442 	add	a,#0x04
   04B6 F8                 1443 	mov	r0,a
   04B7 12s00r00           1444 	lcall	__gptrget
   04BA F6                 1445 	mov	@r0,a
   04BB E5*00              1446 	mov	a,_bp
   04BD 24 FB              1447 	add	a,#0xfb
   04BF F8                 1448 	mov	r0,a
   04C0 E5*00              1449 	mov	a,_bp
   04C2 24 05              1450 	add	a,#0x05
   04C4 F9                 1451 	mov	r1,a
   04C5 E6                 1452 	mov	a,@r0
   04C6 F7                 1453 	mov	@r1,a
   04C7 08                 1454 	inc	r0
   04C8 09                 1455 	inc	r1
   04C9 E6                 1456 	mov	a,@r0
   04CA F7                 1457 	mov	@r1,a
   04CB 08                 1458 	inc	r0
   04CC 09                 1459 	inc	r1
   04CD E6                 1460 	mov	a,@r0
   04CE F7                 1461 	mov	@r1,a
   04CF E5*00              1462 	mov	a,_bp
   04D1 24 05              1463 	add	a,#0x05
   04D3 F8                 1464 	mov	r0,a
   04D4 74 01              1465 	mov	a,#0x01
   04D6 26                 1466 	add	a,@r0
   04D7 FD                 1467 	mov	r5,a
   04D8 E4                 1468 	clr	a
   04D9 08                 1469 	inc	r0
   04DA 36                 1470 	addc	a,@r0
   04DB FE                 1471 	mov	r6,a
   04DC 08                 1472 	inc	r0
   04DD 86 07              1473 	mov	ar7,@r0
   04DF 8D 82              1474 	mov	dpl,r5
   04E1 8E 83              1475 	mov	dph,r6
   04E3 8F F0              1476 	mov	b,r7
   04E5 12s00r00           1477 	lcall	__gptrget
   04E8 FF                 1478 	mov	r7,a
   04E9 E5*00              1479 	mov	a,_bp
   04EB 24 04              1480 	add	a,#0x04
   04ED F8                 1481 	mov	r0,a
   04EE E6                 1482 	mov	a,@r0
   04EF C3                 1483 	clr	c
   04F0 9F                 1484 	subb	a,r7
   04F1 FE                 1485 	mov	r6,a
   04F2 20 E7 03           1486 	jb	acc.7,00135$
   04F5 02s05rDF           1487 	ljmp	00117$
   04F8                    1488 00135$:
                           1489 ;	../../core/net/rime/rudolph1.c:161: c->version = p->h.version;
   04F8 8A 82              1490 	mov	dpl,r2
   04FA 8B 83              1491 	mov	dph,r3
   04FC 8C F0              1492 	mov	b,r4
   04FE EF                 1493 	mov	a,r7
   04FF 12s00r00           1494 	lcall	__gptrput
                           1495 ;	../../core/net/rime/rudolph1.c:162: c->highest_chunk_heard = c->chunk = 0;
   0502 A8*00              1496 	mov	r0,_bp
   0504 08                 1497 	inc	r0
   0505 74 A4              1498 	mov	a,#0xA4
   0507 26                 1499 	add	a,@r0
   0508 FF                 1500 	mov	r7,a
   0509 E4                 1501 	clr	a
   050A 08                 1502 	inc	r0
   050B 36                 1503 	addc	a,@r0
   050C FD                 1504 	mov	r5,a
   050D 08                 1505 	inc	r0
   050E 86 04              1506 	mov	ar4,@r0
   0510 A8*00              1507 	mov	r0,_bp
   0512 08                 1508 	inc	r0
   0513 74 A2              1509 	mov	a,#0xA2
   0515 26                 1510 	add	a,@r0
   0516 FA                 1511 	mov	r2,a
   0517 E4                 1512 	clr	a
   0518 08                 1513 	inc	r0
   0519 36                 1514 	addc	a,@r0
   051A FB                 1515 	mov	r3,a
   051B 08                 1516 	inc	r0
   051C 86 06              1517 	mov	ar6,@r0
   051E 8A 82              1518 	mov	dpl,r2
   0520 8B 83              1519 	mov	dph,r3
   0522 8E F0              1520 	mov	b,r6
   0524 E4                 1521 	clr	a
   0525 12s00r00           1522 	lcall	__gptrput
   0528 A3                 1523 	inc	dptr
   0529 E4                 1524 	clr	a
   052A 12s00r00           1525 	lcall	__gptrput
   052D 8F 82              1526 	mov	dpl,r7
   052F 8D 83              1527 	mov	dph,r5
   0531 8C F0              1528 	mov	b,r4
   0533 E4                 1529 	clr	a
   0534 12s00r00           1530 	lcall	__gptrput
   0537 A3                 1531 	inc	dptr
   0538 E4                 1532 	clr	a
   0539 12s00r00           1533 	lcall	__gptrput
                           1534 ;	../../core/net/rime/rudolph1.c:163: if(p->h.chunk != 0) {
   053C E5*00              1535 	mov	a,_bp
   053E 24 05              1536 	add	a,#0x05
   0540 F8                 1537 	mov	r0,a
   0541 74 02              1538 	mov	a,#0x02
   0543 26                 1539 	add	a,@r0
   0544 FC                 1540 	mov	r4,a
   0545 E4                 1541 	clr	a
   0546 08                 1542 	inc	r0
   0547 36                 1543 	addc	a,@r0
   0548 FD                 1544 	mov	r5,a
   0549 08                 1545 	inc	r0
   054A 86 06              1546 	mov	ar6,@r0
   054C 8C 82              1547 	mov	dpl,r4
   054E 8D 83              1548 	mov	dph,r5
   0550 8E F0              1549 	mov	b,r6
   0552 12s00r00           1550 	lcall	__gptrget
   0555 FC                 1551 	mov	r4,a
   0556 A3                 1552 	inc	dptr
   0557 12s00r00           1553 	lcall	__gptrget
   055A FD                 1554 	mov	r5,a
   055B 4C                 1555 	orl	a,r4
   055C 60 11              1556 	jz	00102$
                           1557 ;	../../core/net/rime/rudolph1.c:164: send_nack(c);
   055E A8*00              1558 	mov	r0,_bp
   0560 08                 1559 	inc	r0
   0561 86 82              1560 	mov	dpl,@r0
   0563 08                 1561 	inc	r0
   0564 86 83              1562 	mov	dph,@r0
   0566 08                 1563 	inc	r0
   0567 86 F0              1564 	mov	b,@r0
   0569 12s03rB1           1565 	lcall	_send_nack
   056C 02s07rFC           1566 	ljmp	00119$
   056F                    1567 00102$:
                           1568 ;	../../core/net/rime/rudolph1.c:166: write_data(c, 0, p->data, p->datalen);
   056F E5*00              1569 	mov	a,_bp
   0571 24 05              1570 	add	a,#0x05
   0573 F8                 1571 	mov	r0,a
   0574 74 04              1572 	mov	a,#0x04
   0576 26                 1573 	add	a,@r0
   0577 FC                 1574 	mov	r4,a
   0578 E4                 1575 	clr	a
   0579 08                 1576 	inc	r0
   057A 36                 1577 	addc	a,@r0
   057B FD                 1578 	mov	r5,a
   057C 08                 1579 	inc	r0
   057D 86 06              1580 	mov	ar6,@r0
   057F 8C 82              1581 	mov	dpl,r4
   0581 8D 83              1582 	mov	dph,r5
   0583 8E F0              1583 	mov	b,r6
   0585 12s00r00           1584 	lcall	__gptrget
   0588 FC                 1585 	mov	r4,a
   0589 7E 00              1586 	mov	r6,#0x00
   058B E5*00              1587 	mov	a,_bp
   058D 24 05              1588 	add	a,#0x05
   058F F8                 1589 	mov	r0,a
   0590 74 05              1590 	mov	a,#0x05
   0592 26                 1591 	add	a,@r0
   0593 FA                 1592 	mov	r2,a
   0594 E4                 1593 	clr	a
   0595 08                 1594 	inc	r0
   0596 36                 1595 	addc	a,@r0
   0597 FB                 1596 	mov	r3,a
   0598 08                 1597 	inc	r0
   0599 86 05              1598 	mov	ar5,@r0
   059B C0 04              1599 	push	ar4
   059D C0 06              1600 	push	ar6
   059F C0 02              1601 	push	ar2
   05A1 C0 03              1602 	push	ar3
   05A3 C0 05              1603 	push	ar5
   05A5 E4                 1604 	clr	a
   05A6 C0 E0              1605 	push	acc
   05A8 C0 E0              1606 	push	acc
   05AA A8*00              1607 	mov	r0,_bp
   05AC 08                 1608 	inc	r0
   05AD 86 82              1609 	mov	dpl,@r0
   05AF 08                 1610 	inc	r0
   05B0 86 83              1611 	mov	dph,@r0
   05B2 08                 1612 	inc	r0
   05B3 86 F0              1613 	mov	b,@r0
   05B5 12s01rDB           1614 	lcall	_write_data
   05B8 E5 81              1615 	mov	a,sp
   05BA 24 F9              1616 	add	a,#0xf9
   05BC F5 81              1617 	mov	sp,a
                           1618 ;	../../core/net/rime/rudolph1.c:167: c->chunk = 1; /* Next chunk is 1. */
   05BE A8*00              1619 	mov	r0,_bp
   05C0 08                 1620 	inc	r0
   05C1 74 A2              1621 	mov	a,#0xA2
   05C3 26                 1622 	add	a,@r0
   05C4 FC                 1623 	mov	r4,a
   05C5 E4                 1624 	clr	a
   05C6 08                 1625 	inc	r0
   05C7 36                 1626 	addc	a,@r0
   05C8 FD                 1627 	mov	r5,a
   05C9 08                 1628 	inc	r0
   05CA 86 06              1629 	mov	ar6,@r0
   05CC 8C 82              1630 	mov	dpl,r4
   05CE 8D 83              1631 	mov	dph,r5
   05D0 8E F0              1632 	mov	b,r6
   05D2 74 01              1633 	mov	a,#0x01
   05D4 12s00r00           1634 	lcall	__gptrput
   05D7 A3                 1635 	inc	dptr
   05D8 E4                 1636 	clr	a
   05D9 12s00r00           1637 	lcall	__gptrput
   05DC 02s07rFC           1638 	ljmp	00119$
   05DF                    1639 00117$:
                           1640 ;	../../core/net/rime/rudolph1.c:170: } else if(p->h.version == c->version) {
   05DF E5*00              1641 	mov	a,_bp
   05E1 24 04              1642 	add	a,#0x04
   05E3 F8                 1643 	mov	r0,a
   05E4 E6                 1644 	mov	a,@r0
   05E5 B5 07 02           1645 	cjne	a,ar7,00137$
   05E8 80 03              1646 	sjmp	00138$
   05EA                    1647 00137$:
   05EA 02s07rFC           1648 	ljmp	00119$
   05ED                    1649 00138$:
                           1650 ;	../../core/net/rime/rudolph1.c:175: if(p->h.chunk == c->chunk) {
   05ED E5*00              1651 	mov	a,_bp
   05EF 24 05              1652 	add	a,#0x05
   05F1 F8                 1653 	mov	r0,a
   05F2 74 02              1654 	mov	a,#0x02
   05F4 26                 1655 	add	a,@r0
   05F5 FD                 1656 	mov	r5,a
   05F6 E4                 1657 	clr	a
   05F7 08                 1658 	inc	r0
   05F8 36                 1659 	addc	a,@r0
   05F9 FE                 1660 	mov	r6,a
   05FA 08                 1661 	inc	r0
   05FB 86 07              1662 	mov	ar7,@r0
   05FD 8D 82              1663 	mov	dpl,r5
   05FF 8E 83              1664 	mov	dph,r6
   0601 8F F0              1665 	mov	b,r7
   0603 E5*00              1666 	mov	a,_bp
   0605 24 08              1667 	add	a,#0x08
   0607 F8                 1668 	mov	r0,a
   0608 12s00r00           1669 	lcall	__gptrget
   060B F6                 1670 	mov	@r0,a
   060C A3                 1671 	inc	dptr
   060D 12s00r00           1672 	lcall	__gptrget
   0610 08                 1673 	inc	r0
   0611 F6                 1674 	mov	@r0,a
   0612 A8*00              1675 	mov	r0,_bp
   0614 08                 1676 	inc	r0
   0615 74 A2              1677 	mov	a,#0xA2
   0617 26                 1678 	add	a,@r0
   0618 FA                 1679 	mov	r2,a
   0619 E4                 1680 	clr	a
   061A 08                 1681 	inc	r0
   061B 36                 1682 	addc	a,@r0
   061C FB                 1683 	mov	r3,a
   061D 08                 1684 	inc	r0
   061E 86 04              1685 	mov	ar4,@r0
   0620 8A 82              1686 	mov	dpl,r2
   0622 8B 83              1687 	mov	dph,r3
   0624 8C F0              1688 	mov	b,r4
   0626 12s00r00           1689 	lcall	__gptrget
   0629 FB                 1690 	mov	r3,a
   062A A3                 1691 	inc	dptr
   062B 12s00r00           1692 	lcall	__gptrget
   062E FC                 1693 	mov	r4,a
   062F E5*00              1694 	mov	a,_bp
   0631 24 08              1695 	add	a,#0x08
   0633 F8                 1696 	mov	r0,a
   0634 E6                 1697 	mov	a,@r0
   0635 B5 03 07           1698 	cjne	a,ar3,00139$
   0638 08                 1699 	inc	r0
   0639 E6                 1700 	mov	a,@r0
   063A B5 04 02           1701 	cjne	a,ar4,00139$
   063D 80 03              1702 	sjmp	00140$
   063F                    1703 00139$:
   063F 02s07r5A           1704 	ljmp	00110$
   0642                    1705 00140$:
                           1706 ;	../../core/net/rime/rudolph1.c:179: write_data(c, p->h.chunk, p->data, p->datalen);
   0642 C0 05              1707 	push	ar5
   0644 C0 06              1708 	push	ar6
   0646 C0 07              1709 	push	ar7
   0648 E5*00              1710 	mov	a,_bp
   064A 24 05              1711 	add	a,#0x05
   064C F8                 1712 	mov	r0,a
   064D 74 04              1713 	mov	a,#0x04
   064F 26                 1714 	add	a,@r0
   0650 FA                 1715 	mov	r2,a
   0651 E4                 1716 	clr	a
   0652 08                 1717 	inc	r0
   0653 36                 1718 	addc	a,@r0
   0654 FE                 1719 	mov	r6,a
   0655 08                 1720 	inc	r0
   0656 86 07              1721 	mov	ar7,@r0
   0658 8A 82              1722 	mov	dpl,r2
   065A 8E 83              1723 	mov	dph,r6
   065C 8F F0              1724 	mov	b,r7
   065E 12s00r00           1725 	lcall	__gptrget
   0661 FC                 1726 	mov	r4,a
   0662 7B 00              1727 	mov	r3,#0x00
   0664 E5*00              1728 	mov	a,_bp
   0666 24 05              1729 	add	a,#0x05
   0668 F8                 1730 	mov	r0,a
   0669 74 05              1731 	mov	a,#0x05
   066B 26                 1732 	add	a,@r0
   066C F6                 1733 	mov	@r0,a
   066D E4                 1734 	clr	a
   066E 08                 1735 	inc	r0
   066F 36                 1736 	addc	a,@r0
   0670 F6                 1737 	mov	@r0,a
   0671 E5*00              1738 	mov	a,_bp
   0673 24 08              1739 	add	a,#0x08
   0675 F8                 1740 	mov	r0,a
   0676 86 02              1741 	mov	ar2,@r0
   0678 08                 1742 	inc	r0
   0679 86 07              1743 	mov	ar7,@r0
   067B C0 07              1744 	push	ar7
   067D C0 06              1745 	push	ar6
   067F C0 05              1746 	push	ar5
   0681 C0 04              1747 	push	ar4
   0683 C0 03              1748 	push	ar3
   0685 E5*00              1749 	mov	a,_bp
   0687 24 05              1750 	add	a,#0x05
   0689 F8                 1751 	mov	r0,a
   068A E6                 1752 	mov	a,@r0
   068B C0 E0              1753 	push	acc
   068D 08                 1754 	inc	r0
   068E E6                 1755 	mov	a,@r0
   068F C0 E0              1756 	push	acc
   0691 08                 1757 	inc	r0
   0692 E6                 1758 	mov	a,@r0
   0693 C0 E0              1759 	push	acc
   0695 C0 02              1760 	push	ar2
   0697 C0 07              1761 	push	ar7
   0699 A8*00              1762 	mov	r0,_bp
   069B 08                 1763 	inc	r0
   069C 86 82              1764 	mov	dpl,@r0
   069E 08                 1765 	inc	r0
   069F 86 83              1766 	mov	dph,@r0
   06A1 08                 1767 	inc	r0
   06A2 86 F0              1768 	mov	b,@r0
   06A4 12s01rDB           1769 	lcall	_write_data
   06A7 E5 81              1770 	mov	a,sp
   06A9 24 F9              1771 	add	a,#0xf9
   06AB F5 81              1772 	mov	sp,a
   06AD D0 05              1773 	pop	ar5
   06AF D0 06              1774 	pop	ar6
   06B1 D0 07              1775 	pop	ar7
                           1776 ;	../../core/net/rime/rudolph1.c:180: if(c->highest_chunk_heard < c->chunk) {
   06B3 A8*00              1777 	mov	r0,_bp
   06B5 08                 1778 	inc	r0
   06B6 74 A4              1779 	mov	a,#0xA4
   06B8 26                 1780 	add	a,@r0
   06B9 FC                 1781 	mov	r4,a
   06BA E4                 1782 	clr	a
   06BB 08                 1783 	inc	r0
   06BC 36                 1784 	addc	a,@r0
   06BD FB                 1785 	mov	r3,a
   06BE 08                 1786 	inc	r0
   06BF 86 02              1787 	mov	ar2,@r0
   06C1 8C 82              1788 	mov	dpl,r4
   06C3 8B 83              1789 	mov	dph,r3
   06C5 8A F0              1790 	mov	b,r2
   06C7 12s00r00           1791 	lcall	__gptrget
   06CA FE                 1792 	mov	r6,a
   06CB A3                 1793 	inc	dptr
   06CC 12s00r00           1794 	lcall	__gptrget
   06CF FF                 1795 	mov	r7,a
   06D0 A8*00              1796 	mov	r0,_bp
   06D2 08                 1797 	inc	r0
   06D3 E5*00              1798 	mov	a,_bp
   06D5 24 0D              1799 	add	a,#0x0d
   06D7 F9                 1800 	mov	r1,a
   06D8 74 A2              1801 	mov	a,#0xA2
   06DA 26                 1802 	add	a,@r0
   06DB F7                 1803 	mov	@r1,a
   06DC E4                 1804 	clr	a
   06DD 08                 1805 	inc	r0
   06DE 36                 1806 	addc	a,@r0
   06DF 09                 1807 	inc	r1
   06E0 F7                 1808 	mov	@r1,a
   06E1 08                 1809 	inc	r0
   06E2 09                 1810 	inc	r1
   06E3 E6                 1811 	mov	a,@r0
   06E4 F7                 1812 	mov	@r1,a
   06E5 E5*00              1813 	mov	a,_bp
   06E7 24 0D              1814 	add	a,#0x0d
   06E9 F8                 1815 	mov	r0,a
   06EA 86 82              1816 	mov	dpl,@r0
   06EC 08                 1817 	inc	r0
   06ED 86 83              1818 	mov	dph,@r0
   06EF 08                 1819 	inc	r0
   06F0 86 F0              1820 	mov	b,@r0
   06F2 E5*00              1821 	mov	a,_bp
   06F4 24 0B              1822 	add	a,#0x0b
   06F6 F9                 1823 	mov	r1,a
   06F7 12s00r00           1824 	lcall	__gptrget
   06FA F7                 1825 	mov	@r1,a
   06FB A3                 1826 	inc	dptr
   06FC 12s00r00           1827 	lcall	__gptrget
   06FF 09                 1828 	inc	r1
   0700 F7                 1829 	mov	@r1,a
   0701 E5*00              1830 	mov	a,_bp
   0703 24 0B              1831 	add	a,#0x0b
   0705 F8                 1832 	mov	r0,a
   0706 C3                 1833 	clr	c
   0707 EE                 1834 	mov	a,r6
   0708 96                 1835 	subb	a,@r0
   0709 EF                 1836 	mov	a,r7
   070A 08                 1837 	inc	r0
   070B 96                 1838 	subb	a,@r0
   070C D0 07              1839 	pop	ar7
   070E D0 06              1840 	pop	ar6
   0710 D0 05              1841 	pop	ar5
   0712 50 15              1842 	jnc	00105$
                           1843 ;	../../core/net/rime/rudolph1.c:181: c->highest_chunk_heard = c->chunk;
   0714 8C 82              1844 	mov	dpl,r4
   0716 8B 83              1845 	mov	dph,r3
   0718 8A F0              1846 	mov	b,r2
   071A E5*00              1847 	mov	a,_bp
   071C 24 0B              1848 	add	a,#0x0b
   071E F8                 1849 	mov	r0,a
   071F E6                 1850 	mov	a,@r0
   0720 12s00r00           1851 	lcall	__gptrput
   0723 A3                 1852 	inc	dptr
   0724 08                 1853 	inc	r0
   0725 E6                 1854 	mov	a,@r0
   0726 12s00r00           1855 	lcall	__gptrput
   0729                    1856 00105$:
                           1857 ;	../../core/net/rime/rudolph1.c:183: c->chunk++;
   0729 C0 05              1858 	push	ar5
   072B C0 06              1859 	push	ar6
   072D C0 07              1860 	push	ar7
   072F E5*00              1861 	mov	a,_bp
   0731 24 0B              1862 	add	a,#0x0b
   0733 F8                 1863 	mov	r0,a
   0734 74 01              1864 	mov	a,#0x01
   0736 26                 1865 	add	a,@r0
   0737 FA                 1866 	mov	r2,a
   0738 E4                 1867 	clr	a
   0739 08                 1868 	inc	r0
   073A 36                 1869 	addc	a,@r0
   073B FF                 1870 	mov	r7,a
   073C E5*00              1871 	mov	a,_bp
   073E 24 0D              1872 	add	a,#0x0d
   0740 F8                 1873 	mov	r0,a
   0741 86 82              1874 	mov	dpl,@r0
   0743 08                 1875 	inc	r0
   0744 86 83              1876 	mov	dph,@r0
   0746 08                 1877 	inc	r0
   0747 86 F0              1878 	mov	b,@r0
   0749 EA                 1879 	mov	a,r2
   074A 12s00r00           1880 	lcall	__gptrput
   074D A3                 1881 	inc	dptr
   074E EF                 1882 	mov	a,r7
   074F 12s00r00           1883 	lcall	__gptrput
   0752 D0 07              1884 	pop	ar7
   0754 D0 06              1885 	pop	ar6
   0756 D0 05              1886 	pop	ar5
   0758 80 61              1887 	sjmp	00111$
   075A                    1888 00110$:
                           1889 ;	../../core/net/rime/rudolph1.c:184: } else if(p->h.chunk > c->chunk) {
   075A E5*00              1890 	mov	a,_bp
   075C 24 08              1891 	add	a,#0x08
   075E F8                 1892 	mov	r0,a
   075F C3                 1893 	clr	c
   0760 EB                 1894 	mov	a,r3
   0761 96                 1895 	subb	a,@r0
   0762 EC                 1896 	mov	a,r4
   0763 08                 1897 	inc	r0
   0764 96                 1898 	subb	a,@r0
   0765 50 54              1899 	jnc	00111$
                           1900 ;	../../core/net/rime/rudolph1.c:188: send_nack(c);
   0767 A8*00              1901 	mov	r0,_bp
   0769 08                 1902 	inc	r0
   076A 86 82              1903 	mov	dpl,@r0
   076C 08                 1904 	inc	r0
   076D 86 83              1905 	mov	dph,@r0
   076F 08                 1906 	inc	r0
   0770 86 F0              1907 	mov	b,@r0
   0772 C0 07              1908 	push	ar7
   0774 C0 06              1909 	push	ar6
   0776 C0 05              1910 	push	ar5
   0778 12s03rB1           1911 	lcall	_send_nack
   077B D0 05              1912 	pop	ar5
   077D D0 06              1913 	pop	ar6
   077F D0 07              1914 	pop	ar7
                           1915 ;	../../core/net/rime/rudolph1.c:189: c->highest_chunk_heard = p->h.chunk;
   0781 A8*00              1916 	mov	r0,_bp
   0783 08                 1917 	inc	r0
   0784 E5*00              1918 	mov	a,_bp
   0786 24 0D              1919 	add	a,#0x0d
   0788 F9                 1920 	mov	r1,a
   0789 74 A4              1921 	mov	a,#0xA4
   078B 26                 1922 	add	a,@r0
   078C F7                 1923 	mov	@r1,a
   078D E4                 1924 	clr	a
   078E 08                 1925 	inc	r0
   078F 36                 1926 	addc	a,@r0
   0790 09                 1927 	inc	r1
   0791 F7                 1928 	mov	@r1,a
   0792 08                 1929 	inc	r0
   0793 09                 1930 	inc	r1
   0794 E6                 1931 	mov	a,@r0
   0795 F7                 1932 	mov	@r1,a
   0796 8D 82              1933 	mov	dpl,r5
   0798 8E 83              1934 	mov	dph,r6
   079A 8F F0              1935 	mov	b,r7
   079C 12s00r00           1936 	lcall	__gptrget
   079F FB                 1937 	mov	r3,a
   07A0 A3                 1938 	inc	dptr
   07A1 12s00r00           1939 	lcall	__gptrget
   07A4 FC                 1940 	mov	r4,a
   07A5 E5*00              1941 	mov	a,_bp
   07A7 24 0D              1942 	add	a,#0x0d
   07A9 F8                 1943 	mov	r0,a
   07AA 86 82              1944 	mov	dpl,@r0
   07AC 08                 1945 	inc	r0
   07AD 86 83              1946 	mov	dph,@r0
   07AF 08                 1947 	inc	r0
   07B0 86 F0              1948 	mov	b,@r0
   07B2 EB                 1949 	mov	a,r3
   07B3 12s00r00           1950 	lcall	__gptrput
   07B6 A3                 1951 	inc	dptr
   07B7 EC                 1952 	mov	a,r4
   07B8 12s00r00           1953 	lcall	__gptrput
                           1954 ;	../../core/net/rime/rudolph1.c:190: } else if(p->h.chunk < c->chunk) {
   07BB                    1955 00111$:
                           1956 ;	../../core/net/rime/rudolph1.c:197: if(c->highest_chunk_heard > p->h.chunk) {
   07BB A8*00              1957 	mov	r0,_bp
   07BD 08                 1958 	inc	r0
   07BE 74 A4              1959 	mov	a,#0xA4
   07C0 26                 1960 	add	a,@r0
   07C1 FA                 1961 	mov	r2,a
   07C2 E4                 1962 	clr	a
   07C3 08                 1963 	inc	r0
   07C4 36                 1964 	addc	a,@r0
   07C5 FB                 1965 	mov	r3,a
   07C6 08                 1966 	inc	r0
   07C7 86 04              1967 	mov	ar4,@r0
   07C9 8A 82              1968 	mov	dpl,r2
   07CB 8B 83              1969 	mov	dph,r3
   07CD 8C F0              1970 	mov	b,r4
   07CF 12s00r00           1971 	lcall	__gptrget
   07D2 FA                 1972 	mov	r2,a
   07D3 A3                 1973 	inc	dptr
   07D4 12s00r00           1974 	lcall	__gptrget
   07D7 FB                 1975 	mov	r3,a
   07D8 8D 82              1976 	mov	dpl,r5
   07DA 8E 83              1977 	mov	dph,r6
   07DC 8F F0              1978 	mov	b,r7
   07DE 12s00r00           1979 	lcall	__gptrget
   07E1 FD                 1980 	mov	r5,a
   07E2 A3                 1981 	inc	dptr
   07E3 12s00r00           1982 	lcall	__gptrget
   07E6 FE                 1983 	mov	r6,a
   07E7 C3                 1984 	clr	c
   07E8 ED                 1985 	mov	a,r5
   07E9 9A                 1986 	subb	a,r2
   07EA EE                 1987 	mov	a,r6
   07EB 9B                 1988 	subb	a,r3
   07EC 50 0E              1989 	jnc	00119$
                           1990 ;	../../core/net/rime/rudolph1.c:198: send_nack(c);
   07EE A8*00              1991 	mov	r0,_bp
   07F0 08                 1992 	inc	r0
   07F1 86 82              1993 	mov	dpl,@r0
   07F3 08                 1994 	inc	r0
   07F4 86 83              1995 	mov	dph,@r0
   07F6 08                 1996 	inc	r0
   07F7 86 F0              1997 	mov	b,@r0
   07F9 12s03rB1           1998 	lcall	_send_nack
   07FC                    1999 00119$:
   07FC 85*00 81           2000 	mov	sp,_bp
   07FF D0*00              2001 	pop	_bp
   0801 22                 2002 	ret
                           2003 ;------------------------------------------------------------
                           2004 ;Allocation info for local variables in function 'recv_trickle'
                           2005 ;------------------------------------------------------------
                           2006 ;trickle                   Allocated to registers r5 r6 r7 
                           2007 ;c                         Allocated to registers r5 r6 r7 
                           2008 ;p                         Allocated to registers r2 r3 r4 
                           2009 ;------------------------------------------------------------
                           2010 ;	../../core/net/rime/rudolph1.c:207: recv_trickle(struct trickle_conn *trickle)
                           2011 ;	-----------------------------------------
                           2012 ;	 function recv_trickle
                           2013 ;	-----------------------------------------
   0802                    2014 _recv_trickle:
   0802 AD 82              2015 	mov	r5,dpl
   0804 AE 83              2016 	mov	r6,dph
   0806 AF F0              2017 	mov	r7,b
                           2018 ;	../../core/net/rime/rudolph1.c:209: struct rudolph1_conn *c = (struct rudolph1_conn *)trickle;
                           2019 ;	../../core/net/rime/rudolph1.c:210: struct rudolph1_datapacket *p = packetbuf_dataptr();
   0808 C0 07              2020 	push	ar7
   080A C0 06              2021 	push	ar6
   080C C0 05              2022 	push	ar5
   080E 12s00r00           2023 	lcall	_packetbuf_dataptr
   0811 AA 82              2024 	mov	r2,dpl
   0813 AB 83              2025 	mov	r3,dph
   0815 AC F0              2026 	mov	r4,b
   0817 D0 05              2027 	pop	ar5
   0819 D0 06              2028 	pop	ar6
   081B D0 07              2029 	pop	ar7
                           2030 ;	../../core/net/rime/rudolph1.c:212: if(p->h.type == TYPE_DATA) {
   081D 8A 82              2031 	mov	dpl,r2
   081F 8B 83              2032 	mov	dph,r3
   0821 8C F0              2033 	mov	b,r4
   0823 12s00r00           2034 	lcall	__gptrget
   0826 70 15              2035 	jnz	00103$
                           2036 ;	../../core/net/rime/rudolph1.c:216: handle_data(c, p);
   0828 C0 02              2037 	push	ar2
   082A C0 03              2038 	push	ar3
   082C C0 04              2039 	push	ar4
   082E 8D 82              2040 	mov	dpl,r5
   0830 8E 83              2041 	mov	dph,r6
   0832 8F F0              2042 	mov	b,r7
   0834 12s04r8D           2043 	lcall	_handle_data
   0837 15 81              2044 	dec	sp
   0839 15 81              2045 	dec	sp
   083B 15 81              2046 	dec	sp
   083D                    2047 00103$:
   083D 22                 2048 	ret
                           2049 ;------------------------------------------------------------
                           2050 ;Allocation info for local variables in function 'sent_ipolite'
                           2051 ;------------------------------------------------------------
                           2052 ;ipolite                   Allocated to registers 
                           2053 ;------------------------------------------------------------
                           2054 ;	../../core/net/rime/rudolph1.c:221: sent_ipolite(struct ipolite_conn *ipolite)
                           2055 ;	-----------------------------------------
                           2056 ;	 function sent_ipolite
                           2057 ;	-----------------------------------------
   083E                    2058 _sent_ipolite:
                           2059 ;	../../core/net/rime/rudolph1.c:225: }
   083E 22                 2060 	ret
                           2061 ;------------------------------------------------------------
                           2062 ;Allocation info for local variables in function 'dropped_ipolite'
                           2063 ;------------------------------------------------------------
                           2064 ;ipolite                   Allocated to registers 
                           2065 ;------------------------------------------------------------
                           2066 ;	../../core/net/rime/rudolph1.c:228: dropped_ipolite(struct ipolite_conn *ipolite)
                           2067 ;	-----------------------------------------
                           2068 ;	 function dropped_ipolite
                           2069 ;	-----------------------------------------
   083F                    2070 _dropped_ipolite:
                           2071 ;	../../core/net/rime/rudolph1.c:232: }
   083F 22                 2072 	ret
                           2073 ;------------------------------------------------------------
                           2074 ;Allocation info for local variables in function 'recv_ipolite'
                           2075 ;------------------------------------------------------------
                           2076 ;from                      Allocated to stack - _bp -5
                           2077 ;ipolite                   Allocated to registers r5 r6 r7 
                           2078 ;c                         Allocated to stack - _bp +1
                           2079 ;p                         Allocated to stack - _bp +4
                           2080 ;sloc0                     Allocated to stack - _bp +10
                           2081 ;------------------------------------------------------------
                           2082 ;	../../core/net/rime/rudolph1.c:235: recv_ipolite(struct ipolite_conn *ipolite, const rimeaddr_t *from)
                           2083 ;	-----------------------------------------
                           2084 ;	 function recv_ipolite
                           2085 ;	-----------------------------------------
   0840                    2086 _recv_ipolite:
   0840 C0*00              2087 	push	_bp
   0842 E5 81              2088 	mov	a,sp
   0844 F5*00              2089 	mov	_bp,a
   0846 24 06              2090 	add	a,#0x06
   0848 F5 81              2091 	mov	sp,a
   084A AD 82              2092 	mov	r5,dpl
   084C AE 83              2093 	mov	r6,dph
   084E AF F0              2094 	mov	r7,b
                           2095 ;	../../core/net/rime/rudolph1.c:237: struct rudolph1_conn *c = (struct rudolph1_conn *)
   0850 ED                 2096 	mov	a,r5
   0851 24 A5              2097 	add	a,#0xA5
   0853 FD                 2098 	mov	r5,a
   0854 EE                 2099 	mov	a,r6
   0855 34 FF              2100 	addc	a,#0xFF
   0857 FE                 2101 	mov	r6,a
   0858 A8*00              2102 	mov	r0,_bp
   085A 08                 2103 	inc	r0
   085B A6 05              2104 	mov	@r0,ar5
   085D 08                 2105 	inc	r0
   085E A6 06              2106 	mov	@r0,ar6
   0860 08                 2107 	inc	r0
   0861 A6 07              2108 	mov	@r0,ar7
                           2109 ;	../../core/net/rime/rudolph1.c:239: struct rudolph1_datapacket *p = packetbuf_dataptr();
   0863 12s00r00           2110 	lcall	_packetbuf_dataptr
   0866 AA 82              2111 	mov	r2,dpl
   0868 AB 83              2112 	mov	r3,dph
   086A AC F0              2113 	mov	r4,b
   086C E5*00              2114 	mov	a,_bp
   086E 24 04              2115 	add	a,#0x04
   0870 F8                 2116 	mov	r0,a
   0871 A6 02              2117 	mov	@r0,ar2
   0873 08                 2118 	inc	r0
   0874 A6 03              2119 	mov	@r0,ar3
   0876 08                 2120 	inc	r0
   0877 A6 04              2121 	mov	@r0,ar4
                           2122 ;	../../core/net/rime/rudolph1.c:245: c->nacks++;
   0879 A8*00              2123 	mov	r0,_bp
   087B 08                 2124 	inc	r0
   087C 74 A7              2125 	mov	a,#0xA7
   087E 26                 2126 	add	a,@r0
   087F FD                 2127 	mov	r5,a
   0880 E4                 2128 	clr	a
   0881 08                 2129 	inc	r0
   0882 36                 2130 	addc	a,@r0
   0883 FE                 2131 	mov	r6,a
   0884 08                 2132 	inc	r0
   0885 86 07              2133 	mov	ar7,@r0
   0887 8D 82              2134 	mov	dpl,r5
   0889 8E 83              2135 	mov	dph,r6
   088B 8F F0              2136 	mov	b,r7
   088D 12s00r00           2137 	lcall	__gptrget
   0890 FC                 2138 	mov	r4,a
   0891 0C                 2139 	inc	r4
   0892 8D 82              2140 	mov	dpl,r5
   0894 8E 83              2141 	mov	dph,r6
   0896 8F F0              2142 	mov	b,r7
   0898 EC                 2143 	mov	a,r4
   0899 12s00r00           2144 	lcall	__gptrput
                           2145 ;	../../core/net/rime/rudolph1.c:247: if(p->h.type == TYPE_NACK) {
   089C E5*00              2146 	mov	a,_bp
   089E 24 04              2147 	add	a,#0x04
   08A0 F8                 2148 	mov	r0,a
   08A1 86 82              2149 	mov	dpl,@r0
   08A3 08                 2150 	inc	r0
   08A4 86 83              2151 	mov	dph,@r0
   08A6 08                 2152 	inc	r0
   08A7 86 F0              2153 	mov	b,@r0
   08A9 12s00r00           2154 	lcall	__gptrget
   08AC FF                 2155 	mov	r7,a
   08AD BF 01 02           2156 	cjne	r7,#0x01,00125$
   08B0 80 03              2157 	sjmp	00126$
   08B2                    2158 00125$:
   08B2 02s09rE5           2159 	ljmp	00111$
   08B5                    2160 00126$:
                           2161 ;	../../core/net/rime/rudolph1.c:252: if(p->h.version == c->version) {
   08B5 E5*00              2162 	mov	a,_bp
   08B7 24 04              2163 	add	a,#0x04
   08B9 F8                 2164 	mov	r0,a
   08BA 74 01              2165 	mov	a,#0x01
   08BC 26                 2166 	add	a,@r0
   08BD FC                 2167 	mov	r4,a
   08BE E4                 2168 	clr	a
   08BF 08                 2169 	inc	r0
   08C0 36                 2170 	addc	a,@r0
   08C1 FD                 2171 	mov	r5,a
   08C2 08                 2172 	inc	r0
   08C3 86 06              2173 	mov	ar6,@r0
   08C5 8C 82              2174 	mov	dpl,r4
   08C7 8D 83              2175 	mov	dph,r5
   08C9 8E F0              2176 	mov	b,r6
   08CB 12s00r00           2177 	lcall	__gptrget
   08CE FE                 2178 	mov	r6,a
   08CF A8*00              2179 	mov	r0,_bp
   08D1 08                 2180 	inc	r0
   08D2 74 A6              2181 	mov	a,#0xA6
   08D4 26                 2182 	add	a,@r0
   08D5 FB                 2183 	mov	r3,a
   08D6 E4                 2184 	clr	a
   08D7 08                 2185 	inc	r0
   08D8 36                 2186 	addc	a,@r0
   08D9 FC                 2187 	mov	r4,a
   08DA 08                 2188 	inc	r0
   08DB 86 05              2189 	mov	ar5,@r0
   08DD 8B 82              2190 	mov	dpl,r3
   08DF 8C 83              2191 	mov	dph,r4
   08E1 8D F0              2192 	mov	b,r5
   08E3 12s00r00           2193 	lcall	__gptrget
   08E6 FD                 2194 	mov	r5,a
   08E7 EE                 2195 	mov	a,r6
   08E8 B5 05 02           2196 	cjne	a,ar5,00127$
   08EB 80 03              2197 	sjmp	00128$
   08ED                    2198 00127$:
   08ED 02s09r7B           2199 	ljmp	00106$
   08F0                    2200 00128$:
                           2201 ;	../../core/net/rime/rudolph1.c:253: if(p->h.chunk < c->chunk) {
   08F0 E5*00              2202 	mov	a,_bp
   08F2 24 04              2203 	add	a,#0x04
   08F4 F8                 2204 	mov	r0,a
   08F5 74 02              2205 	mov	a,#0x02
   08F7 26                 2206 	add	a,@r0
   08F8 FA                 2207 	mov	r2,a
   08F9 E4                 2208 	clr	a
   08FA 08                 2209 	inc	r0
   08FB 36                 2210 	addc	a,@r0
   08FC FB                 2211 	mov	r3,a
   08FD 08                 2212 	inc	r0
   08FE 86 04              2213 	mov	ar4,@r0
   0900 8A 82              2214 	mov	dpl,r2
   0902 8B 83              2215 	mov	dph,r3
   0904 8C F0              2216 	mov	b,r4
   0906 12s00r00           2217 	lcall	__gptrget
   0909 FF                 2218 	mov	r7,a
   090A A3                 2219 	inc	dptr
   090B 12s00r00           2220 	lcall	__gptrget
   090E FE                 2221 	mov	r6,a
   090F A8*00              2222 	mov	r0,_bp
   0911 08                 2223 	inc	r0
   0912 74 A2              2224 	mov	a,#0xA2
   0914 26                 2225 	add	a,@r0
   0915 FA                 2226 	mov	r2,a
   0916 E4                 2227 	clr	a
   0917 08                 2228 	inc	r0
   0918 36                 2229 	addc	a,@r0
   0919 FB                 2230 	mov	r3,a
   091A 08                 2231 	inc	r0
   091B 86 04              2232 	mov	ar4,@r0
   091D 8A 82              2233 	mov	dpl,r2
   091F 8B 83              2234 	mov	dph,r3
   0921 8C F0              2235 	mov	b,r4
   0923 12s00r00           2236 	lcall	__gptrget
   0926 FA                 2237 	mov	r2,a
   0927 A3                 2238 	inc	dptr
   0928 12s00r00           2239 	lcall	__gptrget
   092B FB                 2240 	mov	r3,a
   092C C3                 2241 	clr	c
   092D EF                 2242 	mov	a,r7
   092E 9A                 2243 	subb	a,r2
   092F EE                 2244 	mov	a,r6
   0930 9B                 2245 	subb	a,r3
   0931 40 03              2246 	jc	00129$
   0933 02s0Ar0C           2247 	ljmp	00113$
   0936                    2248 00129$:
                           2249 ;	../../core/net/rime/rudolph1.c:258: format_data(c, p->h.chunk);
   0936 8F 03              2250 	mov	ar3,r7
   0938 8E 04              2251 	mov	ar4,r6
   093A C0 03              2252 	push	ar3
   093C C0 04              2253 	push	ar4
   093E A8*00              2254 	mov	r0,_bp
   0940 08                 2255 	inc	r0
   0941 86 82              2256 	mov	dpl,@r0
   0943 08                 2257 	inc	r0
   0944 86 83              2258 	mov	dph,@r0
   0946 08                 2259 	inc	r0
   0947 86 F0              2260 	mov	b,@r0
   0949 12s00rAE           2261 	lcall	_format_data
   094C 15 81              2262 	dec	sp
   094E 15 81              2263 	dec	sp
                           2264 ;	../../core/net/rime/rudolph1.c:259: ipolite_send(&c->ipolite, REPAIR_TIMEOUT, sizeof(struct rudolph1_hdr));
   0950 A8*00              2265 	mov	r0,_bp
   0952 08                 2266 	inc	r0
   0953 74 5B              2267 	mov	a,#0x5B
   0955 26                 2268 	add	a,@r0
   0956 FA                 2269 	mov	r2,a
   0957 E4                 2270 	clr	a
   0958 08                 2271 	inc	r0
   0959 36                 2272 	addc	a,@r0
   095A FB                 2273 	mov	r3,a
   095B 08                 2274 	inc	r0
   095C 86 04              2275 	mov	ar4,@r0
   095E 74 04              2276 	mov	a,#0x04
   0960 C0 E0              2277 	push	acc
   0962 74 20              2278 	mov	a,#0x20
   0964 C0 E0              2279 	push	acc
   0966 E4                 2280 	clr	a
   0967 C0 E0              2281 	push	acc
   0969 8A 82              2282 	mov	dpl,r2
   096B 8B 83              2283 	mov	dph,r3
   096D 8C F0              2284 	mov	b,r4
   096F 12s00r00           2285 	lcall	_ipolite_send
   0972 15 81              2286 	dec	sp
   0974 15 81              2287 	dec	sp
   0976 15 81              2288 	dec	sp
   0978 02s0Ar0C           2289 	ljmp	00113$
   097B                    2290 00106$:
                           2291 ;	../../core/net/rime/rudolph1.c:261: } else if(LT(p->h.version, c->version)) {
   097B EE                 2292 	mov	a,r6
   097C C3                 2293 	clr	c
   097D 9D                 2294 	subb	a,r5
   097E FE                 2295 	mov	r6,a
   097F 20 E7 03           2296 	jb	acc.7,00130$
   0982 02s0Ar0C           2297 	ljmp	00113$
   0985                    2298 00130$:
                           2299 ;	../../core/net/rime/rudolph1.c:262: format_data(c, 0);
   0985 E4                 2300 	clr	a
   0986 C0 E0              2301 	push	acc
   0988 C0 E0              2302 	push	acc
   098A A8*00              2303 	mov	r0,_bp
   098C 08                 2304 	inc	r0
   098D 86 82              2305 	mov	dpl,@r0
   098F 08                 2306 	inc	r0
   0990 86 83              2307 	mov	dph,@r0
   0992 08                 2308 	inc	r0
   0993 86 F0              2309 	mov	b,@r0
   0995 12s00rAE           2310 	lcall	_format_data
   0998 15 81              2311 	dec	sp
   099A 15 81              2312 	dec	sp
                           2313 ;	../../core/net/rime/rudolph1.c:263: ipolite_send(&c->ipolite, c->send_interval / 2, sizeof(struct rudolph1_hdr));
   099C A8*00              2314 	mov	r0,_bp
   099E 08                 2315 	inc	r0
   099F 74 A0              2316 	mov	a,#0xA0
   09A1 26                 2317 	add	a,@r0
   09A2 FC                 2318 	mov	r4,a
   09A3 E4                 2319 	clr	a
   09A4 08                 2320 	inc	r0
   09A5 36                 2321 	addc	a,@r0
   09A6 FD                 2322 	mov	r5,a
   09A7 08                 2323 	inc	r0
   09A8 86 06              2324 	mov	ar6,@r0
   09AA 8C 82              2325 	mov	dpl,r4
   09AC 8D 83              2326 	mov	dph,r5
   09AE 8E F0              2327 	mov	b,r6
   09B0 12s00r00           2328 	lcall	__gptrget
   09B3 FC                 2329 	mov	r4,a
   09B4 A3                 2330 	inc	dptr
   09B5 12s00r00           2331 	lcall	__gptrget
   09B8 C3                 2332 	clr	c
   09B9 13                 2333 	rrc	a
   09BA CC                 2334 	xch	a,r4
   09BB 13                 2335 	rrc	a
   09BC CC                 2336 	xch	a,r4
   09BD FD                 2337 	mov	r5,a
   09BE A8*00              2338 	mov	r0,_bp
   09C0 08                 2339 	inc	r0
   09C1 74 5B              2340 	mov	a,#0x5B
   09C3 26                 2341 	add	a,@r0
   09C4 FA                 2342 	mov	r2,a
   09C5 E4                 2343 	clr	a
   09C6 08                 2344 	inc	r0
   09C7 36                 2345 	addc	a,@r0
   09C8 FB                 2346 	mov	r3,a
   09C9 08                 2347 	inc	r0
   09CA 86 06              2348 	mov	ar6,@r0
   09CC 74 04              2349 	mov	a,#0x04
   09CE C0 E0              2350 	push	acc
   09D0 C0 04              2351 	push	ar4
   09D2 C0 05              2352 	push	ar5
   09D4 8A 82              2353 	mov	dpl,r2
   09D6 8B 83              2354 	mov	dph,r3
   09D8 8E F0              2355 	mov	b,r6
   09DA 12s00r00           2356 	lcall	_ipolite_send
   09DD 15 81              2357 	dec	sp
   09DF 15 81              2358 	dec	sp
   09E1 15 81              2359 	dec	sp
   09E3 80 27              2360 	sjmp	00113$
   09E5                    2361 00111$:
                           2362 ;	../../core/net/rime/rudolph1.c:265: } else if(p->h.type == TYPE_DATA) {
   09E5 EF                 2363 	mov	a,r7
   09E6 70 24              2364 	jnz	00113$
                           2365 ;	../../core/net/rime/rudolph1.c:270: handle_data(c, p);
   09E8 E5*00              2366 	mov	a,_bp
   09EA 24 04              2367 	add	a,#0x04
   09EC F8                 2368 	mov	r0,a
   09ED E6                 2369 	mov	a,@r0
   09EE C0 E0              2370 	push	acc
   09F0 08                 2371 	inc	r0
   09F1 E6                 2372 	mov	a,@r0
   09F2 C0 E0              2373 	push	acc
   09F4 08                 2374 	inc	r0
   09F5 E6                 2375 	mov	a,@r0
   09F6 C0 E0              2376 	push	acc
   09F8 A8*00              2377 	mov	r0,_bp
   09FA 08                 2378 	inc	r0
   09FB 86 82              2379 	mov	dpl,@r0
   09FD 08                 2380 	inc	r0
   09FE 86 83              2381 	mov	dph,@r0
   0A00 08                 2382 	inc	r0
   0A01 86 F0              2383 	mov	b,@r0
   0A03 12s04r8D           2384 	lcall	_handle_data
   0A06 15 81              2385 	dec	sp
   0A08 15 81              2386 	dec	sp
   0A0A 15 81              2387 	dec	sp
   0A0C                    2388 00113$:
   0A0C 85*00 81           2389 	mov	sp,_bp
   0A0F D0*00              2390 	pop	_bp
   0A11 22                 2391 	ret
                           2392 ;------------------------------------------------------------
                           2393 ;Allocation info for local variables in function 'send_next_packet'
                           2394 ;------------------------------------------------------------
                           2395 ;ptr                       Allocated to registers r5 r6 r7 
                           2396 ;c                         Allocated to stack - _bp +1
                           2397 ;len                       Allocated to registers r3 r4 
                           2398 ;sloc0                     Allocated to stack - _bp +4
                           2399 ;sloc1                     Allocated to stack - _bp +7
                           2400 ;------------------------------------------------------------
                           2401 ;	../../core/net/rime/rudolph1.c:275: send_next_packet(void *ptr)
                           2402 ;	-----------------------------------------
                           2403 ;	 function send_next_packet
                           2404 ;	-----------------------------------------
   0A12                    2405 _send_next_packet:
   0A12 C0*00              2406 	push	_bp
   0A14 E5 81              2407 	mov	a,sp
   0A16 F5*00              2408 	mov	_bp,a
   0A18 24 08              2409 	add	a,#0x08
   0A1A F5 81              2410 	mov	sp,a
   0A1C AD 82              2411 	mov	r5,dpl
   0A1E AE 83              2412 	mov	r6,dph
   0A20 AF F0              2413 	mov	r7,b
                           2414 ;	../../core/net/rime/rudolph1.c:277: struct rudolph1_conn *c = ptr;
   0A22 A8*00              2415 	mov	r0,_bp
   0A24 08                 2416 	inc	r0
   0A25 A6 05              2417 	mov	@r0,ar5
   0A27 08                 2418 	inc	r0
   0A28 A6 06              2419 	mov	@r0,ar6
   0A2A 08                 2420 	inc	r0
   0A2B A6 07              2421 	mov	@r0,ar7
                           2422 ;	../../core/net/rime/rudolph1.c:279: if(c->nacks == 0) {
   0A2D A8*00              2423 	mov	r0,_bp
   0A2F 08                 2424 	inc	r0
   0A30 74 A7              2425 	mov	a,#0xA7
   0A32 26                 2426 	add	a,@r0
   0A33 FA                 2427 	mov	r2,a
   0A34 E4                 2428 	clr	a
   0A35 08                 2429 	inc	r0
   0A36 36                 2430 	addc	a,@r0
   0A37 FB                 2431 	mov	r3,a
   0A38 08                 2432 	inc	r0
   0A39 86 04              2433 	mov	ar4,@r0
   0A3B 8A 82              2434 	mov	dpl,r2
   0A3D 8B 83              2435 	mov	dph,r3
   0A3F 8C F0              2436 	mov	b,r4
   0A41 12s00r00           2437 	lcall	__gptrget
   0A44 60 03              2438 	jz	00112$
   0A46 02s0Br96           2439 	ljmp	00104$
   0A49                    2440 00112$:
                           2441 ;	../../core/net/rime/rudolph1.c:280: len = format_data(c, c->chunk);
   0A49 C0 02              2442 	push	ar2
   0A4B C0 03              2443 	push	ar3
   0A4D C0 04              2444 	push	ar4
   0A4F A8*00              2445 	mov	r0,_bp
   0A51 08                 2446 	inc	r0
   0A52 E5*00              2447 	mov	a,_bp
   0A54 24 04              2448 	add	a,#0x04
   0A56 F9                 2449 	mov	r1,a
   0A57 74 A2              2450 	mov	a,#0xA2
   0A59 26                 2451 	add	a,@r0
   0A5A F7                 2452 	mov	@r1,a
   0A5B E4                 2453 	clr	a
   0A5C 08                 2454 	inc	r0
   0A5D 36                 2455 	addc	a,@r0
   0A5E 09                 2456 	inc	r1
   0A5F F7                 2457 	mov	@r1,a
   0A60 08                 2458 	inc	r0
   0A61 09                 2459 	inc	r1
   0A62 E6                 2460 	mov	a,@r0
   0A63 F7                 2461 	mov	@r1,a
   0A64 E5*00              2462 	mov	a,_bp
   0A66 24 04              2463 	add	a,#0x04
   0A68 F8                 2464 	mov	r0,a
   0A69 86 82              2465 	mov	dpl,@r0
   0A6B 08                 2466 	inc	r0
   0A6C 86 83              2467 	mov	dph,@r0
   0A6E 08                 2468 	inc	r0
   0A6F 86 F0              2469 	mov	b,@r0
   0A71 12s00r00           2470 	lcall	__gptrget
   0A74 FB                 2471 	mov	r3,a
   0A75 A3                 2472 	inc	dptr
   0A76 12s00r00           2473 	lcall	__gptrget
   0A79 FC                 2474 	mov	r4,a
   0A7A C0 02              2475 	push	ar2
   0A7C C0 03              2476 	push	ar3
   0A7E C0 04              2477 	push	ar4
   0A80 A8*00              2478 	mov	r0,_bp
   0A82 08                 2479 	inc	r0
   0A83 86 82              2480 	mov	dpl,@r0
   0A85 08                 2481 	inc	r0
   0A86 86 83              2482 	mov	dph,@r0
   0A88 08                 2483 	inc	r0
   0A89 86 F0              2484 	mov	b,@r0
   0A8B 12s00rAE           2485 	lcall	_format_data
   0A8E AB 82              2486 	mov	r3,dpl
   0A90 AC 83              2487 	mov	r4,dph
   0A92 15 81              2488 	dec	sp
   0A94 15 81              2489 	dec	sp
   0A96 D0 02              2490 	pop	ar2
                           2491 ;	../../core/net/rime/rudolph1.c:281: trickle_send(&c->trickle);
   0A98 A8*00              2492 	mov	r0,_bp
   0A9A 08                 2493 	inc	r0
   0A9B 86 82              2494 	mov	dpl,@r0
   0A9D 08                 2495 	inc	r0
   0A9E 86 83              2496 	mov	dph,@r0
   0AA0 08                 2497 	inc	r0
   0AA1 86 F0              2498 	mov	b,@r0
   0AA3 C0 04              2499 	push	ar4
   0AA5 C0 03              2500 	push	ar3
   0AA7 C0 02              2501 	push	ar2
   0AA9 12s00r00           2502 	lcall	_trickle_send
   0AAC D0 02              2503 	pop	ar2
   0AAE D0 03              2504 	pop	ar3
   0AB0 D0 04              2505 	pop	ar4
                           2506 ;	../../core/net/rime/rudolph1.c:282: if(len == RUDOLPH1_DATASIZE) {
   0AB2 BB 40 05           2507 	cjne	r3,#0x40,00113$
   0AB5 BC 00 02           2508 	cjne	r4,#0x00,00113$
   0AB8 80 08              2509 	sjmp	00114$
   0ABA                    2510 00113$:
   0ABA D0 04              2511 	pop	ar4
   0ABC D0 03              2512 	pop	ar3
   0ABE D0 02              2513 	pop	ar2
   0AC0 80 77              2514 	sjmp	00102$
   0AC2                    2515 00114$:
                           2516 ;	../../core/net/rime/rudolph1.c:283: ctimer_set(&c->t, c->send_interval, send_next_packet, c);
   0AC2 A8*00              2517 	mov	r0,_bp
   0AC4 08                 2518 	inc	r0
   0AC5 86 02              2519 	mov	ar2,@r0
   0AC7 08                 2520 	inc	r0
   0AC8 86 03              2521 	mov	ar3,@r0
   0ACA 08                 2522 	inc	r0
   0ACB 86 04              2523 	mov	ar4,@r0
   0ACD A8*00              2524 	mov	r0,_bp
   0ACF 08                 2525 	inc	r0
   0AD0 74 A0              2526 	mov	a,#0xA0
   0AD2 26                 2527 	add	a,@r0
   0AD3 FD                 2528 	mov	r5,a
   0AD4 E4                 2529 	clr	a
   0AD5 08                 2530 	inc	r0
   0AD6 36                 2531 	addc	a,@r0
   0AD7 FE                 2532 	mov	r6,a
   0AD8 08                 2533 	inc	r0
   0AD9 86 07              2534 	mov	ar7,@r0
   0ADB 8D 82              2535 	mov	dpl,r5
   0ADD 8E 83              2536 	mov	dph,r6
   0ADF 8F F0              2537 	mov	b,r7
   0AE1 E5*00              2538 	mov	a,_bp
   0AE3 24 07              2539 	add	a,#0x07
   0AE5 F8                 2540 	mov	r0,a
   0AE6 12s00r00           2541 	lcall	__gptrget
   0AE9 F6                 2542 	mov	@r0,a
   0AEA A3                 2543 	inc	dptr
   0AEB 12s00r00           2544 	lcall	__gptrget
   0AEE 08                 2545 	inc	r0
   0AEF F6                 2546 	mov	@r0,a
   0AF0 A8*00              2547 	mov	r0,_bp
   0AF2 08                 2548 	inc	r0
   0AF3 74 8B              2549 	mov	a,#0x8B
   0AF5 26                 2550 	add	a,@r0
   0AF6 FD                 2551 	mov	r5,a
   0AF7 E4                 2552 	clr	a
   0AF8 08                 2553 	inc	r0
   0AF9 36                 2554 	addc	a,@r0
   0AFA FE                 2555 	mov	r6,a
   0AFB 08                 2556 	inc	r0
   0AFC 86 07              2557 	mov	ar7,@r0
   0AFE C0 04              2558 	push	ar4
   0B00 C0 03              2559 	push	ar3
   0B02 C0 02              2560 	push	ar2
   0B04 C0 02              2561 	push	ar2
   0B06 C0 03              2562 	push	ar3
   0B08 C0 04              2563 	push	ar4
   0B0A 74r12              2564 	mov	a,#_send_next_packet
   0B0C C0 E0              2565 	push	acc
   0B0E 74s0A              2566 	mov	a,#(_send_next_packet >> 8)
   0B10 C0 E0              2567 	push	acc
   0B12 E5*00              2568 	mov	a,_bp
   0B14 24 07              2569 	add	a,#0x07
   0B16 F8                 2570 	mov	r0,a
   0B17 E6                 2571 	mov	a,@r0
   0B18 C0 E0              2572 	push	acc
   0B1A 08                 2573 	inc	r0
   0B1B E6                 2574 	mov	a,@r0
   0B1C C0 E0              2575 	push	acc
   0B1E 8D 82              2576 	mov	dpl,r5
   0B20 8E 83              2577 	mov	dph,r6
   0B22 8F F0              2578 	mov	b,r7
   0B24 12s00r00           2579 	lcall	_ctimer_set
   0B27 E5 81              2580 	mov	a,sp
   0B29 24 F9              2581 	add	a,#0xf9
   0B2B F5 81              2582 	mov	sp,a
   0B2D D0 02              2583 	pop	ar2
   0B2F D0 03              2584 	pop	ar3
   0B31 D0 04              2585 	pop	ar4
                           2586 ;	../../core/net/rime/rudolph1.c:295: c->nacks = 0;
   0B33 D0 04              2587 	pop	ar4
   0B35 D0 03              2588 	pop	ar3
   0B37 D0 02              2589 	pop	ar2
                           2590 ;	../../core/net/rime/rudolph1.c:283: ctimer_set(&c->t, c->send_interval, send_next_packet, c);
   0B39                    2591 00102$:
                           2592 ;	../../core/net/rime/rudolph1.c:289: c->highest_chunk_heard = c->chunk;
   0B39 C0 02              2593 	push	ar2
   0B3B C0 03              2594 	push	ar3
   0B3D C0 04              2595 	push	ar4
   0B3F A8*00              2596 	mov	r0,_bp
   0B41 08                 2597 	inc	r0
   0B42 74 A4              2598 	mov	a,#0xA4
   0B44 26                 2599 	add	a,@r0
   0B45 FD                 2600 	mov	r5,a
   0B46 E4                 2601 	clr	a
   0B47 08                 2602 	inc	r0
   0B48 36                 2603 	addc	a,@r0
   0B49 FE                 2604 	mov	r6,a
   0B4A 08                 2605 	inc	r0
   0B4B 86 07              2606 	mov	ar7,@r0
   0B4D E5*00              2607 	mov	a,_bp
   0B4F 24 04              2608 	add	a,#0x04
   0B51 F8                 2609 	mov	r0,a
   0B52 86 82              2610 	mov	dpl,@r0
   0B54 08                 2611 	inc	r0
   0B55 86 83              2612 	mov	dph,@r0
   0B57 08                 2613 	inc	r0
   0B58 86 F0              2614 	mov	b,@r0
   0B5A 12s00r00           2615 	lcall	__gptrget
   0B5D FB                 2616 	mov	r3,a
   0B5E A3                 2617 	inc	dptr
   0B5F 12s00r00           2618 	lcall	__gptrget
   0B62 FC                 2619 	mov	r4,a
   0B63 8D 82              2620 	mov	dpl,r5
   0B65 8E 83              2621 	mov	dph,r6
   0B67 8F F0              2622 	mov	b,r7
   0B69 EB                 2623 	mov	a,r3
   0B6A 12s00r00           2624 	lcall	__gptrput
   0B6D A3                 2625 	inc	dptr
   0B6E EC                 2626 	mov	a,r4
   0B6F 12s00r00           2627 	lcall	__gptrput
                           2628 ;	../../core/net/rime/rudolph1.c:290: c->chunk++;
   0B72 0B                 2629 	inc	r3
   0B73 BB 00 01           2630 	cjne	r3,#0x00,00115$
   0B76 0C                 2631 	inc	r4
   0B77                    2632 00115$:
   0B77 E5*00              2633 	mov	a,_bp
   0B79 24 04              2634 	add	a,#0x04
   0B7B F8                 2635 	mov	r0,a
   0B7C 86 82              2636 	mov	dpl,@r0
   0B7E 08                 2637 	inc	r0
   0B7F 86 83              2638 	mov	dph,@r0
   0B81 08                 2639 	inc	r0
   0B82 86 F0              2640 	mov	b,@r0
   0B84 EB                 2641 	mov	a,r3
   0B85 12s00r00           2642 	lcall	__gptrput
   0B88 A3                 2643 	inc	dptr
   0B89 EC                 2644 	mov	a,r4
   0B8A 12s00r00           2645 	lcall	__gptrput
   0B8D D0 04              2646 	pop	ar4
   0B8F D0 03              2647 	pop	ar3
   0B91 D0 02              2648 	pop	ar2
   0B93 02s0Cr13           2649 	ljmp	00105$
   0B96                    2650 00104$:
                           2651 ;	../../core/net/rime/rudolph1.c:293: ctimer_set(&c->t, c->send_interval, send_next_packet, c);
   0B96 C0 02              2652 	push	ar2
   0B98 C0 03              2653 	push	ar3
   0B9A C0 04              2654 	push	ar4
   0B9C A8*00              2655 	mov	r0,_bp
   0B9E 08                 2656 	inc	r0
   0B9F 86 05              2657 	mov	ar5,@r0
   0BA1 08                 2658 	inc	r0
   0BA2 86 06              2659 	mov	ar6,@r0
   0BA4 08                 2660 	inc	r0
   0BA5 86 07              2661 	mov	ar7,@r0
   0BA7 A8*00              2662 	mov	r0,_bp
   0BA9 08                 2663 	inc	r0
   0BAA 74 A0              2664 	mov	a,#0xA0
   0BAC 26                 2665 	add	a,@r0
   0BAD FA                 2666 	mov	r2,a
   0BAE E4                 2667 	clr	a
   0BAF 08                 2668 	inc	r0
   0BB0 36                 2669 	addc	a,@r0
   0BB1 FB                 2670 	mov	r3,a
   0BB2 08                 2671 	inc	r0
   0BB3 86 04              2672 	mov	ar4,@r0
   0BB5 8A 82              2673 	mov	dpl,r2
   0BB7 8B 83              2674 	mov	dph,r3
   0BB9 8C F0              2675 	mov	b,r4
   0BBB E5*00              2676 	mov	a,_bp
   0BBD 24 07              2677 	add	a,#0x07
   0BBF F8                 2678 	mov	r0,a
   0BC0 12s00r00           2679 	lcall	__gptrget
   0BC3 F6                 2680 	mov	@r0,a
   0BC4 A3                 2681 	inc	dptr
   0BC5 12s00r00           2682 	lcall	__gptrget
   0BC8 08                 2683 	inc	r0
   0BC9 F6                 2684 	mov	@r0,a
   0BCA A8*00              2685 	mov	r0,_bp
   0BCC 08                 2686 	inc	r0
   0BCD 74 8B              2687 	mov	a,#0x8B
   0BCF 26                 2688 	add	a,@r0
   0BD0 FA                 2689 	mov	r2,a
   0BD1 E4                 2690 	clr	a
   0BD2 08                 2691 	inc	r0
   0BD3 36                 2692 	addc	a,@r0
   0BD4 FB                 2693 	mov	r3,a
   0BD5 08                 2694 	inc	r0
   0BD6 86 04              2695 	mov	ar4,@r0
   0BD8 C0 04              2696 	push	ar4
   0BDA C0 03              2697 	push	ar3
   0BDC C0 02              2698 	push	ar2
   0BDE C0 05              2699 	push	ar5
   0BE0 C0 06              2700 	push	ar6
   0BE2 C0 07              2701 	push	ar7
   0BE4 74r12              2702 	mov	a,#_send_next_packet
   0BE6 C0 E0              2703 	push	acc
   0BE8 74s0A              2704 	mov	a,#(_send_next_packet >> 8)
   0BEA C0 E0              2705 	push	acc
   0BEC E5*00              2706 	mov	a,_bp
   0BEE 24 07              2707 	add	a,#0x07
   0BF0 F8                 2708 	mov	r0,a
   0BF1 E6                 2709 	mov	a,@r0
   0BF2 C0 E0              2710 	push	acc
   0BF4 08                 2711 	inc	r0
   0BF5 E6                 2712 	mov	a,@r0
   0BF6 C0 E0              2713 	push	acc
   0BF8 8A 82              2714 	mov	dpl,r2
   0BFA 8B 83              2715 	mov	dph,r3
   0BFC 8C F0              2716 	mov	b,r4
   0BFE 12s00r00           2717 	lcall	_ctimer_set
   0C01 E5 81              2718 	mov	a,sp
   0C03 24 F9              2719 	add	a,#0xf9
   0C05 F5 81              2720 	mov	sp,a
   0C07 D0 02              2721 	pop	ar2
   0C09 D0 03              2722 	pop	ar3
   0C0B D0 04              2723 	pop	ar4
                           2724 ;	../../core/net/rime/rudolph1.c:295: c->nacks = 0;
   0C0D D0 04              2725 	pop	ar4
   0C0F D0 03              2726 	pop	ar3
   0C11 D0 02              2727 	pop	ar2
                           2728 ;	../../core/net/rime/rudolph1.c:293: ctimer_set(&c->t, c->send_interval, send_next_packet, c);
   0C13                    2729 00105$:
                           2730 ;	../../core/net/rime/rudolph1.c:295: c->nacks = 0;
   0C13 8A 82              2731 	mov	dpl,r2
   0C15 8B 83              2732 	mov	dph,r3
   0C17 8C F0              2733 	mov	b,r4
   0C19 E4                 2734 	clr	a
   0C1A 12s00r00           2735 	lcall	__gptrput
   0C1D 85*00 81           2736 	mov	sp,_bp
   0C20 D0*00              2737 	pop	_bp
   0C22 22                 2738 	ret
                           2739 ;------------------------------------------------------------
                           2740 ;Allocation info for local variables in function 'rudolph1_open'
                           2741 ;------------------------------------------------------------
                           2742 ;channel                   Allocated to stack - _bp -4
                           2743 ;cb                        Allocated to stack - _bp -7
                           2744 ;c                         Allocated to stack - _bp +1
                           2745 ;------------------------------------------------------------
                           2746 ;	../../core/net/rime/rudolph1.c:303: rudolph1_open(struct rudolph1_conn *c, uint16_t channel,
                           2747 ;	-----------------------------------------
                           2748 ;	 function rudolph1_open
                           2749 ;	-----------------------------------------
   0C23                    2750 _rudolph1_open:
   0C23 C0*00              2751 	push	_bp
   0C25 85 81*00           2752 	mov	_bp,sp
   0C28 C0 82              2753 	push	dpl
   0C2A C0 83              2754 	push	dph
   0C2C C0 F0              2755 	push	b
                           2756 ;	../../core/net/rime/rudolph1.c:306: trickle_open(&c->trickle, TRICKLE_INTERVAL, channel, &trickle);
   0C2E 74r06              2757 	mov	a,#_trickle
   0C30 C0 E0              2758 	push	acc
   0C32 74s00              2759 	mov	a,#(_trickle >> 8)
   0C34 C0 E0              2760 	push	acc
   0C36 74 80              2761 	mov	a,#0x80
   0C38 C0 E0              2762 	push	acc
   0C3A E5*00              2763 	mov	a,_bp
   0C3C 24 FC              2764 	add	a,#0xfc
   0C3E F8                 2765 	mov	r0,a
   0C3F E6                 2766 	mov	a,@r0
   0C40 C0 E0              2767 	push	acc
   0C42 08                 2768 	inc	r0
   0C43 E6                 2769 	mov	a,@r0
   0C44 C0 E0              2770 	push	acc
   0C46 74 40              2771 	mov	a,#0x40
   0C48 C0 E0              2772 	push	acc
   0C4A E4                 2773 	clr	a
   0C4B C0 E0              2774 	push	acc
   0C4D A8*00              2775 	mov	r0,_bp
   0C4F 08                 2776 	inc	r0
   0C50 86 82              2777 	mov	dpl,@r0
   0C52 08                 2778 	inc	r0
   0C53 86 83              2779 	mov	dph,@r0
   0C55 08                 2780 	inc	r0
   0C56 86 F0              2781 	mov	b,@r0
   0C58 12s00r00           2782 	lcall	_trickle_open
   0C5B E5 81              2783 	mov	a,sp
   0C5D 24 F9              2784 	add	a,#0xf9
   0C5F F5 81              2785 	mov	sp,a
                           2786 ;	../../core/net/rime/rudolph1.c:307: ipolite_open(&c->ipolite, channel + 1, 1, &ipolite);
   0C61 E5*00              2787 	mov	a,_bp
   0C63 24 FC              2788 	add	a,#0xfc
   0C65 F8                 2789 	mov	r0,a
   0C66 74 01              2790 	mov	a,#0x01
   0C68 26                 2791 	add	a,@r0
   0C69 FB                 2792 	mov	r3,a
   0C6A E4                 2793 	clr	a
   0C6B 08                 2794 	inc	r0
   0C6C 36                 2795 	addc	a,@r0
   0C6D FC                 2796 	mov	r4,a
   0C6E A8*00              2797 	mov	r0,_bp
   0C70 08                 2798 	inc	r0
   0C71 74 5B              2799 	mov	a,#0x5B
   0C73 26                 2800 	add	a,@r0
   0C74 FA                 2801 	mov	r2,a
   0C75 E4                 2802 	clr	a
   0C76 08                 2803 	inc	r0
   0C77 36                 2804 	addc	a,@r0
   0C78 FE                 2805 	mov	r6,a
   0C79 08                 2806 	inc	r0
   0C7A 86 07              2807 	mov	ar7,@r0
   0C7C 74r00              2808 	mov	a,#_ipolite
   0C7E C0 E0              2809 	push	acc
   0C80 74s00              2810 	mov	a,#(_ipolite >> 8)
   0C82 C0 E0              2811 	push	acc
   0C84 74 80              2812 	mov	a,#0x80
   0C86 C0 E0              2813 	push	acc
   0C88 74 01              2814 	mov	a,#0x01
   0C8A C0 E0              2815 	push	acc
   0C8C C0 03              2816 	push	ar3
   0C8E C0 04              2817 	push	ar4
   0C90 8A 82              2818 	mov	dpl,r2
   0C92 8E 83              2819 	mov	dph,r6
   0C94 8F F0              2820 	mov	b,r7
   0C96 12s00r00           2821 	lcall	_ipolite_open
   0C99 E5 81              2822 	mov	a,sp
   0C9B 24 FA              2823 	add	a,#0xfa
   0C9D F5 81              2824 	mov	sp,a
                           2825 ;	../../core/net/rime/rudolph1.c:308: c->cb = cb;
   0C9F A8*00              2826 	mov	r0,_bp
   0CA1 08                 2827 	inc	r0
   0CA2 74 88              2828 	mov	a,#0x88
   0CA4 26                 2829 	add	a,@r0
   0CA5 FD                 2830 	mov	r5,a
   0CA6 E4                 2831 	clr	a
   0CA7 08                 2832 	inc	r0
   0CA8 36                 2833 	addc	a,@r0
   0CA9 FE                 2834 	mov	r6,a
   0CAA 08                 2835 	inc	r0
   0CAB 86 07              2836 	mov	ar7,@r0
   0CAD 8D 82              2837 	mov	dpl,r5
   0CAF 8E 83              2838 	mov	dph,r6
   0CB1 8F F0              2839 	mov	b,r7
   0CB3 E5*00              2840 	mov	a,_bp
   0CB5 24 F9              2841 	add	a,#0xf9
   0CB7 F8                 2842 	mov	r0,a
   0CB8 E6                 2843 	mov	a,@r0
   0CB9 12s00r00           2844 	lcall	__gptrput
   0CBC A3                 2845 	inc	dptr
   0CBD 08                 2846 	inc	r0
   0CBE E6                 2847 	mov	a,@r0
   0CBF 12s00r00           2848 	lcall	__gptrput
   0CC2 A3                 2849 	inc	dptr
   0CC3 08                 2850 	inc	r0
   0CC4 E6                 2851 	mov	a,@r0
   0CC5 12s00r00           2852 	lcall	__gptrput
                           2853 ;	../../core/net/rime/rudolph1.c:309: c->version = 0;
   0CC8 A8*00              2854 	mov	r0,_bp
   0CCA 08                 2855 	inc	r0
   0CCB 74 A6              2856 	mov	a,#0xA6
   0CCD 26                 2857 	add	a,@r0
   0CCE FD                 2858 	mov	r5,a
   0CCF E4                 2859 	clr	a
   0CD0 08                 2860 	inc	r0
   0CD1 36                 2861 	addc	a,@r0
   0CD2 FE                 2862 	mov	r6,a
   0CD3 08                 2863 	inc	r0
   0CD4 86 07              2864 	mov	ar7,@r0
   0CD6 8D 82              2865 	mov	dpl,r5
   0CD8 8E 83              2866 	mov	dph,r6
   0CDA 8F F0              2867 	mov	b,r7
   0CDC E4                 2868 	clr	a
   0CDD 12s00r00           2869 	lcall	__gptrput
                           2870 ;	../../core/net/rime/rudolph1.c:310: c->send_interval = DEFAULT_SEND_INTERVAL;
   0CE0 A8*00              2871 	mov	r0,_bp
   0CE2 08                 2872 	inc	r0
   0CE3 74 A0              2873 	mov	a,#0xA0
   0CE5 26                 2874 	add	a,@r0
   0CE6 FD                 2875 	mov	r5,a
   0CE7 E4                 2876 	clr	a
   0CE8 08                 2877 	inc	r0
   0CE9 36                 2878 	addc	a,@r0
   0CEA FE                 2879 	mov	r6,a
   0CEB 08                 2880 	inc	r0
   0CEC 86 07              2881 	mov	ar7,@r0
   0CEE 8D 82              2882 	mov	dpl,r5
   0CF0 8E 83              2883 	mov	dph,r6
   0CF2 8F F0              2884 	mov	b,r7
   0CF4 E4                 2885 	clr	a
   0CF5 12s00r00           2886 	lcall	__gptrput
   0CF8 A3                 2887 	inc	dptr
   0CF9 74 01              2888 	mov	a,#0x01
   0CFB 12s00r00           2889 	lcall	__gptrput
   0CFE 85*00 81           2890 	mov	sp,_bp
   0D01 D0*00              2891 	pop	_bp
   0D03 22                 2892 	ret
                           2893 ;------------------------------------------------------------
                           2894 ;Allocation info for local variables in function 'rudolph1_close'
                           2895 ;------------------------------------------------------------
                           2896 ;c                         Allocated to registers r5 r6 r7 
                           2897 ;------------------------------------------------------------
                           2898 ;	../../core/net/rime/rudolph1.c:314: rudolph1_close(struct rudolph1_conn *c)
                           2899 ;	-----------------------------------------
                           2900 ;	 function rudolph1_close
                           2901 ;	-----------------------------------------
   0D04                    2902 _rudolph1_close:
                           2903 ;	../../core/net/rime/rudolph1.c:316: trickle_close(&c->trickle);
   0D04 AD 82              2904 	mov	r5,dpl
   0D06 AE 83              2905 	mov	r6,dph
   0D08 AF F0              2906 	mov	r7,b
   0D0A C0 07              2907 	push	ar7
   0D0C C0 06              2908 	push	ar6
   0D0E C0 05              2909 	push	ar5
   0D10 12s00r00           2910 	lcall	_trickle_close
   0D13 D0 05              2911 	pop	ar5
   0D15 D0 06              2912 	pop	ar6
   0D17 D0 07              2913 	pop	ar7
                           2914 ;	../../core/net/rime/rudolph1.c:317: ipolite_close(&c->ipolite);
   0D19 74 5B              2915 	mov	a,#0x5B
   0D1B 2D                 2916 	add	a,r5
   0D1C FD                 2917 	mov	r5,a
   0D1D E4                 2918 	clr	a
   0D1E 3E                 2919 	addc	a,r6
   0D1F FE                 2920 	mov	r6,a
   0D20 8D 82              2921 	mov	dpl,r5
   0D22 8E 83              2922 	mov	dph,r6
   0D24 8F F0              2923 	mov	b,r7
   0D26 02s00r00           2924 	ljmp	_ipolite_close
                           2925 ;------------------------------------------------------------
                           2926 ;Allocation info for local variables in function 'rudolph1_send'
                           2927 ;------------------------------------------------------------
                           2928 ;send_interval             Allocated to stack - _bp -4
                           2929 ;c                         Allocated to stack - _bp +1
                           2930 ;------------------------------------------------------------
                           2931 ;	../../core/net/rime/rudolph1.c:321: rudolph1_send(struct rudolph1_conn *c, clock_time_t send_interval)
                           2932 ;	-----------------------------------------
                           2933 ;	 function rudolph1_send
                           2934 ;	-----------------------------------------
   0D29                    2935 _rudolph1_send:
   0D29 C0*00              2936 	push	_bp
   0D2B 85 81*00           2937 	mov	_bp,sp
   0D2E C0 82              2938 	push	dpl
   0D30 C0 83              2939 	push	dph
   0D32 C0 F0              2940 	push	b
                           2941 ;	../../core/net/rime/rudolph1.c:323: c->version++;
   0D34 A8*00              2942 	mov	r0,_bp
   0D36 08                 2943 	inc	r0
   0D37 74 A6              2944 	mov	a,#0xA6
   0D39 26                 2945 	add	a,@r0
   0D3A FA                 2946 	mov	r2,a
   0D3B E4                 2947 	clr	a
   0D3C 08                 2948 	inc	r0
   0D3D 36                 2949 	addc	a,@r0
   0D3E FB                 2950 	mov	r3,a
   0D3F 08                 2951 	inc	r0
   0D40 86 04              2952 	mov	ar4,@r0
   0D42 8A 82              2953 	mov	dpl,r2
   0D44 8B 83              2954 	mov	dph,r3
   0D46 8C F0              2955 	mov	b,r4
   0D48 12s00r00           2956 	lcall	__gptrget
   0D4B FF                 2957 	mov	r7,a
   0D4C 0F                 2958 	inc	r7
   0D4D 8A 82              2959 	mov	dpl,r2
   0D4F 8B 83              2960 	mov	dph,r3
   0D51 8C F0              2961 	mov	b,r4
   0D53 EF                 2962 	mov	a,r7
   0D54 12s00r00           2963 	lcall	__gptrput
                           2964 ;	../../core/net/rime/rudolph1.c:324: c->chunk = c->highest_chunk_heard = 0;
   0D57 A8*00              2965 	mov	r0,_bp
   0D59 08                 2966 	inc	r0
   0D5A 74 A2              2967 	mov	a,#0xA2
   0D5C 26                 2968 	add	a,@r0
   0D5D FD                 2969 	mov	r5,a
   0D5E E4                 2970 	clr	a
   0D5F 08                 2971 	inc	r0
   0D60 36                 2972 	addc	a,@r0
   0D61 FE                 2973 	mov	r6,a
   0D62 08                 2974 	inc	r0
   0D63 86 07              2975 	mov	ar7,@r0
   0D65 A8*00              2976 	mov	r0,_bp
   0D67 08                 2977 	inc	r0
   0D68 74 A4              2978 	mov	a,#0xA4
   0D6A 26                 2979 	add	a,@r0
   0D6B FA                 2980 	mov	r2,a
   0D6C E4                 2981 	clr	a
   0D6D 08                 2982 	inc	r0
   0D6E 36                 2983 	addc	a,@r0
   0D6F FB                 2984 	mov	r3,a
   0D70 08                 2985 	inc	r0
   0D71 86 04              2986 	mov	ar4,@r0
   0D73 8A 82              2987 	mov	dpl,r2
   0D75 8B 83              2988 	mov	dph,r3
   0D77 8C F0              2989 	mov	b,r4
   0D79 E4                 2990 	clr	a
   0D7A 12s00r00           2991 	lcall	__gptrput
   0D7D A3                 2992 	inc	dptr
   0D7E E4                 2993 	clr	a
   0D7F 12s00r00           2994 	lcall	__gptrput
   0D82 8D 82              2995 	mov	dpl,r5
   0D84 8E 83              2996 	mov	dph,r6
   0D86 8F F0              2997 	mov	b,r7
   0D88 E4                 2998 	clr	a
   0D89 12s00r00           2999 	lcall	__gptrput
   0D8C A3                 3000 	inc	dptr
   0D8D E4                 3001 	clr	a
   0D8E 12s00r00           3002 	lcall	__gptrput
                           3003 ;	../../core/net/rime/rudolph1.c:326: format_data(c, 0);
   0D91 E4                 3004 	clr	a
   0D92 C0 E0              3005 	push	acc
   0D94 C0 E0              3006 	push	acc
   0D96 A8*00              3007 	mov	r0,_bp
   0D98 08                 3008 	inc	r0
   0D99 86 82              3009 	mov	dpl,@r0
   0D9B 08                 3010 	inc	r0
   0D9C 86 83              3011 	mov	dph,@r0
   0D9E 08                 3012 	inc	r0
   0D9F 86 F0              3013 	mov	b,@r0
   0DA1 12s00rAE           3014 	lcall	_format_data
   0DA4 15 81              3015 	dec	sp
   0DA6 15 81              3016 	dec	sp
                           3017 ;	../../core/net/rime/rudolph1.c:327: trickle_send(&c->trickle);
   0DA8 A8*00              3018 	mov	r0,_bp
   0DAA 08                 3019 	inc	r0
   0DAB 86 82              3020 	mov	dpl,@r0
   0DAD 08                 3021 	inc	r0
   0DAE 86 83              3022 	mov	dph,@r0
   0DB0 08                 3023 	inc	r0
   0DB1 86 F0              3024 	mov	b,@r0
   0DB3 12s00r00           3025 	lcall	_trickle_send
                           3026 ;	../../core/net/rime/rudolph1.c:328: c->chunk++;
   0DB6 A8*00              3027 	mov	r0,_bp
   0DB8 08                 3028 	inc	r0
   0DB9 74 A2              3029 	mov	a,#0xA2
   0DBB 26                 3030 	add	a,@r0
   0DBC FD                 3031 	mov	r5,a
   0DBD E4                 3032 	clr	a
   0DBE 08                 3033 	inc	r0
   0DBF 36                 3034 	addc	a,@r0
   0DC0 FE                 3035 	mov	r6,a
   0DC1 08                 3036 	inc	r0
   0DC2 86 07              3037 	mov	ar7,@r0
   0DC4 8D 82              3038 	mov	dpl,r5
   0DC6 8E 83              3039 	mov	dph,r6
   0DC8 8F F0              3040 	mov	b,r7
   0DCA 12s00r00           3041 	lcall	__gptrget
   0DCD FB                 3042 	mov	r3,a
   0DCE A3                 3043 	inc	dptr
   0DCF 12s00r00           3044 	lcall	__gptrget
   0DD2 FC                 3045 	mov	r4,a
   0DD3 0B                 3046 	inc	r3
   0DD4 BB 00 01           3047 	cjne	r3,#0x00,00103$
   0DD7 0C                 3048 	inc	r4
   0DD8                    3049 00103$:
   0DD8 8D 82              3050 	mov	dpl,r5
   0DDA 8E 83              3051 	mov	dph,r6
   0DDC 8F F0              3052 	mov	b,r7
   0DDE EB                 3053 	mov	a,r3
   0DDF 12s00r00           3054 	lcall	__gptrput
   0DE2 A3                 3055 	inc	dptr
   0DE3 EC                 3056 	mov	a,r4
   0DE4 12s00r00           3057 	lcall	__gptrput
                           3058 ;	../../core/net/rime/rudolph1.c:329: c->send_interval = send_interval;
   0DE7 A8*00              3059 	mov	r0,_bp
   0DE9 08                 3060 	inc	r0
   0DEA 74 A0              3061 	mov	a,#0xA0
   0DEC 26                 3062 	add	a,@r0
   0DED FD                 3063 	mov	r5,a
   0DEE E4                 3064 	clr	a
   0DEF 08                 3065 	inc	r0
   0DF0 36                 3066 	addc	a,@r0
   0DF1 FE                 3067 	mov	r6,a
   0DF2 08                 3068 	inc	r0
   0DF3 86 07              3069 	mov	ar7,@r0
   0DF5 8D 82              3070 	mov	dpl,r5
   0DF7 8E 83              3071 	mov	dph,r6
   0DF9 8F F0              3072 	mov	b,r7
   0DFB E5*00              3073 	mov	a,_bp
   0DFD 24 FC              3074 	add	a,#0xfc
   0DFF F8                 3075 	mov	r0,a
   0E00 E6                 3076 	mov	a,@r0
   0E01 12s00r00           3077 	lcall	__gptrput
   0E04 A3                 3078 	inc	dptr
   0E05 08                 3079 	inc	r0
   0E06 E6                 3080 	mov	a,@r0
   0E07 12s00r00           3081 	lcall	__gptrput
                           3082 ;	../../core/net/rime/rudolph1.c:330: ctimer_set(&c->t, send_interval, send_next_packet, c);
   0E0A A8*00              3083 	mov	r0,_bp
   0E0C 08                 3084 	inc	r0
   0E0D 86 05              3085 	mov	ar5,@r0
   0E0F 08                 3086 	inc	r0
   0E10 86 06              3087 	mov	ar6,@r0
   0E12 08                 3088 	inc	r0
   0E13 86 07              3089 	mov	ar7,@r0
   0E15 A8*00              3090 	mov	r0,_bp
   0E17 08                 3091 	inc	r0
   0E18 74 8B              3092 	mov	a,#0x8B
   0E1A 26                 3093 	add	a,@r0
   0E1B FA                 3094 	mov	r2,a
   0E1C E4                 3095 	clr	a
   0E1D 08                 3096 	inc	r0
   0E1E 36                 3097 	addc	a,@r0
   0E1F FB                 3098 	mov	r3,a
   0E20 08                 3099 	inc	r0
   0E21 86 04              3100 	mov	ar4,@r0
   0E23 C0 05              3101 	push	ar5
   0E25 C0 06              3102 	push	ar6
   0E27 C0 07              3103 	push	ar7
   0E29 74r12              3104 	mov	a,#_send_next_packet
   0E2B C0 E0              3105 	push	acc
   0E2D 74s0A              3106 	mov	a,#(_send_next_packet >> 8)
   0E2F C0 E0              3107 	push	acc
   0E31 E5*00              3108 	mov	a,_bp
   0E33 24 FC              3109 	add	a,#0xfc
   0E35 F8                 3110 	mov	r0,a
   0E36 E6                 3111 	mov	a,@r0
   0E37 C0 E0              3112 	push	acc
   0E39 08                 3113 	inc	r0
   0E3A E6                 3114 	mov	a,@r0
   0E3B C0 E0              3115 	push	acc
   0E3D 8A 82              3116 	mov	dpl,r2
   0E3F 8B 83              3117 	mov	dph,r3
   0E41 8C F0              3118 	mov	b,r4
   0E43 12s00r00           3119 	lcall	_ctimer_set
   0E46 E5 81              3120 	mov	a,sp
   0E48 24 F9              3121 	add	a,#0xf9
   0E4A F5 81              3122 	mov	sp,a
   0E4C 85*00 81           3123 	mov	sp,_bp
   0E4F D0*00              3124 	pop	_bp
   0E51 22                 3125 	ret
                           3126 ;------------------------------------------------------------
                           3127 ;Allocation info for local variables in function 'rudolph1_stop'
                           3128 ;------------------------------------------------------------
                           3129 ;c                         Allocated to registers r5 r6 r7 
                           3130 ;------------------------------------------------------------
                           3131 ;	../../core/net/rime/rudolph1.c:334: rudolph1_stop(struct rudolph1_conn *c)
                           3132 ;	-----------------------------------------
                           3133 ;	 function rudolph1_stop
                           3134 ;	-----------------------------------------
   0E52                    3135 _rudolph1_stop:
   0E52 AD 82              3136 	mov	r5,dpl
   0E54 AE 83              3137 	mov	r6,dph
   0E56 AF F0              3138 	mov	r7,b
                           3139 ;	../../core/net/rime/rudolph1.c:336: ctimer_stop(&c->t);
   0E58 74 8B              3140 	mov	a,#0x8B
   0E5A 2D                 3141 	add	a,r5
   0E5B FD                 3142 	mov	r5,a
   0E5C E4                 3143 	clr	a
   0E5D 3E                 3144 	addc	a,r6
   0E5E FE                 3145 	mov	r6,a
   0E5F 8D 82              3146 	mov	dpl,r5
   0E61 8E 83              3147 	mov	dph,r6
   0E63 8F F0              3148 	mov	b,r7
   0E65 02s00r00           3149 	ljmp	_ctimer_stop
                           3150 	.area CSEG    (CODE)
                           3151 	.area CONST   (CODE)
   0000                    3152 _ipolite:
   0000r40s08              3153 	.byte _recv_ipolite,(_recv_ipolite >> 8)
   0002r3Es08              3154 	.byte _sent_ipolite,(_sent_ipolite >> 8)
   0004r3Fs08              3155 	.byte _dropped_ipolite,(_dropped_ipolite >> 8)
   0006                    3156 _trickle:
   0006r02s08              3157 	.byte _recv_trickle,(_recv_trickle >> 8)
                           3158 	.area XINIT   (CODE)
                           3159 	.area CABS    (ABS,CODE)
